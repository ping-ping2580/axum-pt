/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./../pages/__root";
import { Route as LayoutRouteImport } from "./../pages/_layout/route";
import { Route as LayoutIndexImport } from "./../pages/_layout/index";
import { Route as CommonLoginImport } from "./../pages/_common/login";

// Create/Update Routes

const LayoutRouteRoute = LayoutRouteImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any);

const LayoutIndexRoute = LayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRouteRoute,
} as any);

const CommonLoginRoute = CommonLoginImport.update({
  id: "/_common/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/_common/login": {
      id: "/_common/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof CommonLoginImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof LayoutIndexImport;
      parentRoute: typeof LayoutRouteImport;
    };
  }
}

// Create and export the route tree

interface LayoutRouteRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute;
}

const LayoutRouteRouteChildren: LayoutRouteRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
};

const LayoutRouteRouteWithChildren = LayoutRouteRoute._addFileChildren(
  LayoutRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof LayoutRouteRouteWithChildren;
  "/login": typeof CommonLoginRoute;
  "/": typeof LayoutIndexRoute;
}

export interface FileRoutesByTo {
  "/login": typeof CommonLoginRoute;
  "/": typeof LayoutIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_layout": typeof LayoutRouteRouteWithChildren;
  "/_common/login": typeof CommonLoginRoute;
  "/_layout/": typeof LayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "" | "/login" | "/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/login" | "/";
  id: "__root__" | "/_layout" | "/_common/login" | "/_layout/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRouteRoute: typeof LayoutRouteRouteWithChildren;
  CommonLoginRoute: typeof CommonLoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRouteRoute: LayoutRouteRouteWithChildren,
  CommonLoginRoute: CommonLoginRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/_common/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout/route.tsx",
      "children": [
        "/_layout/"
      ]
    },
    "/_common/login": {
      "filePath": "_common/login.tsx"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
