{"version":3,"file":"@tanstack_react-table.js","names":["table","column","row","cell","min","max","sum","count","header","e","noop","options","columnDefs","orderColumns","rowsToFilter","groupedRows","columnId"],"sources":["../../.pnpm/@tanstack+table-core@8.21.3/node_modules/@tanstack/table-core/build/lib/index.mjs","../../.pnpm/@tanstack+react-table@8.21.3_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@tanstack/react-table/build/lib/index.mjs"],"sourcesContent":["/**\n   * table-core\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction isNumberArray(d) {\n  return Array.isArray(d) && d.every(val => typeof val === 'number');\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return depArgs => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps(depArgs);\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null || opts.onChange == null || opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\nfunction getMemoOptions(tableOptions, debugLevel, key, onChange) {\n  return {\n    debug: () => {\n      var _tableOptions$debugAl;\n      return (_tableOptions$debugAl = tableOptions == null ? void 0 : tableOptions.debugAll) != null ? _tableOptions$debugAl : tableOptions[debugLevel];\n    },\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange\n  };\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), getMemoOptions(table.options, 'debugCells', 'cell.getContext'))\n  };\n  table._features.forEach(feature => {\n    feature.createCell == null || feature.createCell(cell, column, row, table);\n  }, {});\n  return cell;\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? typeof String.prototype.replaceAll === 'function' ? accessorKey.replaceAll('.', '_') : accessorKey.replace(/\\./g, '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns'))\n  };\n  for (const feature of table._features) {\n    feature.createColumn == null || feature.createColumn(column, table);\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column;\n}\n\nconst debug = 'debugHeaders';\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    feature.createHeader == null || feature.createHeader(header, table);\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      var _left$map$filter, _right$map$filter;\n      const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n      const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n      const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n      return headerGroups;\n    }, getMemoOptions(table.options, debug, 'getHeaderGroups'));\n    table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n      leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n      return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n    }, getMemoOptions(table.options, debug, 'getCenterHeaderGroups'));\n    table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n      var _left$map$filter2;\n      const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n    }, getMemoOptions(table.options, debug, 'getLeftHeaderGroups'));\n    table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n      var _right$map$filter2;\n      const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n      return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n    }, getMemoOptions(table.options, debug, 'getRightHeaderGroups'));\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getFooterGroups'));\n    table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getLeftFooterGroups'));\n    table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getCenterFooterGroups'));\n    table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], headerGroups => {\n      return [...headerGroups].reverse();\n    }, getMemoOptions(table.options, debug, 'getRightFooterGroups'));\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(() => [table.getHeaderGroups()], headerGroups => {\n      return headerGroups.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getFlatHeaders'));\n    table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeftFlatHeaders'));\n    table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getCenterFlatHeaders'));\n    table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], left => {\n      return left.map(headerGroup => {\n        return headerGroup.headers;\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getRightFlatHeaders'));\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders;\n        return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getCenterLeafHeaders'));\n    table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders2;\n        return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getLeftLeafHeaders'));\n    table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n      return flatHeaders.filter(header => {\n        var _header$subHeaders3;\n        return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n      });\n    }, getMemoOptions(table.options, debug, 'getRightLeafHeaders'));\n    table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n      var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n      return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n        return header.getLeafHeaders();\n      }).flat();\n    }, getMemoOptions(table.options, debug, 'getLeafHeaders'));\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCells')),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId'))\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    feature == null || feature.createRow == null || feature.createRow(row, table);\n  }\n  return row;\n};\n\n//\n\nconst ColumnFaceting = {\n  createColumn: (column, table) => {\n    column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return column._getFacetedRowModel();\n    };\n    column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map();\n      }\n      return column._getFacetedUniqueValues();\n    };\n    column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined;\n      }\n      return column._getFacetedMinMaxValues();\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _filterValue$toString, _row$getValue;\n  const search = filterValue == null || (_filterValue$toString = filterValue.toString()) == null ? void 0 : _filterValue$toString.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n  return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst ColumnFiltering = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return filterFns.includesString;\n      }\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange;\n      }\n      if (typeof value === 'boolean') {\n        return filterFns.equals;\n      }\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals;\n      }\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes;\n      }\n      return filterFns.weakEquals;\n    };\n    column.getFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\n      (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n    };\n    column.getCanFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n      return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n    };\n    column.getIsFiltered = () => column.getFilterIndex() > -1;\n    column.getFilterValue = () => {\n      var _table$getState$colum;\n      return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;\n    };\n    column.getFilterIndex = () => {\n      var _table$getState$colum2, _table$getState$colum3;\n      return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex(d => d.id === column.id)) != null ? _table$getState$colum2 : -1;\n    };\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn();\n        const previousFilter = old == null ? void 0 : old.find(d => d.id === column.id);\n        const newFilter = functionalUpdate(value, previousFilter ? previousFilter.value : undefined);\n\n        //\n        if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n          var _old$filter;\n          return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n        }\n        const newFilterObj = {\n          id: column.id,\n          value: newFilter\n        };\n        if (previousFilter) {\n          var _old$map;\n          return (_old$map = old == null ? void 0 : old.map(d => {\n            if (d.id === column.id) {\n              return newFilterObj;\n            }\n            return d;\n          })) != null ? _old$map : [];\n        }\n        if (old != null && old.length) {\n          return [...old, newFilterObj];\n        }\n        return [newFilterObj];\n      });\n    };\n  },\n  createRow: (row, _table) => {\n    row.columnFilters = {};\n    row.columnFiltersMeta = {};\n  },\n  createTable: table => {\n    table.setColumnFilters = updater => {\n      const leafColumns = table.getAllLeafColumns();\n      const updateFn = old => {\n        var _functionalUpdate;\n        return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id);\n          if (column) {\n            const filterFn = column.getFilterFn();\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false;\n            }\n          }\n          return true;\n        });\n      };\n      table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);\n    };\n    table.resetColumnFilters = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n    };\n    table.getPreFilteredRowModel = () => table.getCoreRowModel();\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n      }\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getFilteredRowModel();\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  const values = leafRows.map(row => row.getValue(columnId));\n  if (!isNumberArray(values)) {\n    return;\n  }\n  if (values.length === 1) {\n    return values[0];\n  }\n  const mid = Math.floor(values.length / 2);\n  const nums = values.sort((a, b) => a - b);\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst ColumnGrouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old != null && old.includes(column.id)) {\n          return old.filter(d => d !== column.id);\n        }\n        return [...(old != null ? old : []), column.id];\n      });\n    };\n    column.getCanGroup = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGrouping) != null ? _table$options$enable : true) && (!!column.accessorFn || !!column.columnDef.getGroupingValue);\n    };\n    column.getIsGrouped = () => {\n      var _table$getState$group;\n      return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n    };\n    column.getGroupedIndex = () => {\n      var _table$getState$group2;\n      return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n    };\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup();\n      return () => {\n        if (!canGroup) return;\n        column.toggleGrouping();\n      };\n    };\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'number') {\n        return aggregationFns.sum;\n      }\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent;\n      }\n    };\n    column.getAggregationFn = () => {\n      var _table$options$aggreg, _table$options$aggreg2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n    };\n  },\n  createTable: table => {\n    table.setGrouping = updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);\n    table.resetGrouping = defaultState => {\n      var _table$initialState$g, _table$initialState;\n      table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n    };\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel();\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n      }\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel();\n      }\n      return table._getGroupedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.getIsGrouped = () => !!row.groupingColumnId;\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.columnDef.getGroupingValue)) {\n        return row.getValue(columnId);\n      }\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);\n      return row._groupingValuesCache[columnId];\n    };\n    row._groupingValuesCache = {};\n  },\n  createCell: (cell, column, row, table) => {\n    cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();\n    cell.getIsAggregated = () => {\n      var _row$subRows;\n      return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst ColumnOrdering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getIndex = memo(position => [_getVisibleLeafColumns(table, position)], columns => columns.findIndex(d => d.id === column.id), getMemoOptions(table.options, 'debugColumns', 'getIndex'));\n    column.getIsFirstColumn = position => {\n      var _columns$;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column.id;\n    };\n    column.getIsLastColumn = position => {\n      var _columns;\n      const columns = _getVisibleLeafColumns(table, position);\n      return ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) === column.id;\n    };\n  },\n  createTable: table => {\n    table.setColumnOrder = updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);\n    table.resetColumnOrder = defaultState => {\n      var _table$initialState$c;\n      table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n    };\n    table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n      // Sort grouped columns to the start of the column list\n      // before the headers are built\n      let orderedColumns = [];\n\n      // If there is no order, return the normal columns\n      if (!(columnOrder != null && columnOrder.length)) {\n        orderedColumns = columns;\n      } else {\n        const columnOrderCopy = [...columnOrder];\n\n        // If there is an order, make a copy of the columns\n        const columnsCopy = [...columns];\n\n        // And make a new ordered array of the columns\n\n        // Loop over the columns and place them in order into the new array\n        while (columnsCopy.length && columnOrderCopy.length) {\n          const targetColumnId = columnOrderCopy.shift();\n          const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n          if (foundIndex > -1) {\n            orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n          }\n        }\n\n        // If there are any columns left, add them to the end\n        orderedColumns = [...orderedColumns, ...columnsCopy];\n      }\n      return orderColumns(orderedColumns, grouping, groupedColumnMode);\n    }, getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn'));\n  }\n};\n\n//\n\nconst getDefaultColumnPinningState = () => ({\n  left: [],\n  right: []\n});\nconst ColumnPinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.pin = position => {\n      const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n      table.setColumnPinning(old => {\n        var _old$left3, _old$right3;\n        if (position === 'right') {\n          var _old$left, _old$right;\n          return {\n            left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n          };\n        }\n        if (position === 'left') {\n          var _old$left2, _old$right2;\n          return {\n            left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n            right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        }\n        return {\n          left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n          right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n        };\n      });\n    };\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns();\n      return leafColumns.some(d => {\n        var _d$columnDef$enablePi, _ref, _table$options$enable;\n        return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);\n      });\n    };\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id);\n      const {\n        left,\n        right\n      } = table.getState().columnPinning;\n      const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n      const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n      return isLeft ? 'left' : isRight ? 'right' : false;\n    };\n    column.getPinnedIndex = () => {\n      var _table$getState$colum, _table$getState$colum2;\n      const position = column.getIsPinned();\n      return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n    };\n  },\n  createRow: (row, table) => {\n    row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allCells.filter(d => !leftAndRight.includes(d.column.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells'));\n    row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left], (allCells, left) => {\n      const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'left'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells'));\n    row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n      const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n        ...d,\n        position: 'right'\n      }));\n      return cells;\n    }, getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells'));\n  },\n  createTable: table => {\n    table.setColumnPinning = updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);\n    table.resetColumnPinning = defaultState => {\n      var _table$initialState$c, _table$initialState;\n      return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());\n    };\n    table.getIsSomeColumnsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().columnPinning;\n      if (!position) {\n        var _pinningState$left, _pinningState$right;\n        return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n      return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns'));\n    table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n      return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n    }, getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns'));\n    table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n      const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n      return allColumns.filter(d => !leftAndRight.includes(d.id));\n    }, getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns'));\n  }\n};\n\nfunction safelyAccessDocument(_document) {\n  return _document || (typeof document !== 'undefined' ? document : null);\n}\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.getSize = () => {\n      var _column$columnDef$min, _ref, _column$columnDef$max;\n      const columnSize = table.getState().columnSizing[column.id];\n      return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n    };\n    column.getStart = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(0, column.getIndex(position)).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getStart'));\n    column.getAfter = memo(position => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(column.getIndex(position) + 1).reduce((sum, column) => sum + column.getSize(), 0), getMemoOptions(table.options, 'debugColumns', 'getAfter'));\n    column.resetSize = () => {\n      table.setColumnSizing(_ref2 => {\n        let {\n          [column.id]: _,\n          ...rest\n        } = _ref2;\n        return rest;\n      });\n    };\n    column.getCanResize = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n    };\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id;\n    };\n  },\n  createHeader: (header, table) => {\n    header.getSize = () => {\n      let sum = 0;\n      const recurse = header => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse);\n        } else {\n          var _header$column$getSiz;\n          sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n        }\n      };\n      recurse(header);\n      return sum;\n    };\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n      }\n      return 0;\n    };\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id);\n      const canResize = column == null ? void 0 : column.getCanResize();\n      return e => {\n        if (!column || !canResize) {\n          return;\n        }\n        e.persist == null || e.persist();\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return;\n          }\n        }\n        const startSize = header.getSize();\n        const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n        const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n        const newColumnSizing = {};\n        const updateOffset = (eventType, clientXPos) => {\n          if (typeof clientXPos !== 'number') {\n            return;\n          }\n          table.setColumnSizingInfo(old => {\n            var _old$startOffset, _old$startSize;\n            const deltaDirection = table.options.columnResizeDirection === 'rtl' ? -1 : 1;\n            const deltaOffset = (clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0)) * deltaDirection;\n            const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n            old.columnSizingStart.forEach(_ref3 => {\n              let [columnId, headerSize] = _ref3;\n              newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n            });\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage\n            };\n          });\n          if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing\n            }));\n          }\n        };\n        const onMove = clientXPos => updateOffset('move', clientXPos);\n        const onEnd = clientXPos => {\n          updateOffset('end', clientXPos);\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: []\n          }));\n        };\n        const contextDocument = safelyAccessDocument(_contextDocument);\n        const mouseEvents = {\n          moveHandler: e => onMove(e.clientX),\n          upHandler: e => {\n            contextDocument == null || contextDocument.removeEventListener('mousemove', mouseEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('mouseup', mouseEvents.upHandler);\n            onEnd(e.clientX);\n          }\n        };\n        const touchEvents = {\n          moveHandler: e => {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onMove(e.touches[0].clientX);\n            return false;\n          },\n          upHandler: e => {\n            var _e$touches$;\n            contextDocument == null || contextDocument.removeEventListener('touchmove', touchEvents.moveHandler);\n            contextDocument == null || contextDocument.removeEventListener('touchend', touchEvents.upHandler);\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n            onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n          }\n        };\n        const passiveIfSupported = passiveEventSupported() ? {\n          passive: false\n        } : false;\n        if (isTouchStartEvent(e)) {\n          contextDocument == null || contextDocument.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n        } else {\n          contextDocument == null || contextDocument.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n          contextDocument == null || contextDocument.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n        }\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id\n        }));\n      };\n    };\n  },\n  createTable: table => {\n    table.setColumnSizing = updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);\n    table.setColumnSizingInfo = updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);\n    table.resetColumnSizing = defaultState => {\n      var _table$initialState$c;\n      table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n    };\n    table.resetHeaderSizeInfo = defaultState => {\n      var _table$initialState$c2;\n      table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n    };\n    table.getTotalSize = () => {\n      var _table$getHeaderGroup, _table$getHeaderGroup2;\n      return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getHeaderGroup : 0;\n    };\n    table.getLeftTotalSize = () => {\n      var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n      return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getLeftHeaderG : 0;\n    };\n    table.getCenterTotalSize = () => {\n      var _table$getCenterHeade, _table$getCenterHeade2;\n      return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getCenterHeade : 0;\n    };\n    table.getRightTotalSize = () => {\n      var _table$getRightHeader, _table$getRightHeader2;\n      return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n        return sum + header.getSize();\n      }, 0)) != null ? _table$getRightHeader : 0;\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst ColumnVisibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value != null ? value : !column.getIsVisible()\n        }));\n      }\n    };\n    column.getIsVisible = () => {\n      var _ref, _table$getState$colum;\n      const childColumns = column.columns;\n      return (_ref = childColumns.length ? childColumns.some(c => c.getIsVisible()) : (_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) != null ? _ref : true;\n    };\n    column.getCanHide = () => {\n      var _column$columnDef$ena, _table$options$enable;\n      return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n    };\n    column.getToggleVisibilityHandler = () => {\n      return e => {\n        column.toggleVisibility == null || column.toggleVisibility(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n      return cells.filter(cell => cell.column.getIsVisible());\n    }, getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells'));\n    row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], getMemoOptions(table.options, 'debugRows', 'getVisibleCells'));\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, getMemoOptions(table.options, 'debugColumns', key));\n    };\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns());\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns());\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns());\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns());\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns());\n    table.setColumnVisibility = updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);\n    table.resetColumnVisibility = defaultState => {\n      var _table$initialState$c;\n      table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n    };\n    table.toggleAllColumnsVisible = value => {\n      var _value;\n      value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n      table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n        ...obj,\n        [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n      }), {}));\n    };\n    table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible()));\n    table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible());\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return e => {\n        var _target;\n        table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nfunction _getVisibleLeafColumns(table, position) {\n  return !position ? table.getVisibleLeafColumns() : position === 'center' ? table.getCenterVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n}\n\n//\n\nconst GlobalFaceting = {\n  createTable: table => {\n    table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__');\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel();\n      }\n      return table._getGlobalFacetedRowModel();\n    };\n    table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__');\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map();\n      }\n      return table._getGlobalFacetedUniqueValues();\n    };\n    table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__');\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return;\n      }\n      return table._getGlobalFacetedMinMaxValues();\n    };\n  }\n};\n\n//\n\nconst GlobalFiltering = {\n  getInitialState: state => {\n    return {\n      globalFilter: undefined,\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getCanGlobalFilter = () => {\n      var _column$columnDef$ena, _table$options$enable, _table$options$enable2, _table$options$getCol;\n      return ((_column$columnDef$ena = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGlobalFilter) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n    };\n  },\n  createTable: table => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString;\n    };\n    table.getGlobalFilterFn = () => {\n      var _table$options$filter, _table$options$filter2;\n      const {\n        globalFilterFn: globalFilterFn\n      } = table.options;\n      return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) != null ? _table$options$filter : filterFns[globalFilterFn];\n    };\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);\n    };\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n    };\n  }\n};\n\n//\n\nconst RowExpanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetExpanded = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetExpanded();\n          queued = false;\n        });\n      }\n    };\n    table.setExpanded = updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true);\n      } else {\n        table.setExpanded({});\n      }\n    };\n    table.resetExpanded = defaultState => {\n      var _table$initialState$e, _table$initialState;\n      table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n    };\n    table.getCanSomeRowsExpand = () => {\n      return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n    };\n    table.getToggleAllRowsExpandedHandler = () => {\n      return e => {\n        e.persist == null || e.persist();\n        table.toggleAllRowsExpanded();\n      };\n    };\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n      return expanded === true || Object.values(expanded).some(Boolean);\n    };\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded;\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true;\n      }\n      if (!Object.keys(expanded).length) {\n        return false;\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false;\n      }\n\n      // They must all be expanded :shrug:\n      return true;\n    };\n    table.getExpandedDepth = () => {\n      let maxDepth = 0;\n      const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n      rowIds.forEach(id => {\n        const splitId = id.split('.');\n        maxDepth = Math.max(maxDepth, splitId.length);\n      });\n      return maxDepth;\n    };\n    table.getPreExpandedRowModel = () => table.getSortedRowModel();\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n      }\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel();\n      }\n      return table._getExpandedRowModel();\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        var _expanded;\n        const exists = old === true ? true : !!(old != null && old[row.id]);\n        let oldExpanded = {};\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true;\n          });\n        } else {\n          oldExpanded = old;\n        }\n        expanded = (_expanded = expanded) != null ? _expanded : !exists;\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true\n          };\n        }\n        if (exists && !expanded) {\n          const {\n            [row.id]: _,\n            ...rest\n          } = oldExpanded;\n          return rest;\n        }\n        return old;\n      });\n    };\n    row.getIsExpanded = () => {\n      var _table$options$getIsR;\n      const expanded = table.getState().expanded;\n      return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n    };\n    row.getCanExpand = () => {\n      var _table$options$getRow, _table$options$enable, _row$subRows;\n      return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n    };\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true;\n      let currentRow = row;\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true);\n        isFullyExpanded = currentRow.getIsExpanded();\n      }\n      return isFullyExpanded;\n    };\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand();\n      return () => {\n        if (!canExpand) return;\n        row.toggleExpanded();\n      };\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst RowPagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    table._autoResetPageIndex = () => {\n      var _ref, _table$options$autoRe;\n      if (!registered) {\n        table._queue(() => {\n          registered = true;\n        });\n        return;\n      }\n      if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n        if (queued) return;\n        queued = true;\n        table._queue(() => {\n          table.resetPageIndex();\n          queued = false;\n        });\n      }\n    };\n    table.setPagination = updater => {\n      const safeUpdater = old => {\n        let newState = functionalUpdate(updater, old);\n        return newState;\n      };\n      return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n    };\n    table.resetPagination = defaultState => {\n      var _table$initialState$p;\n      table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n    };\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex);\n        const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n        return {\n          ...old,\n          pageIndex\n        };\n      });\n    };\n    table.resetPageIndex = defaultState => {\n      var _table$initialState$p2, _table$initialState;\n      table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n    };\n    table.resetPageSize = defaultState => {\n      var _table$initialState$p3, _table$initialState2;\n      table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\n    };\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n        const topRowIndex = old.pageSize * old.pageIndex;\n        const pageIndex = Math.floor(topRowIndex / pageSize);\n        return {\n          ...old,\n          pageIndex,\n          pageSize\n        };\n      });\n    };\n    //deprecated\n    table.setPageCount = updater => table.setPagination(old => {\n      var _table$options$pageCo;\n      let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n      if (typeof newPageCount === 'number') {\n        newPageCount = Math.max(-1, newPageCount);\n      }\n      return {\n        ...old,\n        pageCount: newPageCount\n      };\n    });\n    table.getPageOptions = memo(() => [table.getPageCount()], pageCount => {\n      let pageOptions = [];\n      if (pageCount && pageCount > 0) {\n        pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n      }\n      return pageOptions;\n    }, getMemoOptions(table.options, 'debugTable', 'getPageOptions'));\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;\n    table.getCanNextPage = () => {\n      const {\n        pageIndex\n      } = table.getState().pagination;\n      const pageCount = table.getPageCount();\n      if (pageCount === -1) {\n        return true;\n      }\n      if (pageCount === 0) {\n        return false;\n      }\n      return pageIndex < pageCount - 1;\n    };\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1);\n    };\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1;\n      });\n    };\n    table.firstPage = () => {\n      return table.setPageIndex(0);\n    };\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1);\n    };\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel();\n    table.getPaginationRowModel = () => {\n      if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n        table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n      }\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel();\n      }\n      return table._getPaginationRowModel();\n    };\n    table.getPageCount = () => {\n      var _table$options$pageCo2;\n      return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize);\n    };\n    table.getRowCount = () => {\n      var _table$options$rowCou;\n      return (_table$options$rowCou = table.options.rowCount) != null ? _table$options$rowCou : table.getPrePaginationRowModel().rows.length;\n    };\n  }\n};\n\n//\n\nconst getDefaultRowPinningState = () => ({\n  top: [],\n  bottom: []\n});\nconst RowPinning = {\n  getInitialState: state => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table)\n    };\n  },\n  createRow: (row, table) => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows ? row.getLeafRows().map(_ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      }) : [];\n      const parentRowIds = includeParentRows ? row.getParentRows().map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return id;\n      }) : [];\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds]);\n      table.setRowPinning(old => {\n        var _old$top3, _old$bottom3;\n        if (position === 'bottom') {\n          var _old$top, _old$bottom;\n          return {\n            top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter(d => !(rowIds != null && rowIds.has(d))),\n            bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]\n          };\n        }\n        if (position === 'top') {\n          var _old$top2, _old$bottom2;\n          return {\n            top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter(d => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],\n            bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n          };\n        }\n        return {\n          top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter(d => !(rowIds != null && rowIds.has(d))),\n          bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter(d => !(rowIds != null && rowIds.has(d)))\n        };\n      });\n    };\n    row.getCanPin = () => {\n      var _ref3;\n      const {\n        enableRowPinning,\n        enablePinning\n      } = table.options;\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row);\n      }\n      return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref3 : true;\n    };\n    row.getIsPinned = () => {\n      const rowIds = [row.id];\n      const {\n        top,\n        bottom\n      } = table.getState().rowPinning;\n      const isTop = rowIds.some(d => top == null ? void 0 : top.includes(d));\n      const isBottom = rowIds.some(d => bottom == null ? void 0 : bottom.includes(d));\n      return isTop ? 'top' : isBottom ? 'bottom' : false;\n    };\n    row.getPinnedIndex = () => {\n      var _ref4, _visiblePinnedRowIds$;\n      const position = row.getIsPinned();\n      if (!position) return -1;\n      const visiblePinnedRowIds = (_ref4 = position === 'top' ? table.getTopRows() : table.getBottomRows()) == null ? void 0 : _ref4.map(_ref5 => {\n        let {\n          id\n        } = _ref5;\n        return id;\n      });\n      return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;\n    };\n  },\n  createTable: table => {\n    table.setRowPinning = updater => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);\n    table.resetRowPinning = defaultState => {\n      var _table$initialState$r, _table$initialState;\n      return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());\n    };\n    table.getIsSomeRowsPinned = position => {\n      var _pinningState$positio;\n      const pinningState = table.getState().rowPinning;\n      if (!position) {\n        var _pinningState$top, _pinningState$bottom;\n        return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));\n      }\n      return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n    };\n    table._getPinnedRows = (visibleRows, pinnedRowIds, position) => {\n      var _table$options$keepPi;\n      const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ?\n      //get all rows that are pinned even if they would not be otherwise visible\n      //account for expanded parent rows, but not pagination or filtering\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => {\n        const row = table.getRow(rowId, true);\n        return row.getIsAllParentsExpanded() ? row : null;\n      }) :\n      //else get only visible rows that are pinned\n      (pinnedRowIds != null ? pinnedRowIds : []).map(rowId => visibleRows.find(row => row.id === rowId));\n      return rows.filter(Boolean).map(d => ({\n        ...d,\n        position\n      }));\n    };\n    table.getTopRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top], (allRows, topPinnedRowIds) => table._getPinnedRows(allRows, topPinnedRowIds, 'top'), getMemoOptions(table.options, 'debugRows', 'getTopRows'));\n    table.getBottomRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.bottom], (allRows, bottomPinnedRowIds) => table._getPinnedRows(allRows, bottomPinnedRowIds, 'bottom'), getMemoOptions(table.options, 'debugRows', 'getBottomRows'));\n    table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {\n      const topAndBottom = new Set([...(top != null ? top : []), ...(bottom != null ? bottom : [])]);\n      return allRows.filter(d => !topAndBottom.has(d.id));\n    }, getMemoOptions(table.options, 'debugRows', 'getCenterRows'));\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n  createTable: table => {\n    table.setRowSelection = updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);\n    table.resetRowSelection = defaultState => {\n      var _table$initialState$r;\n      return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n    };\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return;\n            }\n            rowSelection[row.id] = true;\n          });\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id];\n          });\n        }\n        return rowSelection;\n      });\n    };\n    table.toggleAllPageRowsSelected = value => table.setRowSelection(old => {\n      const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n      const rowSelection = {\n        ...old\n      };\n      table.getRowModel().rows.forEach(row => {\n        mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);\n      });\n      return rowSelection;\n    });\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel();\n    table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel'));\n    table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel'));\n    table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n      if (!Object.keys(rowSelection).length) {\n        return {\n          rows: [],\n          flatRows: [],\n          rowsById: {}\n        };\n      }\n      return selectRowsFn(table, rowModel);\n    }, getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel'));\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n      if (isAllRowsSelected) {\n        if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n          isAllRowsSelected = false;\n        }\n      }\n      return isAllRowsSelected;\n    };\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n      const {\n        rowSelection\n      } = table.getState();\n      let isAllPageRowsSelected = !!paginationFlatRows.length;\n      if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n        isAllPageRowsSelected = false;\n      }\n      return isAllPageRowsSelected;\n    };\n    table.getIsSomeRowsSelected = () => {\n      var _table$getState$rowSe;\n      const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n      return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n    };\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows;\n      return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n    };\n    table.getToggleAllRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllRowsSelected(e.target.checked);\n      };\n    };\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return e => {\n        table.toggleAllPageRowsSelected(e.target.checked);\n      };\n    };\n  },\n  createRow: (row, table) => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected();\n      table.setRowSelection(old => {\n        var _opts$selectChildren;\n        value = typeof value !== 'undefined' ? value : !isSelected;\n        if (row.getCanSelect() && isSelected === value) {\n          return old;\n        }\n        const selectedRowIds = {\n          ...old\n        };\n        mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);\n        return selectedRowIds;\n      });\n    };\n    row.getIsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isRowSelected(row, rowSelection);\n    };\n    row.getIsSomeSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'some';\n    };\n    row.getIsAllSubRowsSelected = () => {\n      const {\n        rowSelection\n      } = table.getState();\n      return isSubRowSelected(row, rowSelection) === 'all';\n    };\n    row.getCanSelect = () => {\n      var _table$options$enable;\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row);\n      }\n      return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n    };\n    row.getCanSelectSubRows = () => {\n      var _table$options$enable2;\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row);\n      }\n      return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n    };\n    row.getCanMultiSelect = () => {\n      var _table$options$enable3;\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row);\n      }\n      return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n    };\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect();\n      return e => {\n        var _target;\n        if (!canSelect) return;\n        row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n      };\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {\n  var _row$subRows;\n  const row = table.getRow(id, true);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  var _row$subRows3;\n  if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false;\n  let allChildrenSelected = true;\n  let someSelected = false;\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return;\n    }\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection);\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true;\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true;\n        allChildrenSelected = false;\n      } else {\n        allChildrenSelected = false;\n      }\n    }\n  });\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst RowSorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n      let isString = false;\n      for (const row of firstRows) {\n        const value = row == null ? void 0 : row.getValue(column.id);\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime;\n        }\n        if (typeof value === 'string') {\n          isString = true;\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric;\n          }\n        }\n      }\n      if (isString) {\n        return sortingFns.text;\n      }\n      return sortingFns.basic;\n    };\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0];\n      const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n      if (typeof value === 'string') {\n        return 'asc';\n      }\n      return 'desc';\n    };\n    column.getSortingFn = () => {\n      var _table$options$sortin, _table$options$sortin2;\n      if (!column) {\n        throw new Error();\n      }\n      return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n    };\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder();\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n        const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n        let newSorting = [];\n\n        // What should we do with this sort action?\n        let sortAction;\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n        // Multi-mode\n        if (old != null && old.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'add';\n          }\n        } else {\n          // Normal mode\n          if (old != null && old.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace';\n          } else if (existingSorting) {\n            sortAction = 'toggle';\n          } else {\n            sortAction = 'replace';\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove';\n            }\n          }\n        }\n        if (sortAction === 'add') {\n          var _table$options$maxMul;\n          newSorting = [...old, {\n            id: column.id,\n            desc: nextDesc\n          }];\n          // Take latest n columns\n          newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc\n              };\n            }\n            return d;\n          });\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id);\n        } else {\n          newSorting = [{\n            id: column.id,\n            desc: nextDesc\n          }];\n        }\n        return newSorting;\n      });\n    };\n    column.getFirstSortDir = () => {\n      var _ref, _column$columnDef$sor;\n      const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n      return sortDescFirst ? 'desc' : 'asc';\n    };\n    column.getNextSortingOrder = multi => {\n      var _table$options$enable, _table$options$enable2;\n      const firstSortDirection = column.getFirstSortDir();\n      const isSorted = column.getIsSorted();\n      if (!isSorted) {\n        return firstSortDirection;\n      }\n      if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n      // If enableSortRemove, enable in general\n      multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false;\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc';\n    };\n    column.getCanSort = () => {\n      var _column$columnDef$ena, _table$options$enable3;\n      return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n    };\n    column.getCanMultiSort = () => {\n      var _ref2, _column$columnDef$ena2;\n      return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n    };\n    column.getIsSorted = () => {\n      var _table$getState$sorti;\n      const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n    };\n    column.getSortIndex = () => {\n      var _table$getState$sorti2, _table$getState$sorti3;\n      return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n    };\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n    };\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort();\n      return e => {\n        if (!canSort) return;\n        e.persist == null || e.persist();\n        column.toggleSorting == null || column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n      };\n    };\n  },\n  createTable: table => {\n    table.setSorting = updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);\n    table.resetSorting = defaultState => {\n      var _table$initialState$s, _table$initialState;\n      table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n    };\n    table.getPreSortedRowModel = () => table.getGroupedRowModel();\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table);\n      }\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel();\n      }\n      return table._getSortedRowModel();\n    };\n  }\n};\n\nconst builtInFeatures = [Headers, ColumnVisibility, ColumnOrdering, ColumnPinning, ColumnFaceting, ColumnFiltering, GlobalFaceting,\n//depends on ColumnFaceting\nGlobalFiltering,\n//depends on ColumnFiltering\nRowSorting, ColumnGrouping,\n//depends on RowSorting\nRowExpanding, RowPagination, RowPinning, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$_features, _options$initialState;\n  if (process.env.NODE_ENV !== 'production' && (options.debugAll || options.debugTable)) {\n    console.info('Creating Table Instance...');\n  }\n  const _features = [...builtInFeatures, ...((_options$_features = options._features) != null ? _options$_features : [])];\n  let table = {\n    _features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null || table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id, searchAll) => {\n      let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[id];\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id];\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`);\n          }\n          throw new Error();\n        }\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, getMemoOptions(options, 'debugColumns', 'getAllColumns')),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index];\n    feature == null || feature.createTable == null || feature.createTable(table);\n  }\n  return table;\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel'));\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return undefined;\n    const uniqueValues = facetedRowModel.flatRows.flatMap(flatRow => {\n      var _flatRow$getUniqueVal;\n      return (_flatRow$getUniqueVal = flatRow.getUniqueValues(columnId)) != null ? _flatRow$getUniqueVal : [];\n    }).map(Number).filter(value => !Number.isNaN(value));\n    if (!uniqueValues.length) return;\n    let facetedMinValue = uniqueValues[0];\n    let facetedMaxValue = uniqueValues[uniqueValues.length - 1];\n    for (const value of uniqueValues) {\n      if (value < facetedMinValue) facetedMinValue = value;else if (value > facetedMaxValue) facetedMaxValue = value;\n    }\n    return [facetedMinValue, facetedMaxValue];\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues'));\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredFlatRows.push(row);\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel'));\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, getMemoOptions(table.options, 'debugTable', `getFacetedUniqueValues_${columnId}`));\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = (columnFilters != null ? columnFilters : []).map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () => table._autoResetPageIndex()));\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      rowModel.rows.forEach(row => {\n        row.depth = 0;\n        row.parentId = undefined;\n      });\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Perform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n        subRows.forEach(subRow => {\n          subRow.parentId = id;\n        });\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n    table._queue(() => {\n      table._autoResetExpanded();\n      table._autoResetPageIndex();\n    });\n  }));\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel'));\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.map(row => ({\n        ...row\n      }));\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const sortUndefined = columnInfo.sortUndefined;\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          let sortInt = 0;\n\n          // All sorting ints should always return in ascending order\n          if (sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = aValue === undefined;\n            const bUndefined = bValue === undefined;\n            if (aUndefined || bUndefined) {\n              if (sortUndefined === 'first') return aUndefined ? -1 : 1;\n              if (sortUndefined === 'last') return aUndefined ? 1 : -1;\n              sortInt = aUndefined && bUndefined ? 0 : aUndefined ? sortUndefined : -sortUndefined;\n            }\n          }\n          if (sortInt === 0) {\n            sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          }\n\n          // If sorting is non-zero, take care of desc and inversion\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () => table._autoResetPageIndex()));\n}\n\nexport { ColumnFaceting, ColumnFiltering, ColumnGrouping, ColumnOrdering, ColumnPinning, ColumnSizing, ColumnVisibility, GlobalFaceting, GlobalFiltering, Headers, RowExpanding, RowPagination, RowPinning, RowSelection, RowSorting, _getVisibleLeafColumns, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getMemoOptions, getPaginationRowModel, getSortedRowModel, isFunction, isNumberArray, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.mjs.map\n","/**\n   * react-table\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   */\nimport * as React from 'react';\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nfunction flexRender(Comp, props) {\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;\n}\nfunction isReactComponent(component) {\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n}\nfunction isClassComponent(component) {\n  return typeof component === 'function' && (() => {\n    const proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  })();\n}\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\nfunction useReactTable(options) {\n  // Compose in the generic options to the user options\n  const resolvedOptions = {\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    ...options\n  };\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable(resolvedOptions)\n  }));\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState);\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater);\n      options.onStateChange == null || options.onStateChange(updater);\n    }\n  }));\n  return tableRef.current;\n}\n\nexport { flexRender, useReactTable };\n//# sourceMappingURL=index.mjs.map\n"],"x_google_ignoreList":[0,1],"mappings":"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"}