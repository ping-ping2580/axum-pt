import { __toESM } from "./chunk-51aI8Tpl.js";
import { require_react } from "./react-DN4s_Om_.js";

//#region node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_immer@9.0.21_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/vanilla/shallow.mjs
const isIterable = (obj) => Symbol.iterator in obj;
const hasIterableEntries = (value) => "entries" in value;
const compareEntries = (valueA, valueB) => {
	const mapA = valueA instanceof Map ? valueA : new Map(valueA.entries());
	const mapB = valueB instanceof Map ? valueB : new Map(valueB.entries());
	if (mapA.size !== mapB.size) return false;
	for (const [key, value] of mapA) if (!Object.is(value, mapB.get(key))) return false;
	return true;
};
const compareIterables = (valueA, valueB) => {
	const iteratorA = valueA[Symbol.iterator]();
	const iteratorB = valueB[Symbol.iterator]();
	let nextA = iteratorA.next();
	let nextB = iteratorB.next();
	while (!nextA.done && !nextB.done) {
		if (!Object.is(nextA.value, nextB.value)) return false;
		nextA = iteratorA.next();
		nextB = iteratorB.next();
	}
	return !!nextA.done && !!nextB.done;
};
function shallow(valueA, valueB) {
	if (Object.is(valueA, valueB)) return true;
	if (typeof valueA !== "object" || valueA === null || typeof valueB !== "object" || valueB === null) return false;
	if (Object.getPrototypeOf(valueA) !== Object.getPrototypeOf(valueB)) return false;
	if (isIterable(valueA) && isIterable(valueB)) {
		if (hasIterableEntries(valueA) && hasIterableEntries(valueB)) return compareEntries(valueA, valueB);
		return compareIterables(valueA, valueB);
	}
	return compareEntries({ entries: () => Object.entries(valueA) }, { entries: () => Object.entries(valueB) });
}

//#endregion
//#region node_modules/.pnpm/zustand@5.0.5_@types+react@19.1.6_immer@9.0.21_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/react/shallow.mjs
var import_react = __toESM(require_react(), 1);
function useShallow(selector) {
	const prev = import_react.default.useRef(void 0);
	return (state) => {
		const next = selector(state);
		return shallow(prev.current, next) ? prev.current : prev.current = next;
	};
}

//#endregion
export { shallow, useShallow };
//# sourceMappingURL=zustand_shallow.js.map