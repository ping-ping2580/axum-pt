import { __commonJS, __toESM } from "./chunk-51aI8Tpl.js";
import { require_react } from "./react-DN4s_Om_.js";
import { require_dayjs_min } from "./dayjs.min-Bae1kzc1.js";
import { require_jsx_runtime } from "./jsx-runtime-IyzZn-RK.js";
import { AccordionChevron, ActionIcon, Box, CheckIcon, CloseButton, Input, InputBase, Modal, Popover, ScrollArea, SimpleGrid, UnstyledButton, clsx_default, createSafeContext, createVarsResolver, factory, getFontSize, getRadius, getSize, getSpacing, useInputProps, useMantineTheme, useProps, useResolvedStylesApi, useStyles } from "./esm-CVXcWmma.js";
import { clamp, useClickOutside, useDidUpdate, useDisclosure, useId, useMergedRef, useUncontrolled } from "./esm-B4SPqT69.js";
import "./react-dom-BighsA4B.js";

//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/utils/get-formatted-date/get-formatted-date.mjs
var import_dayjs_min$46 = __toESM(require_dayjs_min(), 1);
function defaultDateFormatter({ type, date, locale, format, labelSeparator }) {
	const formatDate = (value) => (0, import_dayjs_min$46.default)(value).locale(locale).format(format);
	if (type === "default") return date === null ? "" : formatDate(date);
	if (type === "multiple") return date.map(formatDate).join(", ");
	if (type === "range" && Array.isArray(date)) {
		if (date[0] && date[1]) return `${formatDate(date[0])} ${labelSeparator} ${formatDate(date[1])}`;
		if (date[0]) return `${formatDate(date[0])} ${labelSeparator} `;
		return "";
	}
	return "";
}
function getFormattedDate({ formatter,...others }) {
	return (formatter || defaultDateFormatter)(others);
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/utils/handle-control-key-down/handle-control-key-down.mjs
function getNextIndex({ direction, levelIndex, rowIndex, cellIndex, size }) {
	switch (direction) {
		case "up":
			if (levelIndex === 0 && rowIndex === 0) return null;
			if (rowIndex === 0) return {
				levelIndex: levelIndex - 1,
				rowIndex: cellIndex <= size[levelIndex - 1][size[levelIndex - 1].length - 1] - 1 ? size[levelIndex - 1].length - 1 : size[levelIndex - 1].length - 2,
				cellIndex
			};
			return {
				levelIndex,
				rowIndex: rowIndex - 1,
				cellIndex
			};
		case "down":
			if (rowIndex === size[levelIndex].length - 1) return {
				levelIndex: levelIndex + 1,
				rowIndex: 0,
				cellIndex
			};
			if (rowIndex === size[levelIndex].length - 2 && cellIndex >= size[levelIndex][size[levelIndex].length - 1]) return {
				levelIndex: levelIndex + 1,
				rowIndex: 0,
				cellIndex
			};
			return {
				levelIndex,
				rowIndex: rowIndex + 1,
				cellIndex
			};
		case "left":
			if (levelIndex === 0 && rowIndex === 0 && cellIndex === 0) return null;
			if (rowIndex === 0 && cellIndex === 0) return {
				levelIndex: levelIndex - 1,
				rowIndex: size[levelIndex - 1].length - 1,
				cellIndex: size[levelIndex - 1][size[levelIndex - 1].length - 1] - 1
			};
			if (cellIndex === 0) return {
				levelIndex,
				rowIndex: rowIndex - 1,
				cellIndex: size[levelIndex][rowIndex - 1] - 1
			};
			return {
				levelIndex,
				rowIndex,
				cellIndex: cellIndex - 1
			};
		case "right":
			if (rowIndex === size[levelIndex].length - 1 && cellIndex === size[levelIndex][rowIndex] - 1) return {
				levelIndex: levelIndex + 1,
				rowIndex: 0,
				cellIndex: 0
			};
			if (cellIndex === size[levelIndex][rowIndex] - 1) return {
				levelIndex,
				rowIndex: rowIndex + 1,
				cellIndex: 0
			};
			return {
				levelIndex,
				rowIndex,
				cellIndex: cellIndex + 1
			};
		default: return {
			levelIndex,
			rowIndex,
			cellIndex
		};
	}
}
function focusOnNextFocusableControl({ controlsRef, direction, levelIndex, rowIndex, cellIndex, size }) {
	const nextIndex = getNextIndex({
		direction,
		size,
		rowIndex,
		cellIndex,
		levelIndex
	});
	if (!nextIndex) return;
	const controlToFocus = controlsRef.current?.[nextIndex.levelIndex]?.[nextIndex.rowIndex]?.[nextIndex.cellIndex];
	if (!controlToFocus) return;
	if (controlToFocus.disabled || controlToFocus.getAttribute("data-hidden") || controlToFocus.getAttribute("data-outside")) focusOnNextFocusableControl({
		controlsRef,
		direction,
		levelIndex: nextIndex.levelIndex,
		cellIndex: nextIndex.cellIndex,
		rowIndex: nextIndex.rowIndex,
		size
	});
	else controlToFocus.focus();
}
function getDirection(key) {
	switch (key) {
		case "ArrowDown": return "down";
		case "ArrowUp": return "up";
		case "ArrowRight": return "right";
		case "ArrowLeft": return "left";
		default: return null;
	}
}
function getControlsSize(controlsRef) {
	return controlsRef.current?.map((column) => column.map((row) => row.length));
}
function handleControlKeyDown({ controlsRef, levelIndex, rowIndex, cellIndex, event }) {
	const direction = getDirection(event.key);
	if (direction) {
		event.preventDefault();
		const size = getControlsSize(controlsRef);
		focusOnNextFocusableControl({
			controlsRef,
			direction,
			levelIndex,
			rowIndex,
			cellIndex,
			size
		});
	}
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/utils/assign-time/assign-time.mjs
var import_dayjs_min$45 = __toESM(require_dayjs_min(), 1);
function assignTime(dateValue, timeString) {
	let date = dateValue ? (0, import_dayjs_min$45.default)(dateValue) : (0, import_dayjs_min$45.default)();
	if (timeString === "") return date.format("YYYY-MM-DD HH:mm:ss");
	const [hours, minutes, seconds = 0] = timeString.split(":").map(Number);
	date = date.set("hour", hours);
	date = date.set("minute", minutes);
	date = date.set("second", seconds);
	date = date.set("millisecond", 0);
	return date.format("YYYY-MM-DD HH:mm:ss");
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/utils/to-date-string/to-date-string.mjs
var import_dayjs_min$44 = __toESM(require_dayjs_min(), 1);
function toDateString(value) {
	return value == null || value === "" ? value : (0, import_dayjs_min$44.default)(value).format("YYYY-MM-DD");
}
function toDateTimeString(value) {
	return value == null || value === "" ? value : (0, import_dayjs_min$44.default)(value).format("YYYY-MM-DD HH:mm:ss");
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/utils/get-default-clamped-date/get-default-clamped-date.mjs
var import_dayjs_min$43 = __toESM(require_dayjs_min(), 1);
function getDefaultClampedDate({ minDate, maxDate }) {
	const today = (0, import_dayjs_min$43.default)();
	if (!minDate && !maxDate) return toDateString(today);
	if (minDate && (0, import_dayjs_min$43.default)(today).isBefore(minDate)) return toDateString(minDate);
	if (maxDate && (0, import_dayjs_min$43.default)(today).isAfter(maxDate)) return toDateString(maxDate);
	return toDateString(today);
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/utils/clamp-date/clamp-date.mjs
var import_dayjs_min$42 = __toESM(require_dayjs_min(), 1);
function clampDate(minDate, maxDate, date) {
	if (!minDate && !maxDate) return toDateTimeString(date);
	if (minDate && (0, import_dayjs_min$42.default)(date).isBefore(minDate)) return toDateTimeString(minDate);
	if (maxDate && (0, import_dayjs_min$42.default)(date).isAfter(maxDate)) return toDateTimeString(maxDate);
	return toDateTimeString(date);
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DatesProvider/DatesProvider.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
const DATES_PROVIDER_DEFAULT_SETTINGS = {
	locale: "en",
	firstDayOfWeek: 1,
	weekendDays: [0, 6],
	labelSeparator: "â€“",
	consistentWeeks: false
};
const DatesProviderContext = (0, import_react.createContext)(DATES_PROVIDER_DEFAULT_SETTINGS);
function DatesProvider({ settings, children }) {
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DatesProviderContext.Provider, {
		value: {
			...DATES_PROVIDER_DEFAULT_SETTINGS,
			...settings
		},
		children
	});
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DatesProvider/use-dates-context.mjs
function useDatesContext() {
	const ctx = (0, import_react.useContext)(DatesProviderContext);
	const getLocale = (0, import_react.useCallback)((input) => input || ctx.locale, [ctx.locale]);
	const getFirstDayOfWeek = (0, import_react.useCallback)((input) => typeof input === "number" ? input : ctx.firstDayOfWeek, [ctx.firstDayOfWeek]);
	const getWeekendDays = (0, import_react.useCallback)((input) => Array.isArray(input) ? input : ctx.weekendDays, [ctx.weekendDays]);
	const getLabelSeparator = (0, import_react.useCallback)((input) => typeof input === "string" ? input : ctx.labelSeparator, [ctx.labelSeparator]);
	return {
		...ctx,
		getLocale,
		getFirstDayOfWeek,
		getWeekendDays,
		getLabelSeparator
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/HiddenDatesInput/HiddenDatesInput.mjs
var import_dayjs_min$41 = __toESM(require_dayjs_min(), 1);
function formatValue({ value, type, withTime }) {
	const formatter = withTime ? toDateTimeString : toDateString;
	if (type === "range" && Array.isArray(value)) {
		const startDate = formatter(value[0]);
		const endDate = formatter(value[1]);
		if (!startDate) return "";
		if (!endDate) return `${startDate} \u2013`;
		return `${startDate} \u2013 ${endDate}`;
	}
	if (type === "multiple" && Array.isArray(value)) return value.filter(Boolean).join(", ");
	if (!Array.isArray(value) && value) return formatter(value);
	return "";
}
function HiddenDatesInput({ value, type, name, form, withTime = false }) {
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
		type: "hidden",
		value: formatValue({
			value,
			type,
			withTime
		}),
		name,
		form
	});
}
HiddenDatesInput.displayName = "@mantine/dates/HiddenDatesInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeInput/TimeInput.module.css.mjs
var classes$12 = { "input": "m_468e7eda" };

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeInput/TimeInput.mjs
const defaultProps$26 = {};
const TimeInput = factory((_props, ref) => {
	const props = useProps("TimeInput", defaultProps$26, _props);
	const { classNames, styles, unstyled, vars, withSeconds, minTime, maxTime, value, onChange, step,...others } = props;
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const checkIfTimeLimitExceeded = (val) => {
		if (minTime !== void 0 || maxTime !== void 0) {
			const [hours, minutes, seconds] = val.split(":").map(Number);
			if (minTime) {
				const [minHours, minMinutes, minSeconds] = minTime.split(":").map(Number);
				if (hours < minHours || hours === minHours && minutes < minMinutes || withSeconds && hours === minHours && minutes === minMinutes && seconds < minSeconds) return -1;
			}
			if (maxTime) {
				const [maxHours, maxMinutes, maxSeconds] = maxTime.split(":").map(Number);
				if (hours > maxHours || hours === maxHours && minutes > maxMinutes || withSeconds && hours === maxHours && minutes === maxMinutes && seconds > maxSeconds) return 1;
			}
		}
		return 0;
	};
	const onTimeBlur = (event) => {
		props.onBlur?.(event);
		if (minTime !== void 0 || maxTime !== void 0) {
			const val = event.currentTarget.value;
			if (val) {
				const check = checkIfTimeLimitExceeded(val);
				if (check === 1) {
					event.currentTarget.value = maxTime;
					props.onChange?.(event);
				} else if (check === -1) {
					event.currentTarget.value = minTime;
					props.onChange?.(event);
				}
			}
		}
	};
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(InputBase, {
		classNames: {
			...resolvedClassNames,
			input: clsx_default(classes$12.input, resolvedClassNames?.input)
		},
		styles: resolvedStyles,
		unstyled,
		ref,
		value,
		step: step ?? (withSeconds ? 1 : 60),
		...others,
		onChange,
		onBlur: onTimeBlur,
		type: "time",
		__staticSelector: "TimeInput"
	});
});
TimeInput.classes = InputBase.classes;
TimeInput.displayName = "@mantine/dates/TimeInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/pad-time/pad-time.mjs
function padTime(value) {
	return value < 10 ? `0${value}` : `${value}`;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/SpinInput/SpinInput.mjs
const getMaxDigit = (max) => Number(max.toFixed(0)[0]);
const SpinInput = (0, import_react.forwardRef)(({ value, min, max, onChange, focusable, step, onNextInput, onPreviousInput, onFocus, readOnly,...others }, ref) => {
	const maxDigit = getMaxDigit(max);
	const arrowsMax = max + 1 - step;
	const handleChange = (value2) => {
		if (readOnly) return;
		const clearValue = value2.replace(/\D/g, "");
		if (clearValue !== "") {
			const parsedValue = clamp(parseInt(clearValue, 10), min, max);
			onChange(parsedValue);
			if (parsedValue > maxDigit || value2.startsWith("00")) onNextInput?.();
		}
	};
	const handleKeyDown = (event) => {
		if (readOnly) return;
		if (event.key === "0" || event.key === "Num0") {
			if (value === 0) {
				event.preventDefault();
				onNextInput?.();
			}
		}
		if (event.key === "Home") {
			event.preventDefault();
			onChange(min);
		}
		if (event.key === "End") {
			event.preventDefault();
			onChange(max);
		}
		if (event.key === "Backspace" || event.key === "Delete") {
			event.preventDefault();
			if (value !== null) onChange(null);
			else onPreviousInput?.();
		}
		if (event.key === "ArrowRight") {
			event.preventDefault();
			onNextInput?.();
		}
		if (event.key === "ArrowLeft") {
			event.preventDefault();
			onPreviousInput?.();
		}
		if (event.key === "ArrowUp") {
			event.preventDefault();
			const newValue = value === null ? min : clamp(value + step, min, arrowsMax);
			onChange(newValue);
		}
		if (event.key === "ArrowDown") {
			event.preventDefault();
			const newValue = value === null ? arrowsMax : clamp(value - step, min, arrowsMax);
			onChange(newValue);
		}
	};
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
		ref,
		type: "text",
		role: "spinbutton",
		"aria-valuemin": min,
		"aria-valuemax": max,
		"aria-valuenow": value === null ? 0 : value,
		"data-empty": value === null || void 0,
		inputMode: "numeric",
		placeholder: "--",
		value: value === null ? "" : padTime(value),
		onChange: (event) => handleChange(event.currentTarget.value),
		onKeyDown: handleKeyDown,
		onFocus: (event) => {
			event.currentTarget.select();
			onFocus?.(event);
		},
		onClick: (event) => {
			event.stopPropagation();
			event.currentTarget.select();
		},
		onMouseDown: (event) => event.stopPropagation(),
		...others
	});
});
SpinInput.displayName = "@mantine/dates/SpinInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimePicker.context.mjs
const [TimePickerProvider, useTimePickerContext] = createSafeContext("TimeInput component was not found in the component tree");

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/AmPmInput/AmPmInput.mjs
const AmPmInput = (0, import_react.forwardRef)(({ labels, value, onChange, className, style, onPreviousInput, readOnly, onMouseDown, onTouchStart, inputType,...others }, ref) => {
	const ctx = useTimePickerContext();
	const handleKeyDown = (event) => {
		if (readOnly) return;
		if (event.key === "Home") {
			event.preventDefault();
			onChange(labels.am);
		}
		if (event.key === "End") {
			event.preventDefault();
			onChange(labels.pm);
		}
		if (event.key === "Backspace" || event.key === "Delete") {
			event.preventDefault();
			if (value === null) onPreviousInput?.();
			else onChange(null);
		}
		if (event.key === "ArrowLeft") {
			event.preventDefault();
			onPreviousInput?.();
		}
		if (event.key === "ArrowUp" || event.key === "ArrowDown") {
			event.preventDefault();
			onChange(value === labels.am ? labels.pm : labels.am);
		}
		if (event.code === "KeyA") {
			event.preventDefault();
			onChange(labels.am);
		}
		if (event.code === "KeyP") {
			event.preventDefault();
			onChange(labels.pm);
		}
	};
	if (inputType === "input") return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
		...ctx.getStyles("field", {
			className,
			style
		}),
		ref,
		value: value || "--",
		onChange: (event) => !readOnly && onChange(event.target.value || null),
		onClick: (event) => event.stopPropagation(),
		onKeyDown: handleKeyDown,
		onMouseDown: (event) => {
			event.stopPropagation();
			onMouseDown?.(event);
		},
		"data-am-pm": true,
		...others
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", {
		...ctx.getStyles("field", {
			className,
			style
		}),
		ref,
		value: value || "",
		onChange: (event) => !readOnly && onChange(event.target.value || null),
		onClick: (event) => event.stopPropagation(),
		onKeyDown: handleKeyDown,
		onMouseDown: (event) => {
			event.stopPropagation();
			onMouseDown?.(event);
		},
		"data-am-pm": true,
		...others,
		children: [
			/* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
				value: "",
				children: "--"
			}),
			/* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
				value: labels.am,
				children: labels.am
			}),
			/* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {
				value: labels.pm,
				children: labels.pm
			})
		]
	});
});
AmPmInput.displayName = "@mantine/dates/AmPmInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimeControlsList/TimeControl.mjs
function TimeControl({ value, active, onSelect }) {
	const ctx = useTimePickerContext();
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
		mod: { active },
		onClick: () => onSelect(value),
		onMouseDown: (event) => event.preventDefault(),
		"data-value": value,
		tabIndex: -1,
		...ctx.getStyles("control"),
		children: typeof value === "number" ? padTime(value) : value
	});
}
TimeControl.displayName = "@mantine/dates/TimeControl";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimeControlsList/AmPmControlsList.mjs
function AmPmControlsList({ labels, value, onSelect }) {
	const ctx = useTimePickerContext();
	const controls = [labels.am, labels.pm].map((control) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeControl, {
		value: control,
		active: value === control,
		onSelect
	}, control));
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
		...ctx.getStyles("controlsList"),
		children: controls
	});
}
AmPmControlsList.displayName = "@mantine/dates/AmPmControlsList";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimeControlsList/TimeControlsList.mjs
function isElementVisibleInScrollContainer(element, container) {
	if (!element || !container) return false;
	const elementRect = element.getBoundingClientRect();
	const containerRect = container.getBoundingClientRect();
	const isVisible = elementRect.top >= containerRect.top && elementRect.bottom <= containerRect.bottom && elementRect.left >= containerRect.left && elementRect.right <= containerRect.right;
	return isVisible;
}
function getValuesRange(min, max, step) {
	const range = [];
	for (let i = min; i <= max; i += step) range.push(i);
	return range;
}
function TimeControlsList({ min, max, step, value, onSelect }) {
	const ctx = useTimePickerContext();
	const ref = (0, import_react.useRef)(null);
	const range = getValuesRange(min, max, step);
	const controls = range.map((control) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeControl, {
		value: control,
		active: value === control,
		onSelect
	}, control));
	(0, import_react.useEffect)(() => {
		if (value !== null) {
			const target = ref.current?.querySelector(`[data-value="${value}"]`);
			if (!isElementVisibleInScrollContainer(target, ref.current)) target?.scrollIntoView({ block: "nearest" });
		}
	}, [value]);
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ScrollArea, {
		h: ctx.maxDropdownContentHeight,
		type: "never",
		viewportRef: ref,
		...ctx.getStyles("scrollarea"),
		...ctx.scrollAreaProps,
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
			...ctx.getStyles("controlsList"),
			children: controls
		})
	});
}
TimeControlsList.displayName = "@mantine/dates/TimeControlsList";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/split-time-string/split-time-string.mjs
function splitTimeString(timeString) {
	const [hours = null, minutes = null, seconds = null] = timeString.split(":").map(Number);
	return {
		hours,
		minutes,
		seconds
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/is-same-time/is-same-time.mjs
function isSameTime({ time, compare, withSeconds }) {
	const timeParts = splitTimeString(time);
	const compareParts = splitTimeString(compare);
	if (withSeconds) return timeParts.hours === compareParts.hours && timeParts.minutes === compareParts.minutes && timeParts.seconds === compareParts.seconds;
	return timeParts.hours === compareParts.hours && timeParts.minutes === compareParts.minutes;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeValue/get-formatted-time/get-formatted-time.mjs
function getTimeFromDate(date, withSeconds) {
	return `${date.getHours()}:${date.getMinutes()}${withSeconds ? `:${date.getSeconds()}` : ""}`;
}
function getFormattedTime({ value, format, amPmLabels, withSeconds }) {
	const splitted = splitTimeString(typeof value === "string" ? value : getTimeFromDate(value, withSeconds));
	if (splitted.hours === null || splitted.minutes === null) return null;
	if (format === "24h") return `${padTime(splitted.hours)}:${padTime(splitted.minutes)}${withSeconds ? `:${padTime(splitted.seconds || 0)}` : ""}`;
	const isPm = splitted.hours >= 12;
	const hours = splitted.hours % 12 === 0 ? 12 : splitted.hours % 12;
	return `${hours}:${padTime(splitted.minutes)}${withSeconds ? `:${padTime(splitted.seconds || 0)}` : ""} ${isPm ? amPmLabels.pm : amPmLabels.am}`;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeValue/TimeValue.mjs
function TimeValue({ value, format = "24h", amPmLabels = {
	am: "AM",
	pm: "PM"
}, withSeconds = false }) {
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: getFormattedTime({
		value,
		format,
		amPmLabels,
		withSeconds
	}) });
}
TimeValue.displayName = "@mantine/dates/TimeValue";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimePresets/TimePresetControl.mjs
function TimePresetControl({ value, active, onChange, format, amPmLabels, withSeconds }) {
	const ctx = useTimePickerContext();
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
		mod: { active },
		onClick: () => onChange(value),
		...ctx.getStyles("presetControl"),
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeValue, {
			withSeconds,
			value,
			format,
			amPmLabels
		})
	});
}
TimePresetControl.displayName = "@mantine/dates/TimePresetControl";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimePresets/TimePresetGroup.mjs
function TimePresetGroup({ value, data, onChange, format, amPmLabels, withSeconds }) {
	const ctx = useTimePickerContext();
	const items = data.values.map((item) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimePresetControl, {
		value: item,
		format,
		amPmLabels,
		withSeconds,
		active: isSameTime({
			time: item,
			compare: value,
			withSeconds
		}),
		onChange
	}, item));
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
		...ctx.getStyles("presetsGroup"),
		children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
			...ctx.getStyles("presetsGroupLabel"),
			children: data.label
		}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SimpleGrid, {
			cols: withSeconds ? 2 : 3,
			spacing: 4,
			children: items
		})]
	});
}
TimePresetGroup.displayName = "@mantine/dates/TimePresetGroup";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimePresets/TimePresets.mjs
function TimePresets({ presets, format, amPmLabels, withSeconds, value, onChange }) {
	const ctx = useTimePickerContext();
	if (presets.length === 0) return null;
	if (typeof presets[0] === "string") {
		const items = presets.map((item) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimePresetControl, {
			value: item,
			format,
			amPmLabels,
			withSeconds,
			active: isSameTime({
				time: item,
				compare: value,
				withSeconds
			}),
			onChange
		}, item));
		return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ScrollArea.Autosize, {
			mah: ctx.maxDropdownContentHeight,
			type: "never",
			...ctx.getStyles("scrollarea"),
			...ctx.scrollAreaProps,
			children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
				...ctx.getStyles("presetsRoot"),
				children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SimpleGrid, {
					cols: withSeconds ? 2 : 3,
					spacing: 4,
					children: items
				})
			})
		});
	}
	const groups = presets.map((group, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimePresetGroup, {
		data: group,
		value,
		format,
		amPmLabels,
		withSeconds,
		onChange
	}, index));
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ScrollArea.Autosize, {
		mah: ctx.maxDropdownContentHeight,
		type: "never",
		...ctx.getStyles("scrollarea"),
		...ctx.scrollAreaProps,
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
			...ctx.getStyles("presetsRoot"),
			children: groups
		})
	});
}
TimePresets.displayName = "@mantine/dates/TimePresets";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/time-to-seconds/time-to-seconds.mjs
function timeToSeconds(timeStr) {
	const [hours = 0, minutes = 0, seconds = 0] = timeStr.split(":").map(Number);
	return hours * 3600 + minutes * 60 + seconds;
}
function secondsToTime(seconds) {
	const hours = Math.floor(seconds / 3600);
	const minutes = Math.floor(seconds % 3600 / 60);
	const secs = seconds % 60;
	return {
		timeString: `${padTime(hours)}:${padTime(minutes)}:${padTime(secs)}`,
		hours,
		minutes,
		seconds: secs
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/clamp-time/clamp-time.mjs
function clampTime(time, min, max) {
	const timeInSeconds = timeToSeconds(time);
	const minInSeconds = timeToSeconds(min);
	const maxInSeconds = timeToSeconds(max);
	const clampedSeconds = Math.max(minInSeconds, Math.min(timeInSeconds, maxInSeconds));
	return secondsToTime(clampedSeconds);
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/get-parsed-time/get-parsed-time.mjs
function convertTimeTo12HourFormat({ hours, minutes, seconds, amPmLabels }) {
	if (hours === null) return {
		hours: null,
		minutes: null,
		seconds: null,
		amPm: null
	};
	const amPm = hours >= 12 ? amPmLabels.pm : amPmLabels.am;
	const hour12 = hours % 12 === 0 ? 12 : hours % 12;
	return {
		hours: hour12,
		minutes: typeof minutes === "number" ? minutes : null,
		seconds: typeof seconds === "number" ? seconds : null,
		amPm
	};
}
function getParsedTime({ time, format, amPmLabels }) {
	if (time === "") return {
		hours: null,
		minutes: null,
		seconds: null,
		amPm: null
	};
	const { hours, minutes, seconds } = splitTimeString(time);
	const parsed = {
		hours,
		minutes,
		seconds
	};
	if (format === "12h") return convertTimeTo12HourFormat({
		...parsed,
		amPmLabels
	});
	return {
		...parsed,
		amPm: null
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/get-time-string/get-time-string.mjs
function convertTo24HourFormat({ hours, minutes, seconds, amPm, amPmLabels, withSeconds }) {
	let _hours = hours;
	if (amPm === amPmLabels.pm && hours !== 12) _hours += 12;
	else if (amPm === amPmLabels.am && hours === 12) _hours = 0;
	return `${padTime(_hours)}:${padTime(minutes)}${withSeconds ? `:${padTime(seconds || 0)}` : ""}`;
}
function getTimeString({ hours, minutes, seconds, format, withSeconds, amPm, amPmLabels }) {
	if (hours === null || minutes === null) return {
		valid: false,
		value: ""
	};
	if (withSeconds && seconds === null) return {
		valid: false,
		value: ""
	};
	if (format === "24h") {
		const value = `${padTime(hours)}:${padTime(minutes)}${withSeconds ? `:${padTime(seconds)}` : ""}`;
		return {
			valid: true,
			value
		};
	}
	if (amPm === null) return {
		valid: false,
		value: ""
	};
	return {
		valid: true,
		value: convertTo24HourFormat({
			hours,
			minutes,
			seconds,
			amPm,
			amPmLabels,
			withSeconds
		})
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/use-time-picker.mjs
function useTimePicker({ value, defaultValue, onChange, format, amPmLabels, withSeconds = false, min, max, clearable, readOnly, disabled, pasteSplit }) {
	const parsedTime = getParsedTime({
		time: value || defaultValue || "",
		amPmLabels,
		format
	});
	const acceptChange = (0, import_react.useRef)(true);
	const [hours, setHours] = (0, import_react.useState)(parsedTime.hours);
	const [minutes, setMinutes] = (0, import_react.useState)(parsedTime.minutes);
	const [seconds, setSeconds] = (0, import_react.useState)(parsedTime.seconds);
	const [amPm, setAmPm] = (0, import_react.useState)(parsedTime.amPm);
	const isClearable = clearable && !readOnly && !disabled && (hours !== null || minutes !== null || seconds !== null || amPm !== null);
	const hoursRef = (0, import_react.useRef)(null);
	const minutesRef = (0, import_react.useRef)(null);
	const secondsRef = (0, import_react.useRef)(null);
	const amPmRef = (0, import_react.useRef)(null);
	const focus = (field) => {
		if (field === "hours") hoursRef.current?.focus();
		if (field === "minutes") minutesRef.current?.focus();
		if (field === "seconds") secondsRef.current?.focus();
		if (field === "amPm") amPmRef.current?.focus();
	};
	const handleTimeChange = (field, val) => {
		const computedValue = {
			hours,
			minutes,
			seconds,
			amPm,
			[field]: val
		};
		const timeString = getTimeString({
			...computedValue,
			format,
			withSeconds,
			amPmLabels
		});
		if (timeString.valid) {
			acceptChange.current = false;
			const clamped = clampTime(timeString.value, min || "00:00:00", max || "23:59:59");
			const converted = format === "12h" ? convertTimeTo12HourFormat({
				hours: clamped.hours,
				minutes: clamped.minutes,
				seconds: clamped.seconds,
				amPmLabels
			}) : clamped;
			setHours(converted.hours);
			setMinutes(converted.minutes);
			setSeconds(converted.seconds);
			onChange?.(clamped.timeString);
		} else {
			acceptChange.current = false;
			if (typeof value === "string" && value !== "") onChange?.("");
		}
	};
	const setTimeString = (timeString) => {
		acceptChange.current = false;
		const parsedTime2 = getParsedTime({
			time: timeString,
			amPmLabels,
			format
		});
		setHours(parsedTime2.hours);
		setMinutes(parsedTime2.minutes);
		setSeconds(parsedTime2.seconds);
		setAmPm(parsedTime2.amPm);
		onChange?.(timeString);
	};
	const onHoursChange = (value2) => {
		setHours(value2);
		handleTimeChange("hours", value2);
		focus("hours");
	};
	const onMinutesChange = (value2) => {
		setMinutes(value2);
		handleTimeChange("minutes", value2);
		focus("minutes");
	};
	const onSecondsChange = (value2) => {
		setSeconds(value2);
		handleTimeChange("seconds", value2);
		focus("seconds");
	};
	const onAmPmChange = (value2) => {
		setAmPm(value2);
		handleTimeChange("amPm", value2);
		focus("amPm");
	};
	const clear = () => {
		acceptChange.current = false;
		setHours(null);
		setMinutes(null);
		setSeconds(null);
		setAmPm(null);
		onChange?.("");
		focus("hours");
	};
	const onPaste = (event) => {
		event.preventDefault();
		const pastedValue = event.clipboardData.getData("text");
		const parsedTime2 = (pasteSplit || getParsedTime)({
			time: pastedValue,
			format,
			amPmLabels
		});
		const timeString = getTimeString({
			...parsedTime2,
			format,
			withSeconds,
			amPmLabels
		});
		if (timeString.valid) {
			acceptChange.current = false;
			const clamped = clampTime(timeString.value, min || "00:00:00", max || "23:59:59");
			onChange?.(clamped.timeString);
			setHours(parsedTime2.hours);
			setMinutes(parsedTime2.minutes);
			setSeconds(parsedTime2.seconds);
			setAmPm(parsedTime2.amPm);
		}
	};
	const hiddenInputValue = getTimeString({
		hours,
		minutes,
		seconds,
		format,
		withSeconds,
		amPm,
		amPmLabels
	});
	(0, import_react.useEffect)(() => {
		if (value === "") {
			acceptChange.current = false;
			setHours(null);
			setMinutes(null);
			setSeconds(null);
			setAmPm(null);
			return;
		}
		if (acceptChange.current && typeof value === "string") {
			const parsedTime2 = getParsedTime({
				time: value || "",
				amPmLabels,
				format
			});
			setHours(parsedTime2.hours);
			setMinutes(parsedTime2.minutes);
			setSeconds(parsedTime2.seconds);
			setAmPm(parsedTime2.amPm);
		}
		acceptChange.current = true;
	}, [value]);
	return {
		refs: {
			hours: hoursRef,
			minutes: minutesRef,
			seconds: secondsRef,
			amPm: amPmRef
		},
		values: {
			hours,
			minutes,
			seconds,
			amPm
		},
		setHours: onHoursChange,
		setMinutes: onMinutesChange,
		setSeconds: onSecondsChange,
		setAmPm: onAmPmChange,
		focus,
		clear,
		onPaste,
		setTimeString,
		isClearable,
		hiddenInputValue: hiddenInputValue.value
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimePicker.module.css.mjs
var classes$11 = {
	"fieldsRoot": "m_7a8f1e6d",
	"fieldsGroup": "m_d6bb0a54",
	"controlsList": "m_b97ecb26",
	"controlsListGroup": "m_31fe42f9",
	"dropdown": "m_9c4817c3",
	"control": "m_154c536b",
	"presetControl": "m_7be09d0c",
	"presetsGroup": "m_7d00001d",
	"presetsGroupLabel": "m_d8d918d7",
	"field": "m_6b43ba88"
};

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/TimePicker.mjs
const defaultProps$25 = {
	hoursStep: 1,
	minutesStep: 1,
	secondsStep: 1,
	format: "24h",
	amPmLabels: {
		am: "AM",
		pm: "PM"
	},
	withDropdown: false,
	pasteSplit: getParsedTime,
	maxDropdownContentHeight: 200
};
const varsResolver$6 = createVarsResolver((_theme, { size }) => ({ dropdown: { "--control-font-size": getFontSize(size) } }));
const TimePicker = factory((_props, ref) => {
	const props = useProps("TimePicker", defaultProps$25, _props);
	const { classNames, className, style, styles, unstyled, vars, onClick, format, value, defaultValue, onChange, hoursStep, minutesStep, secondsStep, withSeconds, hoursInputLabel, minutesInputLabel, secondsInputLabel, amPmInputLabel, amPmLabels, clearable, onMouseDown, onFocusCapture, onBlurCapture, min, max, popoverProps, withDropdown, rightSection, onFocus, onBlur, clearButtonProps, hoursInputProps, minutesInputProps, secondsInputProps, amPmSelectProps, readOnly, disabled, size, name, form, hiddenInputProps, labelProps, pasteSplit, hoursRef, minutesRef, secondsRef, amPmRef, presets, maxDropdownContentHeight, scrollAreaProps,...others } = props;
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const getStyles = useStyles({
		name: "TimePicker",
		classes: classes$11,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		varsResolver: varsResolver$6
	});
	const controller = useTimePicker({
		value,
		defaultValue,
		onChange,
		format,
		amPmLabels,
		withSeconds,
		min,
		max,
		clearable,
		disabled,
		readOnly,
		pasteSplit
	});
	const _hoursRef = useMergedRef(controller.refs.hours, hoursRef);
	const _minutesRef = useMergedRef(controller.refs.minutes, minutesRef);
	const _secondsRef = useMergedRef(controller.refs.seconds, secondsRef);
	const _amPmRef = useMergedRef(controller.refs.amPm, amPmRef);
	const hoursInputId = useId();
	const hasFocusRef = (0, import_react.useRef)(false);
	const [dropdownOpened, setDropdownOpened] = (0, import_react.useState)(false);
	const handleFocus = (event) => {
		if (!hasFocusRef.current) {
			hasFocusRef.current = true;
			onFocus?.(event);
		}
	};
	const handleBlur = (event) => {
		if (!event.currentTarget.contains(event.relatedTarget)) {
			hasFocusRef.current = false;
			onBlur?.(event);
		}
	};
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimePickerProvider, {
		value: {
			getStyles,
			scrollAreaProps,
			maxDropdownContentHeight
		},
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Popover, {
			opened: withDropdown && !readOnly && dropdownOpened,
			transitionProps: { duration: 0 },
			position: "bottom-start",
			withRoles: false,
			...popoverProps,
			children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(Popover.Target, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(InputBase, {
				component: "div",
				size,
				disabled,
				ref,
				onClick: (event) => {
					onClick?.(event);
					controller.focus("hours");
				},
				onMouseDown: (event) => {
					event.preventDefault();
					onMouseDown?.(event);
				},
				onFocusCapture: (event) => {
					setDropdownOpened(true);
					onFocusCapture?.(event);
				},
				onBlurCapture: (event) => {
					setDropdownOpened(false);
					onBlurCapture?.(event);
				},
				rightSection: rightSection || controller.isClearable && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CloseButton, {
					...clearButtonProps,
					size,
					onClick: (event) => {
						controller.clear();
						clearButtonProps?.onClick?.(event);
					},
					onMouseDown: (event) => {
						event.preventDefault();
						clearButtonProps?.onMouseDown?.(event);
					}
				}),
				labelProps: {
					htmlFor: hoursInputId,
					...labelProps
				},
				style,
				className,
				classNames: resolvedClassNames,
				styles: resolvedStyles,
				__staticSelector: "TimePicker",
				...others,
				children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", {
					...getStyles("fieldsRoot"),
					dir: "ltr",
					children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
						...getStyles("fieldsGroup"),
						onBlur: handleBlur,
						children: [
							/* @__PURE__ */ (0, import_jsx_runtime.jsx)(SpinInput, {
								id: hoursInputId,
								...hoursInputProps,
								...getStyles("field", {
									className: hoursInputProps?.className,
									style: hoursInputProps?.style
								}),
								value: controller.values.hours,
								onChange: controller.setHours,
								onNextInput: () => controller.focus("minutes"),
								min: format === "12h" ? 1 : 0,
								max: format === "12h" ? 12 : 23,
								focusable: true,
								step: hoursStep,
								ref: _hoursRef,
								"aria-label": hoursInputLabel,
								readOnly,
								disabled,
								onPaste: controller.onPaste,
								onFocus: (event) => {
									handleFocus(event);
									hoursInputProps?.onFocus?.(event);
								}
							}),
							/* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { children: ":" }),
							/* @__PURE__ */ (0, import_jsx_runtime.jsx)(SpinInput, {
								...minutesInputProps,
								...getStyles("field", {
									className: minutesInputProps?.className,
									style: minutesInputProps?.style
								}),
								value: controller.values.minutes,
								onChange: controller.setMinutes,
								min: 0,
								max: 59,
								focusable: true,
								step: minutesStep,
								ref: _minutesRef,
								onPreviousInput: () => controller.focus("hours"),
								onNextInput: () => withSeconds ? controller.focus("seconds") : controller.focus("amPm"),
								"aria-label": minutesInputLabel,
								tabIndex: -1,
								readOnly,
								disabled,
								onPaste: controller.onPaste,
								onFocus: (event) => {
									handleFocus(event);
									minutesInputProps?.onFocus?.(event);
								}
							}),
							withSeconds && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { children: ":" }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SpinInput, {
								...secondsInputProps,
								...getStyles("field", {
									className: secondsInputProps?.className,
									style: secondsInputProps?.style
								}),
								value: controller.values.seconds,
								onChange: controller.setSeconds,
								min: 0,
								max: 59,
								focusable: true,
								step: secondsStep,
								ref: _secondsRef,
								onPreviousInput: () => controller.focus("minutes"),
								onNextInput: () => controller.focus("amPm"),
								"aria-label": secondsInputLabel,
								tabIndex: -1,
								readOnly,
								disabled,
								onPaste: controller.onPaste,
								onFocus: (event) => {
									handleFocus(event);
									secondsInputProps?.onFocus?.(event);
								}
							})] }),
							format === "12h" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AmPmInput, {
								...amPmSelectProps,
								inputType: withDropdown ? "input" : "select",
								labels: amPmLabels,
								value: controller.values.amPm,
								onChange: controller.setAmPm,
								ref: _amPmRef,
								"aria-label": amPmInputLabel,
								onPreviousInput: () => withSeconds ? controller.focus("seconds") : controller.focus("minutes"),
								readOnly,
								disabled,
								tabIndex: -1,
								onPaste: controller.onPaste,
								onFocus: (event) => {
									handleFocus(event);
									amPmSelectProps?.onFocus?.(event);
								}
							})
						]
					})
				}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", {
					type: "hidden",
					name,
					form,
					value: controller.hiddenInputValue,
					...hiddenInputProps
				})]
			}) }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Popover.Dropdown, {
				...getStyles("dropdown"),
				onMouseDown: (event) => event.preventDefault(),
				children: presets ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimePresets, {
					value: controller.hiddenInputValue,
					onChange: controller.setTimeString,
					format,
					presets,
					amPmLabels,
					withSeconds: withSeconds || false
				}) : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
					...getStyles("controlsListGroup"),
					children: [
						/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeControlsList, {
							min: format === "12h" ? 1 : 0,
							max: format === "12h" ? 12 : 23,
							step: hoursStep,
							value: controller.values.hours,
							onSelect: controller.setHours
						}),
						/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeControlsList, {
							min: 0,
							max: 59,
							step: minutesStep,
							value: controller.values.minutes,
							onSelect: controller.setMinutes
						}),
						withSeconds && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeControlsList, {
							min: 0,
							max: 59,
							step: secondsStep,
							value: controller.values.seconds,
							onSelect: controller.setSeconds
						}),
						format === "12h" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AmPmControlsList, {
							labels: amPmLabels,
							value: controller.values.amPm,
							onSelect: controller.setAmPm
						})
					]
				})
			})]
		})
	});
});
TimePicker.displayName = "@mantine/dates/TimePicker";
TimePicker.classes = classes$11;

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimePicker/utils/get-time-range/get-time-range.mjs
function getTimeRange({ startTime, endTime, interval }) {
	const timeRange = [];
	const startInSeconds = timeToSeconds(startTime);
	const endInSeconds = timeToSeconds(endTime);
	const intervalInSeconds = timeToSeconds(interval);
	for (let current = startInSeconds; current <= endInSeconds; current += intervalInSeconds) timeRange.push(secondsToTime(current).timeString);
	return timeRange;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Day/Day.module.css.mjs
var classes$10 = { "day": "m_396ce5cb" };

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Day/Day.mjs
var import_dayjs_min$40 = __toESM(require_dayjs_min(), 1);
const defaultProps$24 = {};
const varsResolver$5 = createVarsResolver((_, { size }) => ({ day: { "--day-size": getSize(size, "day-size") } }));
const Day = factory((_props, ref) => {
	const props = useProps("Day", defaultProps$24, _props);
	const { classNames, className, style, styles, unstyled, vars, date, disabled, __staticSelector, weekend, outside, selected, renderDay, inRange, firstInRange, lastInRange, hidden, static: isStatic, highlightToday,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "Day",
		classes: classes$10,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		varsResolver: varsResolver$5,
		rootSelector: "day"
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
		...getStyles("day", { style: hidden ? { display: "none" } : void 0 }),
		component: isStatic ? "div" : "button",
		ref,
		disabled,
		"data-today": (0, import_dayjs_min$40.default)(date).isSame(/* @__PURE__ */ new Date(), "day") || void 0,
		"data-hidden": hidden || void 0,
		"data-highlight-today": highlightToday || void 0,
		"data-disabled": disabled || void 0,
		"data-weekend": !disabled && !outside && weekend || void 0,
		"data-outside": !disabled && outside || void 0,
		"data-selected": !disabled && selected || void 0,
		"data-in-range": inRange && !disabled || void 0,
		"data-first-in-range": firstInRange && !disabled || void 0,
		"data-last-in-range": lastInRange && !disabled || void 0,
		"data-static": isStatic || void 0,
		unstyled,
		...others,
		children: renderDay?.(date) || (0, import_dayjs_min$40.default)(date).date()
	});
});
Day.classes = classes$10;
Day.displayName = "@mantine/dates/Day";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/WeekdaysRow/get-weekdays-names/get-weekdays-names.mjs
var import_dayjs_min$39 = __toESM(require_dayjs_min(), 1);
function getWeekdayNames({ locale, format = "dd", firstDayOfWeek = 1 }) {
	const baseDate = (0, import_dayjs_min$39.default)().day(firstDayOfWeek);
	const labels = [];
	for (let i = 0; i < 7; i += 1) if (typeof format === "string") labels.push((0, import_dayjs_min$39.default)(baseDate).add(i, "days").locale(locale).format(format));
	else labels.push(format((0, import_dayjs_min$39.default)(baseDate).add(i, "days").format("YYYY-MM-DD")));
	return labels;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/WeekdaysRow/WeekdaysRow.module.css.mjs
var classes$9 = { "weekday": "m_18a3eca" };

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/WeekdaysRow/WeekdaysRow.mjs
const defaultProps$23 = {};
const varsResolver$4 = createVarsResolver((_, { size }) => ({ weekdaysRow: {
	"--wr-fz": getFontSize(size),
	"--wr-spacing": getSpacing(size)
} }));
const WeekdaysRow = factory((_props, ref) => {
	const props = useProps("WeekdaysRow", defaultProps$23, _props);
	const { classNames, className, style, styles, unstyled, vars, locale, firstDayOfWeek, weekdayFormat, cellComponent: CellComponent = "th", __staticSelector, withWeekNumbers,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "WeekdaysRow",
		classes: classes$9,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		varsResolver: varsResolver$4,
		rootSelector: "weekdaysRow"
	});
	const ctx = useDatesContext();
	const weekdays = getWeekdayNames({
		locale: ctx.getLocale(locale),
		format: weekdayFormat,
		firstDayOfWeek: ctx.getFirstDayOfWeek(firstDayOfWeek)
	}).map((weekday, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CellComponent, {
		...getStyles("weekday"),
		children: weekday
	}, index));
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box, {
		component: "tr",
		ref,
		...getStyles("weekdaysRow"),
		...others,
		children: [withWeekNumbers && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CellComponent, {
			...getStyles("weekday"),
			children: "#"
		}), weekdays]
	});
});
WeekdaysRow.classes = classes$9;
WeekdaysRow.displayName = "@mantine/dates/WeekdaysRow";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/get-end-of-week/get-end-of-week.mjs
var import_dayjs_min$38 = __toESM(require_dayjs_min(), 1);
function getEndOfWeek(date, firstDayOfWeek = 1) {
	let value = (0, import_dayjs_min$38.default)(date);
	const lastDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
	while (value.day() !== lastDayOfWeek) value = value.add(1, "day");
	return value.format("YYYY-MM-DD");
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/get-start-of-week/get-start-of-week.mjs
var import_dayjs_min$37 = __toESM(require_dayjs_min(), 1);
function getStartOfWeek(date, firstDayOfWeek = 1) {
	let value = (0, import_dayjs_min$37.default)(date);
	while (value.day() !== firstDayOfWeek) value = value.subtract(1, "day");
	return value.format("YYYY-MM-DD");
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/get-month-days/get-month-days.mjs
var import_dayjs_min$36 = __toESM(require_dayjs_min(), 1);
function getMonthDays({ month, firstDayOfWeek = 1, consistentWeeks }) {
	const day = (0, import_dayjs_min$36.default)(month).subtract((0, import_dayjs_min$36.default)(month).date() - 1, "day");
	const start = (0, import_dayjs_min$36.default)(day.format("YYYY-M-D"));
	const startOfMonth = start.format("YYYY-MM-DD");
	const endOfMonth = start.add(+start.daysInMonth() - 1, "day").format("YYYY-MM-DD");
	const endDate = getEndOfWeek(endOfMonth, firstDayOfWeek);
	const weeks = [];
	let date = (0, import_dayjs_min$36.default)(getStartOfWeek(startOfMonth, firstDayOfWeek));
	while ((0, import_dayjs_min$36.default)(date).isBefore(endDate, "day")) {
		const days = [];
		for (let i = 0; i < 7; i += 1) {
			days.push(date.format("YYYY-MM-DD"));
			date = date.add(1, "day");
		}
		weeks.push(days);
	}
	if (consistentWeeks && weeks.length < 6) {
		const lastWeek = weeks[weeks.length - 1];
		const lastDay = lastWeek[lastWeek.length - 1];
		let nextDay = (0, import_dayjs_min$36.default)(lastDay).add(1, "day");
		while (weeks.length < 6) {
			const days = [];
			for (let i = 0; i < 7; i += 1) {
				days.push(nextDay.format("YYYY-MM-DD"));
				nextDay = nextDay.add(1, "day");
			}
			weeks.push(days);
		}
	}
	return weeks;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/is-same-month/is-same-month.mjs
var import_dayjs_min$35 = __toESM(require_dayjs_min(), 1);
function isSameMonth(date, comparison) {
	return (0, import_dayjs_min$35.default)(date).format("YYYY-MM") === (0, import_dayjs_min$35.default)(comparison).format("YYYY-MM");
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/is-after-min-date/is-after-min-date.mjs
var import_dayjs_min$34 = __toESM(require_dayjs_min(), 1);
function isAfterMinDate(date, minDate) {
	return minDate ? (0, import_dayjs_min$34.default)(date).isAfter((0, import_dayjs_min$34.default)(minDate).subtract(1, "day"), "day") : true;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/is-before-max-date/is-before-max-date.mjs
var import_dayjs_min$33 = __toESM(require_dayjs_min(), 1);
function isBeforeMaxDate(date, maxDate) {
	return maxDate ? (0, import_dayjs_min$33.default)(date).isBefore((0, import_dayjs_min$33.default)(maxDate).add(1, "day"), "day") : true;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/get-date-in-tab-order/get-date-in-tab-order.mjs
var import_dayjs_min$32 = __toESM(require_dayjs_min(), 1);
function getDateInTabOrder({ dates, minDate, maxDate, getDayProps, excludeDate, hideOutsideDates, month }) {
	const enabledDates = dates.flat().filter((date) => isBeforeMaxDate(date, maxDate) && isAfterMinDate(date, minDate) && !excludeDate?.(date) && !getDayProps?.(date)?.disabled && (!hideOutsideDates || isSameMonth(date, month)));
	const selectedDate = enabledDates.find((date) => getDayProps?.(date)?.selected);
	if (selectedDate) return selectedDate;
	const currentDate = enabledDates.find((date) => (0, import_dayjs_min$32.default)().isSame(date, "date"));
	if (currentDate) return currentDate;
	return enabledDates[0];
}

//#endregion
//#region node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isoWeek.js
var require_isoWeek = __commonJS({ "node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/isoWeek.js"(exports, module) {
	(function(e, t) {
		"object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isoWeek = t();
	})(void 0, function() {
		"use strict";
		var e = "day";
		return function(t, i, s) {
			var a = function(t$1) {
				return t$1.add(4 - t$1.isoWeekday(), e);
			}, d = i.prototype;
			d.isoWeekYear = function() {
				return a(this).year();
			}, d.isoWeek = function(t$1) {
				if (!this.$utils().u(t$1)) return this.add(7 * (t$1 - this.isoWeek()), e);
				var i$1, d$1, n$1, o, r = a(this), u = (i$1 = this.isoWeekYear(), d$1 = this.$u, n$1 = (d$1 ? s.utc : s)().year(i$1).startOf("year"), o = 4 - n$1.isoWeekday(), n$1.isoWeekday() > 4 && (o += 7), n$1.add(o, e));
				return r.diff(u, "week") + 1;
			}, d.isoWeekday = function(e$1) {
				return this.$utils().u(e$1) ? this.day() || 7 : this.day(this.day() % 7 ? e$1 : e$1 - 7);
			};
			var n = d.startOf;
			d.startOf = function(e$1, t$1) {
				var i$1 = this.$utils(), s$1 = !!i$1.u(t$1) || t$1;
				return "isoweek" === i$1.p(e$1) ? s$1 ? this.date(this.date() - (this.isoWeekday() - 1)).startOf("day") : this.date(this.date() - 1 - (this.isoWeekday() - 1) + 7).endOf("day") : n.bind(this)(e$1, t$1);
			};
		};
	});
} });

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/get-week-number/get-week-number.mjs
var import_dayjs_min$31 = __toESM(require_dayjs_min(), 1);
var import_isoWeek = __toESM(require_isoWeek(), 1);
import_dayjs_min$31.default.extend(import_isoWeek.default);
function getWeekNumber(week) {
	const monday = week.find((date) => (0, import_dayjs_min$31.default)(date).day() === 1);
	return (0, import_dayjs_min$31.default)(monday).isoWeek();
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/Month.module.css.mjs
var classes$8 = {
	"month": "m_cc9820d3",
	"monthCell": "m_8f457cd5",
	"weekNumber": "m_6cff9dea"
};

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Month/Month.mjs
var import_dayjs_min$30 = __toESM(require_dayjs_min(), 1);
const defaultProps$22 = { withCellSpacing: true };
const varsResolver$3 = createVarsResolver((_, { size }) => ({ weekNumber: {
	"--wn-fz": getFontSize(size),
	"--wn-size": getSize(size, "wn-size")
} }));
const Month = factory((_props, ref) => {
	const props = useProps("Month", defaultProps$22, _props);
	const { classNames, className, style, styles, unstyled, vars, __staticSelector, locale, firstDayOfWeek, weekdayFormat, month, weekendDays, getDayProps, excludeDate, minDate, maxDate, renderDay, hideOutsideDates, hideWeekdays, getDayAriaLabel, static: isStatic, __getDayRef, __onDayKeyDown, __onDayClick, __onDayMouseEnter, __preventFocus, __stopPropagation, withCellSpacing, size, highlightToday, withWeekNumbers,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "Month",
		classes: classes$8,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		varsResolver: varsResolver$3,
		rootSelector: "month"
	});
	const ctx = useDatesContext();
	const dates = getMonthDays({
		month,
		firstDayOfWeek: ctx.getFirstDayOfWeek(firstDayOfWeek),
		consistentWeeks: ctx.consistentWeeks
	});
	const dateInTabOrder = getDateInTabOrder({
		dates,
		minDate: toDateString(minDate),
		maxDate: toDateString(maxDate),
		getDayProps,
		excludeDate,
		hideOutsideDates,
		month
	});
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const rows = dates.map((row, rowIndex) => {
		const cells = row.map((date, cellIndex) => {
			const outside = !isSameMonth(date, month);
			const ariaLabel = getDayAriaLabel?.(date) || (0, import_dayjs_min$30.default)(date).locale(locale || ctx.locale).format("D MMMM YYYY");
			const dayProps = getDayProps?.(date);
			const isDateInTabOrder = (0, import_dayjs_min$30.default)(date).isSame(dateInTabOrder, "date");
			return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
				...getStyles("monthCell"),
				"data-with-spacing": withCellSpacing || void 0,
				children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Day, {
					__staticSelector: __staticSelector || "Month",
					classNames: resolvedClassNames,
					styles: resolvedStyles,
					unstyled,
					"data-mantine-stop-propagation": __stopPropagation || void 0,
					highlightToday,
					renderDay,
					date,
					size,
					weekend: ctx.getWeekendDays(weekendDays).includes((0, import_dayjs_min$30.default)(date).get("day")),
					outside,
					hidden: hideOutsideDates ? outside : false,
					"aria-label": ariaLabel,
					static: isStatic,
					disabled: excludeDate?.(date) || !isBeforeMaxDate(date, toDateString(maxDate)) || !isAfterMinDate(date, toDateString(minDate)),
					ref: (node) => __getDayRef?.(rowIndex, cellIndex, node),
					...dayProps,
					onKeyDown: (event) => {
						dayProps?.onKeyDown?.(event);
						__onDayKeyDown?.(event, {
							rowIndex,
							cellIndex,
							date
						});
					},
					onMouseEnter: (event) => {
						dayProps?.onMouseEnter?.(event);
						__onDayMouseEnter?.(event, date);
					},
					onClick: (event) => {
						dayProps?.onClick?.(event);
						__onDayClick?.(event, date);
					},
					onMouseDown: (event) => {
						dayProps?.onMouseDown?.(event);
						__preventFocus && event.preventDefault();
					},
					tabIndex: __preventFocus || !isDateInTabOrder ? -1 : 0
				})
			}, date.toString());
		});
		return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("tr", {
			...getStyles("monthRow"),
			children: [withWeekNumbers && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
				...getStyles("weekNumber"),
				children: getWeekNumber(row)
			}), cells]
		}, rowIndex);
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box, {
		component: "table",
		...getStyles("month"),
		size,
		ref,
		...others,
		children: [!hideWeekdays && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("thead", {
			...getStyles("monthThead"),
			children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(WeekdaysRow, {
				__staticSelector: __staticSelector || "Month",
				locale,
				firstDayOfWeek,
				weekdayFormat,
				size,
				classNames: resolvedClassNames,
				styles: resolvedStyles,
				unstyled,
				withWeekNumbers
			})
		}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", {
			...getStyles("monthTbody"),
			children: rows
		})]
	});
});
Month.classes = classes$8;
Month.displayName = "@mantine/dates/Month";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/PickerControl/PickerControl.module.css.mjs
var classes$7 = { "pickerControl": "m_dc6a3c71" };

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/PickerControl/PickerControl.mjs
const defaultProps$21 = {};
const varsResolver$2 = createVarsResolver((_, { size }) => ({ pickerControl: {
	"--dpc-fz": getFontSize(size),
	"--dpc-size": getSize(size, "dpc-size")
} }));
const PickerControl = factory((_props, ref) => {
	const props = useProps("PickerControl", defaultProps$21, _props);
	const { classNames, className, style, styles, unstyled, vars, firstInRange, lastInRange, inRange, __staticSelector, selected, disabled,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "PickerControl",
		classes: classes$7,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		varsResolver: varsResolver$2,
		rootSelector: "pickerControl"
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
		...getStyles("pickerControl"),
		ref,
		unstyled,
		"data-picker-control": true,
		"data-selected": selected && !disabled || void 0,
		"data-disabled": disabled || void 0,
		"data-in-range": inRange && !disabled && !selected || void 0,
		"data-first-in-range": firstInRange && !disabled || void 0,
		"data-last-in-range": lastInRange && !disabled || void 0,
		disabled,
		...others
	});
});
PickerControl.classes = classes$7;
PickerControl.displayName = "@mantine/dates/PickerControl";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearsList/is-year-disabled/is-year-disabled.mjs
var import_dayjs_min$29 = __toESM(require_dayjs_min(), 1);
function isYearDisabled({ year, minDate, maxDate }) {
	if (!minDate && !maxDate) return false;
	if (minDate && (0, import_dayjs_min$29.default)(year).isBefore(minDate, "year")) return true;
	if (maxDate && (0, import_dayjs_min$29.default)(year).isAfter(maxDate, "year")) return true;
	return false;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearsList/get-year-in-tab-order/get-year-in-tab-order.mjs
var import_dayjs_min$28 = __toESM(require_dayjs_min(), 1);
function getYearInTabOrder({ years, minDate, maxDate, getYearControlProps }) {
	const enabledYears = years.flat().filter((year) => !isYearDisabled({
		year,
		minDate,
		maxDate
	}) && !getYearControlProps?.(year)?.disabled);
	const selectedYear = enabledYears.find((year) => getYearControlProps?.(year)?.selected);
	if (selectedYear) return selectedYear;
	const currentYear = enabledYears.find((year) => (0, import_dayjs_min$28.default)().isSame(year, "year"));
	if (currentYear) return currentYear;
	return enabledYears[0];
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearsList/get-years-data/get-years-data.mjs
var import_dayjs_min$27 = __toESM(require_dayjs_min(), 1);
function getYearsData(decade) {
	const year = (0, import_dayjs_min$27.default)(decade).year();
	const rounded = year - year % 10;
	let currentYearIndex = 0;
	const results = [
		[],
		[],
		[],
		[]
	];
	for (let i = 0; i < 4; i += 1) {
		const max = i === 3 ? 1 : 3;
		for (let j = 0; j < max; j += 1) {
			results[i].push((0, import_dayjs_min$27.default)(new Date(rounded + currentYearIndex, 0)).format("YYYY-MM-DD"));
			currentYearIndex += 1;
		}
	}
	return results;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearsList/YearsList.module.css.mjs
var classes$6 = {
	"yearsList": "m_9206547b",
	"yearsListCell": "m_c5a19c7d"
};

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearsList/YearsList.mjs
var import_dayjs_min$26 = __toESM(require_dayjs_min(), 1);
const defaultProps$20 = {
	yearsListFormat: "YYYY",
	withCellSpacing: true
};
const YearsList = factory((_props, ref) => {
	const props = useProps("YearsList", defaultProps$20, _props);
	const { classNames, className, style, styles, unstyled, vars, decade, yearsListFormat, locale, minDate, maxDate, getYearControlProps, __staticSelector, __getControlRef, __onControlKeyDown, __onControlClick, __onControlMouseEnter, __preventFocus, __stopPropagation, withCellSpacing, size,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "YearsList",
		classes: classes$6,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		rootSelector: "yearsList"
	});
	const ctx = useDatesContext();
	const years = getYearsData(decade);
	const yearInTabOrder = getYearInTabOrder({
		years,
		minDate,
		maxDate,
		getYearControlProps
	});
	const rows = years.map((yearsRow, rowIndex) => {
		const cells = yearsRow.map((year, cellIndex) => {
			const controlProps = getYearControlProps?.(year);
			const isYearInTabOrder = (0, import_dayjs_min$26.default)(year).isSame(yearInTabOrder, "year");
			return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
				...getStyles("yearsListCell"),
				"data-with-spacing": withCellSpacing || void 0,
				children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PickerControl, {
					...getStyles("yearsListControl"),
					size,
					unstyled,
					"data-mantine-stop-propagation": __stopPropagation || void 0,
					disabled: isYearDisabled({
						year,
						minDate,
						maxDate
					}),
					ref: (node) => __getControlRef?.(rowIndex, cellIndex, node),
					...controlProps,
					onKeyDown: (event) => {
						controlProps?.onKeyDown?.(event);
						__onControlKeyDown?.(event, {
							rowIndex,
							cellIndex,
							date: year
						});
					},
					onClick: (event) => {
						controlProps?.onClick?.(event);
						__onControlClick?.(event, year);
					},
					onMouseEnter: (event) => {
						controlProps?.onMouseEnter?.(event);
						__onControlMouseEnter?.(event, year);
					},
					onMouseDown: (event) => {
						controlProps?.onMouseDown?.(event);
						__preventFocus && event.preventDefault();
					},
					tabIndex: __preventFocus || !isYearInTabOrder ? -1 : 0,
					children: (0, import_dayjs_min$26.default)(year).locale(ctx.getLocale(locale)).format(yearsListFormat)
				})
			}, cellIndex);
		});
		return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tr", {
			...getStyles("yearsListRow"),
			children: cells
		}, rowIndex);
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box, {
		component: "table",
		ref,
		size,
		...getStyles("yearsList"),
		...others,
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", { children: rows })
	});
});
YearsList.classes = classes$6;
YearsList.displayName = "@mantine/dates/YearsList";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthsList/is-month-disabled/is-month-disabled.mjs
var import_dayjs_min$25 = __toESM(require_dayjs_min(), 1);
function isMonthDisabled({ month, minDate, maxDate }) {
	if (!minDate && !maxDate) return false;
	if (minDate && (0, import_dayjs_min$25.default)(month).isBefore(minDate, "month")) return true;
	if (maxDate && (0, import_dayjs_min$25.default)(month).isAfter(maxDate, "month")) return true;
	return false;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthsList/get-month-in-tab-order/get-month-in-tab-order.mjs
var import_dayjs_min$24 = __toESM(require_dayjs_min(), 1);
function getMonthInTabOrder({ months, minDate, maxDate, getMonthControlProps }) {
	const enabledMonths = months.flat().filter((month) => !isMonthDisabled({
		month,
		minDate,
		maxDate
	}) && !getMonthControlProps?.(month)?.disabled);
	const selectedMonth = enabledMonths.find((month) => getMonthControlProps?.(month)?.selected);
	if (selectedMonth) return selectedMonth;
	const currentMonth = enabledMonths.find((month) => (0, import_dayjs_min$24.default)().isSame(month, "month"));
	if (currentMonth) return currentMonth;
	return enabledMonths[0];
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthsList/get-months-data/get-months-data.mjs
var import_dayjs_min$23 = __toESM(require_dayjs_min(), 1);
function getMonthsData(year) {
	const startOfYear = (0, import_dayjs_min$23.default)(year).startOf("year").toDate();
	const results = [
		[],
		[],
		[],
		[]
	];
	let currentMonthIndex = 0;
	for (let i = 0; i < 4; i += 1) for (let j = 0; j < 3; j += 1) {
		results[i].push((0, import_dayjs_min$23.default)(startOfYear).add(currentMonthIndex, "months").format("YYYY-MM-DD"));
		currentMonthIndex += 1;
	}
	return results;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthsList/MonthsList.module.css.mjs
var classes$5 = {
	"monthsList": "m_2a6c32d",
	"monthsListCell": "m_fe27622f"
};

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthsList/MonthsList.mjs
var import_dayjs_min$22 = __toESM(require_dayjs_min(), 1);
const defaultProps$19 = {
	monthsListFormat: "MMM",
	withCellSpacing: true
};
const MonthsList = factory((_props, ref) => {
	const props = useProps("MonthsList", defaultProps$19, _props);
	const { classNames, className, style, styles, unstyled, vars, __staticSelector, year, monthsListFormat, locale, minDate, maxDate, getMonthControlProps, __getControlRef, __onControlKeyDown, __onControlClick, __onControlMouseEnter, __preventFocus, __stopPropagation, withCellSpacing, size,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "MonthsList",
		classes: classes$5,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		rootSelector: "monthsList"
	});
	const ctx = useDatesContext();
	const months = getMonthsData(year);
	const monthInTabOrder = getMonthInTabOrder({
		months,
		minDate: toDateString(minDate),
		maxDate: toDateString(maxDate),
		getMonthControlProps
	});
	const rows = months.map((monthsRow, rowIndex) => {
		const cells = monthsRow.map((month, cellIndex) => {
			const controlProps = getMonthControlProps?.(month);
			const isMonthInTabOrder = (0, import_dayjs_min$22.default)(month).isSame(monthInTabOrder, "month");
			return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("td", {
				...getStyles("monthsListCell"),
				"data-with-spacing": withCellSpacing || void 0,
				children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PickerControl, {
					...getStyles("monthsListControl"),
					size,
					unstyled,
					__staticSelector: __staticSelector || "MonthsList",
					"data-mantine-stop-propagation": __stopPropagation || void 0,
					disabled: isMonthDisabled({
						month,
						minDate: toDateString(minDate),
						maxDate: toDateString(maxDate)
					}),
					ref: (node) => __getControlRef?.(rowIndex, cellIndex, node),
					...controlProps,
					onKeyDown: (event) => {
						controlProps?.onKeyDown?.(event);
						__onControlKeyDown?.(event, {
							rowIndex,
							cellIndex,
							date: month
						});
					},
					onClick: (event) => {
						controlProps?.onClick?.(event);
						__onControlClick?.(event, month);
					},
					onMouseEnter: (event) => {
						controlProps?.onMouseEnter?.(event);
						__onControlMouseEnter?.(event, month);
					},
					onMouseDown: (event) => {
						controlProps?.onMouseDown?.(event);
						__preventFocus && event.preventDefault();
					},
					tabIndex: __preventFocus || !isMonthInTabOrder ? -1 : 0,
					children: (0, import_dayjs_min$22.default)(month).locale(ctx.getLocale(locale)).format(monthsListFormat)
				})
			}, cellIndex);
		});
		return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tr", {
			...getStyles("monthsListRow"),
			children: cells
		}, rowIndex);
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box, {
		component: "table",
		ref,
		size,
		...getStyles("monthsList"),
		...others,
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("tbody", { children: rows })
	});
});
MonthsList.classes = classes$5;
MonthsList.displayName = "@mantine/dates/MonthsList";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/CalendarHeader/CalendarHeader.module.css.mjs
var classes$4 = {
	"calendarHeader": "m_730a79ed",
	"calendarHeaderLevel": "m_f6645d97",
	"calendarHeaderControl": "m_2351eeb0",
	"calendarHeaderControlIcon": "m_367dc749"
};

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/CalendarHeader/CalendarHeader.mjs
const defaultProps$18 = {
	nextDisabled: false,
	previousDisabled: false,
	hasNextLevel: true,
	withNext: true,
	withPrevious: true
};
const varsResolver$1 = createVarsResolver((_, { size }) => ({ calendarHeader: {
	"--dch-control-size": getSize(size, "dch-control-size"),
	"--dch-fz": getFontSize(size)
} }));
const CalendarHeader = factory((_props, ref) => {
	const props = useProps("CalendarHeader", defaultProps$18, _props);
	const { classNames, className, style, styles, unstyled, vars, nextIcon, previousIcon, nextLabel, previousLabel, onNext, onPrevious, onLevelClick, label, nextDisabled, previousDisabled, hasNextLevel, levelControlAriaLabel, withNext, withPrevious, __staticSelector, __preventFocus, __stopPropagation,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "CalendarHeader",
		classes: classes$4,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		varsResolver: varsResolver$1,
		rootSelector: "calendarHeader"
	});
	const preventFocus = __preventFocus ? (event) => event.preventDefault() : void 0;
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box, {
		...getStyles("calendarHeader"),
		ref,
		...others,
		children: [
			withPrevious && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
				...getStyles("calendarHeaderControl"),
				"data-direction": "previous",
				"aria-label": previousLabel,
				onClick: onPrevious,
				unstyled,
				onMouseDown: preventFocus,
				disabled: previousDisabled,
				"data-disabled": previousDisabled || void 0,
				tabIndex: __preventFocus || previousDisabled ? -1 : 0,
				"data-mantine-stop-propagation": __stopPropagation || void 0,
				children: previousIcon || /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionChevron, {
					...getStyles("calendarHeaderControlIcon"),
					"data-direction": "previous",
					size: "45%"
				})
			}),
			/* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
				component: hasNextLevel ? "button" : "div",
				...getStyles("calendarHeaderLevel"),
				onClick: hasNextLevel ? onLevelClick : void 0,
				unstyled,
				onMouseDown: hasNextLevel ? preventFocus : void 0,
				disabled: !hasNextLevel,
				"data-static": !hasNextLevel || void 0,
				"aria-label": levelControlAriaLabel,
				tabIndex: __preventFocus || !hasNextLevel ? -1 : 0,
				"data-mantine-stop-propagation": __stopPropagation || void 0,
				children: label
			}),
			withNext && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
				...getStyles("calendarHeaderControl"),
				"data-direction": "next",
				"aria-label": nextLabel,
				onClick: onNext,
				unstyled,
				onMouseDown: preventFocus,
				disabled: nextDisabled,
				"data-disabled": nextDisabled || void 0,
				tabIndex: __preventFocus || nextDisabled ? -1 : 0,
				"data-mantine-stop-propagation": __stopPropagation || void 0,
				children: nextIcon || /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionChevron, {
					...getStyles("calendarHeaderControlIcon"),
					"data-direction": "next",
					size: "45%"
				})
			})
		]
	});
});
CalendarHeader.classes = classes$4;
CalendarHeader.displayName = "@mantine/dates/CalendarHeader";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DecadeLevel/get-decade-range/get-decade-range.mjs
function getDecadeRange(decade) {
	const years = getYearsData(decade);
	return [years[0][0], years[3][0]];
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DecadeLevel/DecadeLevel.mjs
var import_dayjs_min$21 = __toESM(require_dayjs_min(), 1);
const defaultProps$17 = { decadeLabelFormat: "YYYY" };
const DecadeLevel = factory((_props, ref) => {
	const props = useProps("DecadeLevel", defaultProps$17, _props);
	const { decade, locale, minDate, maxDate, yearsListFormat, getYearControlProps, __getControlRef, __onControlKeyDown, __onControlClick, __onControlMouseEnter, withCellSpacing, __preventFocus, nextIcon, previousIcon, nextLabel, previousLabel, onNext, onPrevious, nextDisabled, previousDisabled, levelControlAriaLabel, withNext, withPrevious, decadeLabelFormat, classNames, styles, unstyled, __staticSelector, __stopPropagation, size,...others } = props;
	const ctx = useDatesContext();
	const [startOfDecade, endOfDecade] = getDecadeRange(decade);
	const stylesApiProps = {
		__staticSelector: __staticSelector || "DecadeLevel",
		classNames,
		styles,
		unstyled,
		size
	};
	const _nextDisabled = typeof nextDisabled === "boolean" ? nextDisabled : maxDate ? !(0, import_dayjs_min$21.default)(endOfDecade).endOf("year").isBefore(maxDate) : false;
	const _previousDisabled = typeof previousDisabled === "boolean" ? previousDisabled : minDate ? !(0, import_dayjs_min$21.default)(startOfDecade).startOf("year").isAfter(minDate) : false;
	const formatDecade = (date, format) => (0, import_dayjs_min$21.default)(date).locale(locale || ctx.locale).format(format);
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box, {
		"data-decade-level": true,
		size,
		ref,
		...others,
		children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(CalendarHeader, {
			label: typeof decadeLabelFormat === "function" ? decadeLabelFormat(startOfDecade, endOfDecade) : `${formatDecade(startOfDecade, decadeLabelFormat)} \u2013 ${formatDecade(endOfDecade, decadeLabelFormat)}`,
			__preventFocus,
			__stopPropagation,
			nextIcon,
			previousIcon,
			nextLabel,
			previousLabel,
			onNext,
			onPrevious,
			nextDisabled: _nextDisabled,
			previousDisabled: _previousDisabled,
			hasNextLevel: false,
			levelControlAriaLabel,
			withNext,
			withPrevious,
			...stylesApiProps
		}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(YearsList, {
			decade,
			locale,
			minDate,
			maxDate,
			yearsListFormat,
			getYearControlProps,
			__getControlRef,
			__onControlKeyDown,
			__onControlClick,
			__onControlMouseEnter,
			__preventFocus,
			__stopPropagation,
			withCellSpacing,
			...stylesApiProps
		})]
	});
});
DecadeLevel.classes = {
	...YearsList.classes,
	...CalendarHeader.classes
};
DecadeLevel.displayName = "@mantine/dates/DecadeLevel";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearLevel/YearLevel.mjs
var import_dayjs_min$20 = __toESM(require_dayjs_min(), 1);
const defaultProps$16 = { yearLabelFormat: "YYYY" };
const YearLevel = factory((_props, ref) => {
	const props = useProps("YearLevel", defaultProps$16, _props);
	const { year, locale, minDate, maxDate, monthsListFormat, getMonthControlProps, __getControlRef, __onControlKeyDown, __onControlClick, __onControlMouseEnter, withCellSpacing, __preventFocus, nextIcon, previousIcon, nextLabel, previousLabel, onNext, onPrevious, onLevelClick, nextDisabled, previousDisabled, hasNextLevel, levelControlAriaLabel, withNext, withPrevious, yearLabelFormat, __staticSelector, __stopPropagation, size, classNames, styles, unstyled,...others } = props;
	const ctx = useDatesContext();
	const stylesApiProps = {
		__staticSelector: __staticSelector || "YearLevel",
		classNames,
		styles,
		unstyled,
		size
	};
	const _nextDisabled = typeof nextDisabled === "boolean" ? nextDisabled : maxDate ? !(0, import_dayjs_min$20.default)(year).endOf("year").isBefore(maxDate) : false;
	const _previousDisabled = typeof previousDisabled === "boolean" ? previousDisabled : minDate ? !(0, import_dayjs_min$20.default)(year).startOf("year").isAfter(minDate) : false;
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box, {
		"data-year-level": true,
		size,
		ref,
		...others,
		children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(CalendarHeader, {
			label: typeof yearLabelFormat === "function" ? yearLabelFormat(year) : (0, import_dayjs_min$20.default)(year).locale(locale || ctx.locale).format(yearLabelFormat),
			__preventFocus,
			__stopPropagation,
			nextIcon,
			previousIcon,
			nextLabel,
			previousLabel,
			onNext,
			onPrevious,
			onLevelClick,
			nextDisabled: _nextDisabled,
			previousDisabled: _previousDisabled,
			hasNextLevel,
			levelControlAriaLabel,
			withNext,
			withPrevious,
			...stylesApiProps
		}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MonthsList, {
			year,
			locale,
			minDate,
			maxDate,
			monthsListFormat,
			getMonthControlProps,
			__getControlRef,
			__onControlKeyDown,
			__onControlClick,
			__onControlMouseEnter,
			__preventFocus,
			__stopPropagation,
			withCellSpacing,
			...stylesApiProps
		})]
	});
});
YearLevel.classes = {
	...CalendarHeader.classes,
	...MonthsList.classes
};
YearLevel.displayName = "@mantine/dates/YearLevel";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthLevel/MonthLevel.mjs
var import_dayjs_min$19 = __toESM(require_dayjs_min(), 1);
const defaultProps$15 = { monthLabelFormat: "MMMM YYYY" };
const MonthLevel = factory((_props, ref) => {
	const props = useProps("MonthLevel", defaultProps$15, _props);
	const { month, locale, firstDayOfWeek, weekdayFormat, weekendDays, getDayProps, excludeDate, minDate, maxDate, renderDay, hideOutsideDates, hideWeekdays, getDayAriaLabel, __getDayRef, __onDayKeyDown, __onDayClick, __onDayMouseEnter, withCellSpacing, highlightToday, withWeekNumbers, __preventFocus, __stopPropagation, nextIcon, previousIcon, nextLabel, previousLabel, onNext, onPrevious, onLevelClick, nextDisabled, previousDisabled, hasNextLevel, levelControlAriaLabel, withNext, withPrevious, monthLabelFormat, classNames, styles, unstyled, __staticSelector, size, static: isStatic,...others } = props;
	const ctx = useDatesContext();
	const stylesApiProps = {
		__staticSelector: __staticSelector || "MonthLevel",
		classNames,
		styles,
		unstyled,
		size
	};
	const _nextDisabled = typeof nextDisabled === "boolean" ? nextDisabled : maxDate ? !(0, import_dayjs_min$19.default)(month).endOf("month").isBefore(maxDate) : false;
	const _previousDisabled = typeof previousDisabled === "boolean" ? previousDisabled : minDate ? !(0, import_dayjs_min$19.default)(month).startOf("month").isAfter(minDate) : false;
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box, {
		"data-month-level": true,
		size,
		ref,
		...others,
		children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(CalendarHeader, {
			label: typeof monthLabelFormat === "function" ? monthLabelFormat(month) : (0, import_dayjs_min$19.default)(month).locale(locale || ctx.locale).format(monthLabelFormat),
			__preventFocus,
			__stopPropagation,
			nextIcon,
			previousIcon,
			nextLabel,
			previousLabel,
			onNext,
			onPrevious,
			onLevelClick,
			nextDisabled: _nextDisabled,
			previousDisabled: _previousDisabled,
			hasNextLevel,
			levelControlAriaLabel,
			withNext,
			withPrevious,
			...stylesApiProps
		}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Month, {
			month,
			locale,
			firstDayOfWeek,
			weekdayFormat,
			weekendDays,
			getDayProps,
			excludeDate,
			minDate,
			maxDate,
			renderDay,
			hideOutsideDates,
			hideWeekdays,
			getDayAriaLabel,
			__getDayRef,
			__onDayKeyDown,
			__onDayClick,
			__onDayMouseEnter,
			__preventFocus,
			__stopPropagation,
			static: isStatic,
			withCellSpacing,
			highlightToday,
			withWeekNumbers,
			...stylesApiProps
		})]
	});
});
MonthLevel.classes = {
	...Month.classes,
	...CalendarHeader.classes
};
MonthLevel.displayName = "@mantine/dates/MonthLevel";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/LevelsGroup/LevelsGroup.module.css.mjs
var classes$3 = { "levelsGroup": "m_30b26e33" };

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/LevelsGroup/LevelsGroup.mjs
const defaultProps$14 = {};
const LevelsGroup = factory((_props, ref) => {
	const props = useProps("LevelsGroup", defaultProps$14, _props);
	const { classNames, className, style, styles, unstyled, vars, __staticSelector,...others } = props;
	const getStyles = useStyles({
		name: __staticSelector || "LevelsGroup",
		classes: classes$3,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		rootSelector: "levelsGroup"
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box, {
		ref,
		...getStyles("levelsGroup"),
		...others
	});
});
LevelsGroup.classes = classes$3;
LevelsGroup.displayName = "@mantine/dates/LevelsGroup";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DecadeLevelGroup/DecadeLevelGroup.mjs
var import_dayjs_min$18 = __toESM(require_dayjs_min(), 1);
const defaultProps$13 = { numberOfColumns: 1 };
const DecadeLevelGroup = factory((_props, ref) => {
	const props = useProps("DecadeLevelGroup", defaultProps$13, _props);
	const { decade, locale, minDate, maxDate, yearsListFormat, getYearControlProps, __onControlClick, __onControlMouseEnter, withCellSpacing, __preventFocus, nextIcon, previousIcon, nextLabel, previousLabel, onNext, onPrevious, nextDisabled, previousDisabled, classNames, styles, unstyled, __staticSelector, __stopPropagation, numberOfColumns, levelControlAriaLabel, decadeLabelFormat, size, vars,...others } = props;
	const controlsRef = (0, import_react.useRef)([]);
	const decades = Array(numberOfColumns).fill(0).map((_, decadeIndex) => {
		const currentDecade = (0, import_dayjs_min$18.default)(decade).add(decadeIndex * 10, "years").format("YYYY-MM-DD");
		return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DecadeLevel, {
			size,
			yearsListFormat,
			decade: currentDecade,
			withNext: decadeIndex === numberOfColumns - 1,
			withPrevious: decadeIndex === 0,
			decadeLabelFormat,
			__onControlClick,
			__onControlMouseEnter,
			__onControlKeyDown: (event, payload) => handleControlKeyDown({
				levelIndex: decadeIndex,
				rowIndex: payload.rowIndex,
				cellIndex: payload.cellIndex,
				event,
				controlsRef
			}),
			__getControlRef: (rowIndex, cellIndex, node) => {
				if (!Array.isArray(controlsRef.current[decadeIndex])) controlsRef.current[decadeIndex] = [];
				if (!Array.isArray(controlsRef.current[decadeIndex][rowIndex])) controlsRef.current[decadeIndex][rowIndex] = [];
				controlsRef.current[decadeIndex][rowIndex][cellIndex] = node;
			},
			levelControlAriaLabel: typeof levelControlAriaLabel === "function" ? levelControlAriaLabel(currentDecade) : levelControlAriaLabel,
			locale,
			minDate,
			maxDate,
			__preventFocus,
			__stopPropagation,
			nextIcon,
			previousIcon,
			nextLabel,
			previousLabel,
			onNext,
			onPrevious,
			nextDisabled,
			previousDisabled,
			getYearControlProps,
			__staticSelector: __staticSelector || "DecadeLevelGroup",
			classNames,
			styles,
			unstyled,
			withCellSpacing
		}, decadeIndex);
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(LevelsGroup, {
		classNames,
		styles,
		__staticSelector: __staticSelector || "DecadeLevelGroup",
		ref,
		size,
		unstyled,
		...others,
		children: decades
	});
});
DecadeLevelGroup.classes = {
	...LevelsGroup.classes,
	...DecadeLevel.classes
};
DecadeLevelGroup.displayName = "@mantine/dates/DecadeLevelGroup";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearLevelGroup/YearLevelGroup.mjs
var import_dayjs_min$17 = __toESM(require_dayjs_min(), 1);
const defaultProps$12 = { numberOfColumns: 1 };
const YearLevelGroup = factory((_props, ref) => {
	const props = useProps("YearLevelGroup", defaultProps$12, _props);
	const { year, locale, minDate, maxDate, monthsListFormat, getMonthControlProps, __onControlClick, __onControlMouseEnter, withCellSpacing, __preventFocus, nextIcon, previousIcon, nextLabel, previousLabel, onNext, onPrevious, onLevelClick, nextDisabled, previousDisabled, hasNextLevel, classNames, styles, unstyled, __staticSelector, __stopPropagation, numberOfColumns, levelControlAriaLabel, yearLabelFormat, size, vars,...others } = props;
	const controlsRef = (0, import_react.useRef)([]);
	const years = Array(numberOfColumns).fill(0).map((_, yearIndex) => {
		const currentYear = (0, import_dayjs_min$17.default)(year).add(yearIndex, "years").format("YYYY-MM-DD");
		return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(YearLevel, {
			size,
			monthsListFormat,
			year: currentYear,
			withNext: yearIndex === numberOfColumns - 1,
			withPrevious: yearIndex === 0,
			yearLabelFormat,
			__stopPropagation,
			__onControlClick,
			__onControlMouseEnter,
			__onControlKeyDown: (event, payload) => handleControlKeyDown({
				levelIndex: yearIndex,
				rowIndex: payload.rowIndex,
				cellIndex: payload.cellIndex,
				event,
				controlsRef
			}),
			__getControlRef: (rowIndex, cellIndex, node) => {
				if (!Array.isArray(controlsRef.current[yearIndex])) controlsRef.current[yearIndex] = [];
				if (!Array.isArray(controlsRef.current[yearIndex][rowIndex])) controlsRef.current[yearIndex][rowIndex] = [];
				controlsRef.current[yearIndex][rowIndex][cellIndex] = node;
			},
			levelControlAriaLabel: typeof levelControlAriaLabel === "function" ? levelControlAriaLabel(currentYear) : levelControlAriaLabel,
			locale,
			minDate,
			maxDate,
			__preventFocus,
			nextIcon,
			previousIcon,
			nextLabel,
			previousLabel,
			onNext,
			onPrevious,
			onLevelClick,
			nextDisabled,
			previousDisabled,
			hasNextLevel,
			getMonthControlProps,
			classNames,
			styles,
			unstyled,
			__staticSelector: __staticSelector || "YearLevelGroup",
			withCellSpacing
		}, yearIndex);
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(LevelsGroup, {
		classNames,
		styles,
		__staticSelector: __staticSelector || "YearLevelGroup",
		ref,
		size,
		unstyled,
		...others,
		children: years
	});
});
YearLevelGroup.classes = {
	...YearLevel.classes,
	...LevelsGroup.classes
};
YearLevelGroup.displayName = "@mantine/dates/YearLevelGroup";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthLevelGroup/MonthLevelGroup.mjs
var import_dayjs_min$16 = __toESM(require_dayjs_min(), 1);
const defaultProps$11 = { numberOfColumns: 1 };
const MonthLevelGroup = factory((_props, ref) => {
	const props = useProps("MonthLevelGroup", defaultProps$11, _props);
	const { month, locale, firstDayOfWeek, weekdayFormat, weekendDays, getDayProps, excludeDate, minDate, maxDate, renderDay, hideOutsideDates, hideWeekdays, getDayAriaLabel, __onDayClick, __onDayMouseEnter, withCellSpacing, highlightToday, withWeekNumbers, __preventFocus, nextIcon, previousIcon, nextLabel, previousLabel, onNext, onPrevious, onLevelClick, nextDisabled, previousDisabled, hasNextLevel, classNames, styles, unstyled, numberOfColumns, levelControlAriaLabel, monthLabelFormat, __staticSelector, __stopPropagation, size, static: isStatic, vars,...others } = props;
	const daysRefs = (0, import_react.useRef)([]);
	const months = Array(numberOfColumns).fill(0).map((_, monthIndex) => {
		const currentMonth = (0, import_dayjs_min$16.default)(month).add(monthIndex, "months").format("YYYY-MM-DD");
		return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MonthLevel, {
			month: currentMonth,
			withNext: monthIndex === numberOfColumns - 1,
			withPrevious: monthIndex === 0,
			monthLabelFormat,
			__stopPropagation,
			__onDayClick,
			__onDayMouseEnter,
			__onDayKeyDown: (event, payload) => handleControlKeyDown({
				levelIndex: monthIndex,
				rowIndex: payload.rowIndex,
				cellIndex: payload.cellIndex,
				event,
				controlsRef: daysRefs
			}),
			__getDayRef: (rowIndex, cellIndex, node) => {
				if (!Array.isArray(daysRefs.current[monthIndex])) daysRefs.current[monthIndex] = [];
				if (!Array.isArray(daysRefs.current[monthIndex][rowIndex])) daysRefs.current[monthIndex][rowIndex] = [];
				daysRefs.current[monthIndex][rowIndex][cellIndex] = node;
			},
			levelControlAriaLabel: typeof levelControlAriaLabel === "function" ? levelControlAriaLabel(currentMonth) : levelControlAriaLabel,
			locale,
			firstDayOfWeek,
			weekdayFormat,
			weekendDays,
			getDayProps,
			excludeDate,
			minDate,
			maxDate,
			renderDay,
			hideOutsideDates,
			hideWeekdays,
			getDayAriaLabel,
			__preventFocus,
			nextIcon,
			previousIcon,
			nextLabel,
			previousLabel,
			onNext,
			onPrevious,
			onLevelClick,
			nextDisabled,
			previousDisabled,
			hasNextLevel,
			classNames,
			styles,
			unstyled,
			__staticSelector: __staticSelector || "MonthLevelGroup",
			size,
			static: isStatic,
			withCellSpacing,
			highlightToday,
			withWeekNumbers
		}, monthIndex);
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(LevelsGroup, {
		classNames,
		styles,
		__staticSelector: __staticSelector || "MonthLevelGroup",
		ref,
		size,
		...others,
		children: months
	});
});
MonthLevelGroup.classes = {
	...LevelsGroup.classes,
	...MonthLevel.classes
};
MonthLevelGroup.displayName = "@mantine/dates/MonthLevelGroup";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/PickerInputBase/PickerInputBase.module.css.mjs
var classes$2 = { "input": "m_6fa5e2aa" };

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/PickerInputBase/PickerInputBase.mjs
const defaultProps$10 = {};
const PickerInputBase = factory((_props, ref) => {
	const { inputProps, wrapperProps, placeholder, classNames, styles, unstyled, popoverProps, modalProps, dropdownType, children, formattedValue, dropdownHandlers, dropdownOpened, onClick, clearable, onClear, clearButtonProps, rightSection, shouldClear, readOnly, disabled, value, name, form, type, onDropdownClose, withTime,...others } = useInputProps("PickerInputBase", defaultProps$10, _props);
	const clearButton = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Input.ClearButton, {
		onClick: onClear,
		unstyled,
		...clearButtonProps
	});
	const handleClose = () => {
		const isInvalidRangeValue = type === "range" && Array.isArray(value) && value[0] && !value[1];
		if (isInvalidRangeValue) onClear();
		dropdownHandlers.close();
		onDropdownClose?.();
	};
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
		dropdownType === "modal" && !readOnly && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Modal, {
			opened: dropdownOpened,
			onClose: handleClose,
			withCloseButton: false,
			size: "auto",
			"data-dates-modal": true,
			unstyled,
			...modalProps,
			children
		}),
		/* @__PURE__ */ (0, import_jsx_runtime.jsx)(Input.Wrapper, {
			...wrapperProps,
			children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Popover, {
				position: "bottom-start",
				opened: dropdownOpened,
				trapFocus: true,
				returnFocus: false,
				unstyled,
				...popoverProps,
				disabled: popoverProps?.disabled || dropdownType === "modal" || readOnly,
				onChange: (_opened) => {
					if (!_opened) {
						popoverProps?.onClose?.();
						handleClose();
					}
				},
				children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(Popover.Target, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Input, {
					"data-dates-input": true,
					"data-read-only": readOnly || void 0,
					disabled,
					component: "button",
					type: "button",
					multiline: true,
					onClick: (event) => {
						onClick?.(event);
						dropdownHandlers.toggle();
					},
					__clearSection: clearButton,
					__clearable: clearable && shouldClear && !readOnly && !disabled,
					rightSection,
					...inputProps,
					ref,
					classNames: {
						...classNames,
						input: clsx_default(classes$2.input, classNames?.input)
					},
					...others,
					children: formattedValue || /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Input.Placeholder, {
						error: inputProps.error,
						unstyled,
						className: classNames?.placeholder,
						style: styles?.placeholder,
						children: placeholder
					})
				}) }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Popover.Dropdown, {
					"data-dates-dropdown": true,
					children
				})]
			})
		}),
		/* @__PURE__ */ (0, import_jsx_runtime.jsx)(HiddenDatesInput, {
			value,
			name,
			form,
			type,
			withTime
		})
	] });
});
PickerInputBase.classes = classes$2;
PickerInputBase.displayName = "@mantine/dates/PickerInputBase";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/hooks/use-uncontrolled-dates/use-uncontrolled-dates.mjs
var import_dayjs_min$15 = __toESM(require_dayjs_min(), 1);
const getEmptyValue = (type) => type === "range" ? [null, null] : type === "multiple" ? [] : null;
const convertDatesValue = (value, withTime) => {
	const converter = withTime ? toDateTimeString : toDateString;
	return Array.isArray(value) ? value.map(converter) : converter(value);
};
function useUncontrolledDates({ type, value, defaultValue, onChange, withTime = false }) {
	const storedType = (0, import_react.useRef)(type);
	const [_value, _setValue, controlled] = useUncontrolled({
		value: convertDatesValue(value, withTime),
		defaultValue: convertDatesValue(defaultValue, withTime),
		finalValue: getEmptyValue(type),
		onChange
	});
	let _finalValue = _value;
	if (storedType.current !== type) {
		storedType.current = type;
		if (value === void 0) {
			_finalValue = defaultValue !== void 0 ? defaultValue : getEmptyValue(type);
			_setValue(_finalValue);
		}
	}
	return [
		_finalValue,
		_setValue,
		controlled
	];
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Calendar/clamp-level/clamp-level.mjs
function levelToNumber(level, fallback) {
	if (!level) return fallback || 0;
	return level === "month" ? 0 : level === "year" ? 1 : 2;
}
function levelNumberToLevel(levelNumber) {
	return levelNumber === 0 ? "month" : levelNumber === 1 ? "year" : "decade";
}
function clampLevel(level, minLevel, maxLevel) {
	return levelNumberToLevel(clamp(levelToNumber(level, 0), levelToNumber(minLevel, 0), levelToNumber(maxLevel, 2)));
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Calendar/Calendar.mjs
var import_dayjs_min$14 = __toESM(require_dayjs_min(), 1);
const defaultProps$9 = {
	maxLevel: "decade",
	minLevel: "month",
	__updateDateOnYearSelect: true,
	__updateDateOnMonthSelect: true
};
const Calendar = factory((_props, ref) => {
	const props = useProps("Calendar", defaultProps$9, _props);
	const { vars, maxLevel, minLevel, defaultLevel, level, onLevelChange, date, defaultDate, onDateChange, numberOfColumns, columnsToScroll, ariaLabels, nextLabel, previousLabel, onYearSelect, onMonthSelect, onYearMouseEnter, onMonthMouseEnter, __updateDateOnYearSelect, __updateDateOnMonthSelect, firstDayOfWeek, weekdayFormat, weekendDays, getDayProps, excludeDate, renderDay, hideOutsideDates, hideWeekdays, getDayAriaLabel, monthLabelFormat, nextIcon, previousIcon, __onDayClick, __onDayMouseEnter, withCellSpacing, highlightToday, withWeekNumbers, monthsListFormat, getMonthControlProps, yearLabelFormat, yearsListFormat, getYearControlProps, decadeLabelFormat, classNames, styles, unstyled, minDate, maxDate, locale, __staticSelector, size, __preventFocus, __stopPropagation, onNextDecade, onPreviousDecade, onNextYear, onPreviousYear, onNextMonth, onPreviousMonth, static: isStatic,...others } = props;
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const [_level, setLevel] = useUncontrolled({
		value: level ? clampLevel(level, minLevel, maxLevel) : void 0,
		defaultValue: defaultLevel ? clampLevel(defaultLevel, minLevel, maxLevel) : void 0,
		finalValue: clampLevel(void 0, minLevel, maxLevel),
		onChange: onLevelChange
	});
	const [_date, setDate] = useUncontrolledDates({
		type: "default",
		value: toDateString(date),
		defaultValue: toDateString(defaultDate),
		onChange: onDateChange
	});
	const stylesApiProps = {
		__staticSelector: __staticSelector || "Calendar",
		styles: resolvedStyles,
		classNames: resolvedClassNames,
		unstyled,
		size
	};
	const _columnsToScroll = columnsToScroll || numberOfColumns || 1;
	const now = /* @__PURE__ */ new Date();
	const fallbackDate = minDate && (0, import_dayjs_min$14.default)(now).isAfter(minDate) ? minDate : (0, import_dayjs_min$14.default)(now).format("YYYY-MM-DD");
	const currentDate = _date || fallbackDate;
	const handleNextMonth = () => {
		const nextDate = (0, import_dayjs_min$14.default)(currentDate).add(_columnsToScroll, "month").format("YYYY-MM-DD");
		onNextMonth?.(nextDate);
		setDate(nextDate);
	};
	const handlePreviousMonth = () => {
		const nextDate = (0, import_dayjs_min$14.default)(currentDate).subtract(_columnsToScroll, "month").format("YYYY-MM-DD");
		onPreviousMonth?.(nextDate);
		setDate(nextDate);
	};
	const handleNextYear = () => {
		const nextDate = (0, import_dayjs_min$14.default)(currentDate).add(_columnsToScroll, "year").format("YYYY-MM-DD");
		onNextYear?.(nextDate);
		setDate(nextDate);
	};
	const handlePreviousYear = () => {
		const nextDate = (0, import_dayjs_min$14.default)(currentDate).subtract(_columnsToScroll, "year").format("YYYY-MM-DD");
		onPreviousYear?.(nextDate);
		setDate(nextDate);
	};
	const handleNextDecade = () => {
		const nextDate = (0, import_dayjs_min$14.default)(currentDate).add(10 * _columnsToScroll, "year").format("YYYY-MM-DD");
		onNextDecade?.(nextDate);
		setDate(nextDate);
	};
	const handlePreviousDecade = () => {
		const nextDate = (0, import_dayjs_min$14.default)(currentDate).subtract(10 * _columnsToScroll, "year").format("YYYY-MM-DD");
		onPreviousDecade?.(nextDate);
		setDate(nextDate);
	};
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box, {
		ref,
		size,
		"data-calendar": true,
		...others,
		children: [
			_level === "month" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MonthLevelGroup, {
				month: currentDate,
				minDate,
				maxDate,
				firstDayOfWeek,
				weekdayFormat,
				weekendDays,
				getDayProps,
				excludeDate,
				renderDay,
				hideOutsideDates,
				hideWeekdays,
				getDayAriaLabel,
				onNext: handleNextMonth,
				onPrevious: handlePreviousMonth,
				hasNextLevel: maxLevel !== "month",
				onLevelClick: () => setLevel("year"),
				numberOfColumns,
				locale,
				levelControlAriaLabel: ariaLabels?.monthLevelControl,
				nextLabel: ariaLabels?.nextMonth ?? nextLabel,
				nextIcon,
				previousLabel: ariaLabels?.previousMonth ?? previousLabel,
				previousIcon,
				monthLabelFormat,
				__onDayClick,
				__onDayMouseEnter,
				__preventFocus,
				__stopPropagation,
				static: isStatic,
				withCellSpacing,
				highlightToday,
				withWeekNumbers,
				...stylesApiProps
			}),
			_level === "year" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(YearLevelGroup, {
				year: currentDate,
				numberOfColumns,
				minDate,
				maxDate,
				monthsListFormat,
				getMonthControlProps,
				locale,
				onNext: handleNextYear,
				onPrevious: handlePreviousYear,
				hasNextLevel: maxLevel !== "month" && maxLevel !== "year",
				onLevelClick: () => setLevel("decade"),
				levelControlAriaLabel: ariaLabels?.yearLevelControl,
				nextLabel: ariaLabels?.nextYear ?? nextLabel,
				nextIcon,
				previousLabel: ariaLabels?.previousYear ?? previousLabel,
				previousIcon,
				yearLabelFormat,
				__onControlMouseEnter: onMonthMouseEnter,
				__onControlClick: (_event, payload) => {
					__updateDateOnMonthSelect && setDate(payload);
					setLevel(clampLevel("month", minLevel, maxLevel));
					onMonthSelect?.(payload);
				},
				__preventFocus,
				__stopPropagation,
				withCellSpacing,
				...stylesApiProps
			}),
			_level === "decade" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DecadeLevelGroup, {
				decade: currentDate,
				minDate,
				maxDate,
				yearsListFormat,
				getYearControlProps,
				locale,
				onNext: handleNextDecade,
				onPrevious: handlePreviousDecade,
				numberOfColumns,
				nextLabel: ariaLabels?.nextDecade ?? nextLabel,
				nextIcon,
				previousLabel: ariaLabels?.previousDecade ?? previousLabel,
				previousIcon,
				decadeLabelFormat,
				__onControlMouseEnter: onYearMouseEnter,
				__onControlClick: (_event, payload) => {
					__updateDateOnYearSelect && setDate(payload);
					setLevel(clampLevel("year", minLevel, maxLevel));
					onYearSelect?.(payload);
				},
				__preventFocus,
				__stopPropagation,
				withCellSpacing,
				...stylesApiProps
			})
		]
	});
});
Calendar.classes = {
	...DecadeLevelGroup.classes,
	...YearLevelGroup.classes,
	...MonthLevelGroup.classes
};
Calendar.displayName = "@mantine/dates/Calendar";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/Calendar/pick-calendar-levels-props/pick-calendar-levels-props.mjs
function pickCalendarProps(props) {
	const { maxLevel, minLevel, defaultLevel, level, onLevelChange, nextIcon, previousIcon, date, defaultDate, onDateChange, numberOfColumns, columnsToScroll, ariaLabels, nextLabel, previousLabel, onYearSelect, onMonthSelect, onYearMouseEnter, onMonthMouseEnter, onNextMonth, onPreviousMonth, onNextYear, onPreviousYear, onNextDecade, onPreviousDecade, withCellSpacing, highlightToday, __updateDateOnYearSelect, __updateDateOnMonthSelect, withWeekNumbers, firstDayOfWeek, weekdayFormat, weekendDays, getDayProps, excludeDate, renderDay, hideOutsideDates, hideWeekdays, getDayAriaLabel, monthLabelFormat, monthsListFormat, getMonthControlProps, yearLabelFormat, yearsListFormat, getYearControlProps, decadeLabelFormat, allowSingleDateInRange, allowDeselect, minDate, maxDate, locale,...others } = props;
	return {
		calendarProps: {
			maxLevel,
			minLevel,
			defaultLevel,
			level,
			onLevelChange,
			nextIcon,
			previousIcon,
			date,
			defaultDate,
			onDateChange,
			numberOfColumns,
			columnsToScroll,
			ariaLabels,
			nextLabel,
			previousLabel,
			onYearSelect,
			onMonthSelect,
			onYearMouseEnter,
			onMonthMouseEnter,
			onNextMonth,
			onPreviousMonth,
			onNextYear,
			onPreviousYear,
			onNextDecade,
			onPreviousDecade,
			withCellSpacing,
			highlightToday,
			__updateDateOnYearSelect,
			__updateDateOnMonthSelect,
			withWeekNumbers,
			firstDayOfWeek,
			weekdayFormat,
			weekendDays,
			getDayProps,
			excludeDate,
			renderDay,
			hideOutsideDates,
			hideWeekdays,
			getDayAriaLabel,
			monthLabelFormat,
			monthsListFormat,
			getMonthControlProps,
			yearLabelFormat,
			yearsListFormat,
			getYearControlProps,
			decadeLabelFormat,
			allowSingleDateInRange,
			allowDeselect,
			minDate,
			maxDate,
			locale
		},
		others
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/hooks/use-dates-state/is-in-range/is-in-range.mjs
var import_dayjs_min$13 = __toESM(require_dayjs_min(), 1);
function isInRange(date, range) {
	const _range = [...range].sort((a, b) => (0, import_dayjs_min$13.default)(a).isAfter((0, import_dayjs_min$13.default)(b)) ? 1 : -1);
	return (0, import_dayjs_min$13.default)(_range[0]).startOf("day").subtract(1, "ms").isBefore(date) && (0, import_dayjs_min$13.default)(_range[1]).endOf("day").add(1, "ms").isAfter(date);
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/hooks/use-dates-state/use-dates-state.mjs
var import_dayjs_min$12 = __toESM(require_dayjs_min(), 1);
function useDatesState({ type, level, value, defaultValue, onChange, allowSingleDateInRange, allowDeselect, onMouseLeave }) {
	const [_value, setValue] = useUncontrolledDates({
		type,
		value,
		defaultValue,
		onChange
	});
	const [pickedDate, setPickedDate] = (0, import_react.useState)(type === "range" ? _value[0] && !_value[1] ? _value[0] : null : null);
	const [hoveredDate, setHoveredDate] = (0, import_react.useState)(null);
	const onDateChange = (date) => {
		if (type === "range") {
			if (pickedDate && !_value[1]) {
				if ((0, import_dayjs_min$12.default)(date).isSame(pickedDate, level) && !allowSingleDateInRange) {
					setPickedDate(null);
					setHoveredDate(null);
					setValue([null, null]);
					return;
				}
				const result = [date, pickedDate];
				result.sort((a, b) => (0, import_dayjs_min$12.default)(a).isAfter((0, import_dayjs_min$12.default)(b)) ? 1 : -1);
				setValue(result);
				setHoveredDate(null);
				setPickedDate(null);
				return;
			}
			if (_value[0] && !_value[1] && (0, import_dayjs_min$12.default)(date).isSame(_value[0], level) && !allowSingleDateInRange) {
				setPickedDate(null);
				setHoveredDate(null);
				setValue([null, null]);
				return;
			}
			setValue([date, null]);
			setHoveredDate(null);
			setPickedDate(date);
			return;
		}
		if (type === "multiple") {
			if (_value.some((selected) => (0, import_dayjs_min$12.default)(selected).isSame(date, level))) setValue(_value.filter((selected) => !(0, import_dayjs_min$12.default)(selected).isSame(date, level)));
			else setValue([..._value, date]);
			return;
		}
		if (_value && allowDeselect && (0, import_dayjs_min$12.default)(date).isSame(_value, level)) setValue(null);
		else setValue(date);
	};
	const isDateInRange = (date) => {
		if (pickedDate && hoveredDate) return isInRange(date, [hoveredDate, pickedDate]);
		if (_value[0] && _value[1]) return isInRange(date, _value);
		return false;
	};
	const onRootMouseLeave = type === "range" ? (event) => {
		onMouseLeave?.(event);
		setHoveredDate(null);
	} : onMouseLeave;
	const isFirstInRange = (date) => {
		if (!_value[0]) return false;
		if ((0, import_dayjs_min$12.default)(date).isSame(_value[0], level)) return !(hoveredDate && (0, import_dayjs_min$12.default)(hoveredDate).isBefore(_value[0]));
		return false;
	};
	const isLastInRange = (date) => {
		if (_value[1]) return (0, import_dayjs_min$12.default)(date).isSame(_value[1], level);
		if (!_value[0] || !hoveredDate) return false;
		return (0, import_dayjs_min$12.default)(hoveredDate).isBefore(_value[0]) && (0, import_dayjs_min$12.default)(date).isSame(_value[0], level);
	};
	const getControlProps = (date) => {
		if (type === "range") return {
			selected: _value.some((selection) => selection && (0, import_dayjs_min$12.default)(selection).isSame(date, level)),
			inRange: isDateInRange(date),
			firstInRange: isFirstInRange(date),
			lastInRange: isLastInRange(date),
			"data-autofocus": !!_value[0] && (0, import_dayjs_min$12.default)(_value[0]).isSame(date, level) || void 0
		};
		if (type === "multiple") return {
			selected: _value.some((selection) => selection && (0, import_dayjs_min$12.default)(selection).isSame(date, level)),
			"data-autofocus": !!_value[0] && (0, import_dayjs_min$12.default)(_value[0]).isSame(date, level) || void 0
		};
		const selected = (0, import_dayjs_min$12.default)(_value).isSame(date, level);
		return {
			selected,
			"data-autofocus": selected || void 0
		};
	};
	const onHoveredDateChange = type === "range" && pickedDate ? setHoveredDate : () => {};
	(0, import_react.useEffect)(() => {
		if (type !== "range") return;
		if (_value[0] && !_value[1]) setPickedDate(_value[0]);
		else {
			const isNeitherSelected = _value[0] == null && _value[1] == null;
			const isBothSelected = _value[0] != null && _value[1] != null;
			if (isNeitherSelected || isBothSelected) {
				setPickedDate(null);
				setHoveredDate(null);
			}
		}
	}, [_value]);
	return {
		onDateChange,
		onRootMouseLeave,
		onHoveredDateChange,
		getControlProps,
		_value,
		setValue
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearPicker/YearPicker.mjs
var import_dayjs_min$11 = __toESM(require_dayjs_min(), 1);
const defaultProps$8 = { type: "default" };
const YearPicker = factory((_props, ref) => {
	const props = useProps("YearPicker", defaultProps$8, _props);
	const { classNames, styles, vars, type, defaultValue, value, onChange, __staticSelector, getYearControlProps, allowSingleDateInRange, allowDeselect, onMouseLeave, onYearSelect, __updateDateOnYearSelect,...others } = props;
	const { onDateChange, onRootMouseLeave, onHoveredDateChange, getControlProps } = useDatesState({
		type,
		level: "year",
		allowDeselect,
		allowSingleDateInRange,
		value,
		defaultValue,
		onChange,
		onMouseLeave
	});
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Calendar, {
		ref,
		minLevel: "decade",
		__updateDateOnYearSelect: __updateDateOnYearSelect ?? false,
		__staticSelector: __staticSelector || "YearPicker",
		onMouseLeave: onRootMouseLeave,
		onYearMouseEnter: (_event, date) => onHoveredDateChange(date),
		onYearSelect: (date) => {
			onDateChange(date);
			onYearSelect?.(date);
		},
		getYearControlProps: (date) => ({
			...getControlProps(date),
			...getYearControlProps?.(date)
		}),
		classNames: resolvedClassNames,
		styles: resolvedStyles,
		...others
	});
});
YearPicker.classes = Calendar.classes;
YearPicker.displayName = "@mantine/dates/YearPicker";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthPicker/MonthPicker.mjs
var import_dayjs_min$10 = __toESM(require_dayjs_min(), 1);
const defaultProps$7 = { type: "default" };
const MonthPicker = factory((_props, ref) => {
	const props = useProps("MonthPicker", defaultProps$7, _props);
	const { classNames, styles, vars, type, defaultValue, value, onChange, __staticSelector, getMonthControlProps, allowSingleDateInRange, allowDeselect, onMouseLeave, onMonthSelect, __updateDateOnMonthSelect, onLevelChange,...others } = props;
	const { onDateChange, onRootMouseLeave, onHoveredDateChange, getControlProps } = useDatesState({
		type,
		level: "month",
		allowDeselect,
		allowSingleDateInRange,
		value,
		defaultValue,
		onChange,
		onMouseLeave
	});
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Calendar, {
		ref,
		minLevel: "year",
		__updateDateOnMonthSelect: __updateDateOnMonthSelect ?? false,
		__staticSelector: __staticSelector || "MonthPicker",
		onMouseLeave: onRootMouseLeave,
		onMonthMouseEnter: (_event, date) => onHoveredDateChange(date),
		onMonthSelect: (date) => {
			onDateChange(date);
			onMonthSelect?.(date);
		},
		getMonthControlProps: (date) => ({
			...getControlProps(date),
			...getMonthControlProps?.(date)
		}),
		classNames: resolvedClassNames,
		styles: resolvedStyles,
		onLevelChange,
		...others
	});
});
MonthPicker.classes = Calendar.classes;
MonthPicker.displayName = "@mantine/dates/MonthPicker";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DatePicker/DatePicker.mjs
var import_dayjs_min$9 = __toESM(require_dayjs_min(), 1);
const defaultProps$6 = {
	type: "default",
	defaultLevel: "month",
	numberOfColumns: 1
};
const DatePicker = factory((_props, ref) => {
	const props = useProps("DatePicker", defaultProps$6, _props);
	const { classNames, styles, vars, type, defaultValue, value, onChange, __staticSelector, getDayProps, allowSingleDateInRange, allowDeselect, onMouseLeave, numberOfColumns, hideOutsideDates, __onDayMouseEnter, __onDayClick, getYearControlProps, getMonthControlProps,...others } = props;
	const { onDateChange, onRootMouseLeave, onHoveredDateChange, getControlProps, _value } = useDatesState({
		type,
		level: "day",
		allowDeselect,
		allowSingleDateInRange,
		value,
		defaultValue,
		onChange,
		onMouseLeave
	});
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Calendar, {
		ref,
		minLevel: "month",
		classNames: resolvedClassNames,
		styles: resolvedStyles,
		__staticSelector: __staticSelector || "DatePicker",
		onMouseLeave: onRootMouseLeave,
		numberOfColumns,
		hideOutsideDates: hideOutsideDates ?? numberOfColumns !== 1,
		__onDayMouseEnter: (_event, date) => {
			onHoveredDateChange(date);
			__onDayMouseEnter?.(_event, date);
		},
		__onDayClick: (_event, date) => {
			onDateChange(date);
			__onDayClick?.(_event, date);
		},
		getDayProps: (date) => ({
			...getControlProps(date),
			...getDayProps?.(date)
		}),
		getMonthControlProps: (date) => ({
			selected: typeof _value === "string" ? isSameMonth(date, _value) : false,
			...getMonthControlProps?.(date)
		}),
		getYearControlProps: (date) => ({
			selected: typeof _value === "string" ? (0, import_dayjs_min$9.default)(date).isSame(_value, "year") : false,
			...getYearControlProps?.(date)
		}),
		...others
	});
});
DatePicker.classes = Calendar.classes;
DatePicker.displayName = "@mantine/dates/DatePicker";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DateInput/date-string-parser/date-string-parser.mjs
var import_dayjs_min$8 = __toESM(require_dayjs_min(), 1);
function dateStringParser(dateString) {
	if (dateString === null) return null;
	const date = new Date(dateString);
	if (Number.isNaN(date.getTime()) || !dateString) return null;
	return (0, import_dayjs_min$8.default)(date).format("YYYY-MM-DD");
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DateInput/is-date-valid/is-date-valid.mjs
var import_dayjs_min$7 = __toESM(require_dayjs_min(), 1);
function isDateValid({ date, maxDate, minDate }) {
	if (date == null) return false;
	if (Number.isNaN(new Date(date).getTime())) return false;
	if (maxDate && (0, import_dayjs_min$7.default)(date).isAfter(maxDate, "date")) return false;
	if (minDate && (0, import_dayjs_min$7.default)(date).isBefore(minDate, "date")) return false;
	return true;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DateInput/DateInput.mjs
var import_dayjs_min$6 = __toESM(require_dayjs_min(), 1);
const defaultProps$5 = {
	valueFormat: "MMMM D, YYYY",
	fixOnBlur: true
};
const DateInput = factory((_props, ref) => {
	const props = useInputProps("DateInput", defaultProps$5, _props);
	const { inputProps, wrapperProps, value, defaultValue, onChange, clearable, clearButtonProps, popoverProps, getDayProps, locale, valueFormat, dateParser, minDate, maxDate, fixOnBlur, onFocus, onBlur, onClick, onKeyDown, readOnly, name, form, rightSection, unstyled, classNames, styles, allowDeselect, date, defaultDate, onDateChange, getMonthControlProps, getYearControlProps,...rest } = props;
	const _wrapperRef = (0, import_react.useRef)(null);
	const _dropdownRef = (0, import_react.useRef)(null);
	const [dropdownOpened, setDropdownOpened] = (0, import_react.useState)(false);
	const { calendarProps, others } = pickCalendarProps(rest);
	const ctx = useDatesContext();
	const defaultDateParser = (val) => {
		const parsedDate = (0, import_dayjs_min$6.default)(val, valueFormat, ctx.getLocale(locale)).toDate();
		return Number.isNaN(parsedDate.getTime()) ? dateStringParser(val) : (0, import_dayjs_min$6.default)(parsedDate).format("YYYY-MM-DD");
	};
	const _dateParser = dateParser || defaultDateParser;
	const _allowDeselect = allowDeselect !== void 0 ? allowDeselect : clearable;
	const formatValue$1 = (val) => val ? (0, import_dayjs_min$6.default)(val).locale(ctx.getLocale(locale)).format(valueFormat) : "";
	const [_value, setValue, controlled] = useUncontrolledDates({
		type: "default",
		value,
		defaultValue,
		onChange
	});
	const [_date, setDate] = useUncontrolledDates({
		type: "default",
		value: date,
		defaultValue: defaultValue || defaultDate,
		onChange: onDateChange
	});
	(0, import_react.useEffect)(() => {
		if (controlled && value !== null) setDate(value);
	}, [controlled, value]);
	const [inputValue, setInputValue] = (0, import_react.useState)(formatValue$1(_value));
	(0, import_react.useEffect)(() => {
		setInputValue(formatValue$1(_value));
	}, [ctx.getLocale(locale)]);
	const handleInputChange = (event) => {
		const val = event.currentTarget.value;
		setInputValue(val);
		setDropdownOpened(true);
		if (val.trim() === "" && clearable) setValue(null);
		else {
			const dateValue = _dateParser(val);
			if (isDateValid({
				date: dateValue,
				minDate,
				maxDate
			})) {
				setValue(dateValue);
				setDate(dateValue);
			}
		}
	};
	const handleInputBlur = (event) => {
		onBlur?.(event);
		setDropdownOpened(false);
		fixOnBlur && setInputValue(formatValue$1(_value));
	};
	const handleInputFocus = (event) => {
		onFocus?.(event);
		setDropdownOpened(true);
	};
	const handleInputClick = (event) => {
		onClick?.(event);
		setDropdownOpened(true);
	};
	const handleInputKeyDown = (event) => {
		if (event.key === "Escape") setDropdownOpened(false);
		onKeyDown?.(event);
	};
	const _getDayProps = (day) => ({
		...getDayProps?.(day),
		selected: (0, import_dayjs_min$6.default)(_value).isSame(day, "day"),
		onClick: (event) => {
			getDayProps?.(day).onClick?.(event);
			const val = clearable && _allowDeselect ? (0, import_dayjs_min$6.default)(_value).isSame(day, "day") ? null : day : day;
			setValue(val);
			!controlled && setInputValue(formatValue$1(val));
			setDropdownOpened(false);
		}
	});
	const _rightSection = rightSection || (clearable && _value && !readOnly ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CloseButton, {
		variant: "transparent",
		onMouseDown: (event) => event.preventDefault(),
		tabIndex: -1,
		onClick: () => {
			setValue(null);
			!controlled && setInputValue("");
			setDropdownOpened(false);
		},
		unstyled,
		size: inputProps.size || "sm",
		...clearButtonProps
	}) : null);
	useDidUpdate(() => {
		_value !== void 0 && !dropdownOpened && setInputValue(formatValue$1(_value));
	}, [_value]);
	useClickOutside(() => setDropdownOpened(false), void 0, [_wrapperRef.current, _dropdownRef.current]);
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(Input.Wrapper, {
		...wrapperProps,
		__staticSelector: "DateInput",
		ref: _wrapperRef,
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Popover, {
			opened: dropdownOpened,
			trapFocus: false,
			position: "bottom-start",
			disabled: readOnly,
			withRoles: false,
			unstyled,
			...popoverProps,
			children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(Popover.Target, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Input, {
				"data-dates-input": true,
				"data-read-only": readOnly || void 0,
				autoComplete: "off",
				ref,
				value: inputValue,
				onChange: handleInputChange,
				onBlur: handleInputBlur,
				onFocus: handleInputFocus,
				onClick: handleInputClick,
				onKeyDown: handleInputKeyDown,
				readOnly,
				rightSection: _rightSection,
				...inputProps,
				...others,
				__staticSelector: "DateInput"
			}) }), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Popover.Dropdown, {
				onMouseDown: (event) => event.preventDefault(),
				"data-dates-dropdown": true,
				ref: _dropdownRef,
				children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Calendar, {
					__staticSelector: "DateInput",
					...calendarProps,
					classNames,
					styles,
					unstyled,
					__preventFocus: true,
					minDate,
					maxDate,
					locale,
					getDayProps: _getDayProps,
					size: inputProps.size,
					date: _date,
					onDateChange: setDate,
					getMonthControlProps: (date2) => ({
						selected: typeof _value === "string" ? isSameMonth(date2, _value) : false,
						...getMonthControlProps?.(date2)
					}),
					getYearControlProps: (date2) => ({
						selected: typeof _value === "string" ? (0, import_dayjs_min$6.default)(date2).isSame(_value, "year") : false,
						...getYearControlProps?.(date2)
					})
				})
			})]
		})
	}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HiddenDatesInput, {
		name,
		form,
		value: _value,
		type: "default"
	})] });
});
DateInput.classes = {
	...Input.classes,
	...Calendar.classes
};
DateInput.displayName = "@mantine/dates/DateInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DateTimePicker/get-min-max-time/get-min-max-time.mjs
var import_dayjs_min$5 = __toESM(require_dayjs_min(), 1);
function getMinTime({ minDate, value }) {
	const minTime = minDate ? (0, import_dayjs_min$5.default)(minDate).format("HH:mm:ss") : null;
	return value && minDate && value === minDate ? minTime != null ? minTime : void 0 : void 0;
}
function getMaxTime({ maxDate, value }) {
	const maxTime = maxDate ? (0, import_dayjs_min$5.default)(maxDate).format("HH:mm:ss") : null;
	return value && maxDate && value === maxDate ? maxTime != null ? maxTime : void 0 : void 0;
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DateTimePicker/DateTimePicker.module.css.mjs
var classes$1 = {
	"timeWrapper": "m_208d2562",
	"timeInput": "m_62ee059"
};

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DateTimePicker/DateTimePicker.mjs
var import_dayjs_min$4 = __toESM(require_dayjs_min(), 1);
const defaultProps$4 = { dropdownType: "popover" };
const DateTimePicker = factory((_props, ref) => {
	const props = useProps("DateTimePicker", defaultProps$4, _props);
	const { value, defaultValue, onChange, valueFormat, locale, classNames, styles, unstyled, timePickerProps, submitButtonProps, withSeconds, level, defaultLevel, size, variant, dropdownType, vars, minDate, maxDate,...rest } = props;
	const getStyles = useStyles({
		name: "DateTimePicker",
		classes: classes$1,
		props,
		classNames,
		styles,
		unstyled,
		vars
	});
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const _valueFormat = valueFormat || (withSeconds ? "DD/MM/YYYY HH:mm:ss" : "DD/MM/YYYY HH:mm");
	const timePickerRef = (0, import_react.useRef)(null);
	const timePickerRefMerged = useMergedRef(timePickerRef, timePickerProps?.hoursRef);
	const { calendarProps: { allowSingleDateInRange,...calendarProps }, others } = pickCalendarProps(rest);
	const ctx = useDatesContext();
	const [_value, setValue] = useUncontrolledDates({
		type: "default",
		value,
		defaultValue,
		onChange,
		withTime: true
	});
	const formatTime = (dateValue) => dateValue ? (0, import_dayjs_min$4.default)(dateValue).format(withSeconds ? "HH:mm:ss" : "HH:mm") : "";
	const [timeValue, setTimeValue] = (0, import_react.useState)(formatTime(_value));
	const [currentLevel, setCurrentLevel] = (0, import_react.useState)(level || defaultLevel || "month");
	const [dropdownOpened, dropdownHandlers] = useDisclosure(false);
	const formattedValue = _value ? (0, import_dayjs_min$4.default)(_value).locale(ctx.getLocale(locale)).format(_valueFormat) : "";
	const handleTimeChange = (timeString) => {
		timePickerProps?.onChange?.(timeString);
		setTimeValue(timeString);
		if (timeString) setValue(assignTime(_value, timeString));
	};
	const handleDateChange = (date) => {
		if (date) setValue(assignTime(clampDate(minDate, maxDate, date), timeValue));
		timePickerRef.current?.focus();
	};
	const handleTimeInputKeyDown = (event) => {
		if (event.key === "Enter") {
			event.preventDefault();
			dropdownHandlers.close();
		}
	};
	useDidUpdate(() => {
		if (!dropdownOpened) setTimeValue(formatTime(_value));
	}, [_value, dropdownOpened]);
	useDidUpdate(() => {
		if (dropdownOpened) setCurrentLevel("month");
	}, [dropdownOpened]);
	const __stopPropagation = dropdownType === "popover";
	const handleDropdownClose = () => {
		const clamped = clampDate(minDate, maxDate, _value);
		if (_value && _value !== clamped) setValue(clampDate(minDate, maxDate, _value));
	};
	return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(PickerInputBase, {
		formattedValue,
		dropdownOpened: !rest.disabled ? dropdownOpened : false,
		dropdownHandlers,
		classNames: resolvedClassNames,
		styles: resolvedStyles,
		unstyled,
		ref,
		onClear: () => setValue(null),
		shouldClear: !!_value,
		value: _value,
		size,
		variant,
		dropdownType,
		...others,
		type: "default",
		__staticSelector: "DateTimePicker",
		onDropdownClose: handleDropdownClose,
		withTime: true,
		children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(DatePicker, {
			...calendarProps,
			maxDate,
			minDate,
			size,
			variant,
			type: "default",
			value: _value,
			defaultDate: _value,
			onChange: handleDateChange,
			locale,
			classNames: resolvedClassNames,
			styles: resolvedStyles,
			unstyled,
			__staticSelector: "DateTimePicker",
			__stopPropagation,
			level,
			defaultLevel,
			onLevelChange: (_level) => {
				setCurrentLevel(_level);
				calendarProps.onLevelChange?.(_level);
			}
		}), currentLevel === "month" && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
			...getStyles("timeWrapper"),
			children: [/* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimePicker, {
				value: timeValue,
				withSeconds,
				unstyled,
				min: getMinTime({
					minDate,
					value: _value
				}),
				max: getMaxTime({
					maxDate,
					value: _value
				}),
				...timePickerProps,
				...getStyles("timeInput", {
					className: timePickerProps?.className,
					style: timePickerProps?.style
				}),
				onChange: handleTimeChange,
				onKeyDown: handleTimeInputKeyDown,
				size,
				"data-mantine-stop-propagation": __stopPropagation || void 0,
				hoursRef: timePickerRefMerged
			}), /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ActionIcon, {
				variant: "default",
				size: `input-${size || "sm"}`,
				...getStyles("submitButton", {
					className: submitButtonProps?.className,
					style: submitButtonProps?.style
				}),
				unstyled,
				"data-mantine-stop-propagation": __stopPropagation || void 0,
				children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CheckIcon, { size: "30%" }),
				...submitButtonProps,
				onClick: (event) => {
					submitButtonProps?.onClick?.(event);
					dropdownHandlers.close();
					handleDropdownClose();
				}
			})]
		})]
	});
});
DateTimePicker.classes = {
	...classes$1,
	...PickerInputBase.classes,
	...DatePicker.classes
};
DateTimePicker.displayName = "@mantine/dates/DateTimePicker";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/hooks/use-dates-input/use-dates-input.mjs
var import_dayjs_min$3 = __toESM(require_dayjs_min(), 1);
function useDatesInput({ type, value, defaultValue, onChange, locale, format, closeOnChange, sortDates, labelSeparator, valueFormatter }) {
	const ctx = useDatesContext();
	const [dropdownOpened, dropdownHandlers] = useDisclosure(false);
	const [_value, _setValue] = useUncontrolledDates({
		type,
		value,
		defaultValue,
		onChange
	});
	const formattedValue = getFormattedDate({
		type,
		date: _value,
		locale: ctx.getLocale(locale),
		format,
		labelSeparator: ctx.getLabelSeparator(labelSeparator),
		formatter: valueFormatter
	});
	const setValue = (val) => {
		if (closeOnChange) {
			if (type === "default") dropdownHandlers.close();
			if (type === "range" && val[0] && val[1]) dropdownHandlers.close();
		}
		if (sortDates && type === "multiple") _setValue([...val].sort((a, b) => (0, import_dayjs_min$3.default)(a).isAfter((0, import_dayjs_min$3.default)(b)) ? 1 : -1));
		else _setValue(val);
	};
	const onClear = () => setValue(type === "range" ? [null, null] : type === "multiple" ? [] : null);
	const shouldClear = type === "range" ? !!_value[0] : type === "multiple" ? _value.length > 0 : _value !== null;
	return {
		_value,
		setValue,
		onClear,
		shouldClear,
		formattedValue,
		dropdownOpened,
		dropdownHandlers
	};
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/YearPickerInput/YearPickerInput.mjs
var import_dayjs_min$2 = __toESM(require_dayjs_min(), 1);
const defaultProps$3 = {
	type: "default",
	valueFormat: "YYYY",
	closeOnChange: true,
	sortDates: true,
	dropdownType: "popover"
};
const YearPickerInput = factory((_props, ref) => {
	const props = useProps("YearPickerInput", defaultProps$3, _props);
	const { type, value, defaultValue, onChange, valueFormat, labelSeparator, locale, classNames, styles, unstyled, closeOnChange, size, variant, dropdownType, sortDates, minDate, maxDate, vars, valueFormatter,...rest } = props;
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const { calendarProps, others } = pickCalendarProps(rest);
	const { _value, setValue, formattedValue, dropdownHandlers, dropdownOpened, onClear, shouldClear } = useDatesInput({
		type,
		value,
		defaultValue,
		onChange,
		locale,
		format: valueFormat,
		labelSeparator,
		closeOnChange,
		sortDates,
		valueFormatter
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PickerInputBase, {
		formattedValue,
		dropdownOpened,
		dropdownHandlers,
		classNames: resolvedClassNames,
		styles: resolvedStyles,
		unstyled,
		ref,
		onClear,
		shouldClear,
		value: _value,
		size,
		variant,
		dropdownType,
		...others,
		type,
		__staticSelector: "YearPickerInput",
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(YearPicker, {
			...calendarProps,
			size,
			variant,
			type,
			value: _value,
			defaultDate: calendarProps.defaultDate || (Array.isArray(_value) ? _value[0] || getDefaultClampedDate({
				maxDate,
				minDate
			}) : _value || getDefaultClampedDate({
				maxDate,
				minDate
			})),
			onChange: setValue,
			locale,
			classNames: resolvedClassNames,
			styles: resolvedStyles,
			unstyled,
			__staticSelector: "YearPickerInput",
			__stopPropagation: dropdownType === "popover",
			minDate,
			maxDate
		})
	});
});
YearPickerInput.classes = {
	...PickerInputBase.classes,
	...YearPicker.classes
};
YearPickerInput.displayName = "@mantine/dates/YearPickerInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/MonthPickerInput/MonthPickerInput.mjs
var import_dayjs_min$1 = __toESM(require_dayjs_min(), 1);
const defaultProps$2 = {
	type: "default",
	valueFormat: "MMMM YYYY",
	closeOnChange: true,
	sortDates: true,
	dropdownType: "popover"
};
const MonthPickerInput = factory((_props, ref) => {
	const props = useProps("MonthPickerInput", defaultProps$2, _props);
	const { type, value, defaultValue, onChange, valueFormat, labelSeparator, locale, classNames, styles, unstyled, closeOnChange, size, variant, dropdownType, sortDates, minDate, maxDate, vars, valueFormatter,...rest } = props;
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const { calendarProps, others } = pickCalendarProps(rest);
	const { _value, setValue, formattedValue, dropdownHandlers, dropdownOpened, onClear, shouldClear } = useDatesInput({
		type,
		value,
		defaultValue,
		onChange,
		locale,
		format: valueFormat,
		labelSeparator,
		closeOnChange,
		sortDates,
		valueFormatter
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PickerInputBase, {
		formattedValue,
		dropdownOpened,
		dropdownHandlers,
		classNames: resolvedClassNames,
		styles: resolvedStyles,
		unstyled,
		ref,
		onClear,
		shouldClear,
		value: _value,
		size,
		variant,
		dropdownType,
		...others,
		type,
		__staticSelector: "MonthPickerInput",
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MonthPicker, {
			...calendarProps,
			size,
			variant,
			type,
			value: _value,
			defaultDate: calendarProps.defaultDate || (Array.isArray(_value) ? _value[0] || getDefaultClampedDate({
				maxDate,
				minDate
			}) : _value || getDefaultClampedDate({
				maxDate,
				minDate
			})),
			onChange: setValue,
			locale,
			classNames: resolvedClassNames,
			styles: resolvedStyles,
			unstyled,
			__staticSelector: "MonthPickerInput",
			__stopPropagation: dropdownType === "popover",
			minDate,
			maxDate
		})
	});
});
MonthPickerInput.classes = {
	...PickerInputBase.classes,
	...MonthPicker.classes
};
MonthPickerInput.displayName = "@mantine/dates/MonthPickerInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/DatePickerInput/DatePickerInput.mjs
var import_dayjs_min = __toESM(require_dayjs_min(), 1);
const defaultProps$1 = {
	type: "default",
	valueFormat: "MMMM D, YYYY",
	closeOnChange: true,
	sortDates: true,
	dropdownType: "popover"
};
const DatePickerInput = factory((_props, ref) => {
	const props = useProps("DatePickerInput", defaultProps$1, _props);
	const { type, value, defaultValue, onChange, valueFormat, labelSeparator, locale, classNames, styles, unstyled, closeOnChange, size, variant, dropdownType, sortDates, minDate, maxDate, vars, defaultDate, valueFormatter,...rest } = props;
	const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
		classNames,
		styles,
		props
	});
	const { calendarProps, others } = pickCalendarProps(rest);
	const { _value, setValue, formattedValue, dropdownHandlers, dropdownOpened, onClear, shouldClear } = useDatesInput({
		type,
		value,
		defaultValue,
		onChange,
		locale,
		format: valueFormat,
		labelSeparator,
		closeOnChange,
		sortDates,
		valueFormatter
	});
	const _defaultDate = Array.isArray(_value) ? _value[0] || defaultDate : _value || defaultDate;
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PickerInputBase, {
		formattedValue,
		dropdownOpened,
		dropdownHandlers,
		classNames: resolvedClassNames,
		styles: resolvedStyles,
		unstyled,
		ref,
		onClear,
		shouldClear,
		value: _value,
		size,
		variant,
		dropdownType,
		...others,
		type,
		__staticSelector: "DatePickerInput",
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DatePicker, {
			...calendarProps,
			size,
			variant,
			type,
			value: _value,
			defaultDate: _defaultDate || getDefaultClampedDate({
				maxDate,
				minDate
			}),
			onChange: setValue,
			locale,
			classNames: resolvedClassNames,
			styles: resolvedStyles,
			unstyled,
			__staticSelector: "DatePickerInput",
			__stopPropagation: dropdownType === "popover",
			minDate,
			maxDate
		})
	});
});
DatePickerInput.classes = {
	...PickerInputBase.classes,
	...DatePicker.classes
};
DatePickerInput.displayName = "@mantine/dates/DatePickerInput";

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeGrid/compare-time.mjs
function isTimeBefore(value, compareTo) {
	return timeToSeconds(value) < timeToSeconds(compareTo);
}
function isTimeAfter(value, compareTo) {
	return timeToSeconds(value) > timeToSeconds(compareTo);
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeGrid/TimeGrid.context.mjs
const [TimeGridProvider, useTimeGridContext] = createSafeContext("TimeGridProvider was not found in the component tree");

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeGrid/TimeGridControl.mjs
function TimeGridControl({ time, active, className, amPmLabels, format, withSeconds,...others }) {
	const ctx = useTimeGridContext();
	const theme = useMantineTheme();
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UnstyledButton, {
		mod: [{ active }],
		...ctx.getStyles("control", { className: clsx_default(theme.activeClassName, className) }),
		...others,
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeValue, {
			value: time,
			format,
			amPmLabels,
			withSeconds
		})
	});
}

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeGrid/TimeGrid.module.css.mjs
var classes = { "control": "m_ac3f4d63" };

//#endregion
//#region node_modules/.pnpm/@mantine+dates@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+reac_d22ba81128a82d94ef90ee78047c936f/node_modules/@mantine/dates/esm/components/TimeGrid/TimeGrid.mjs
const defaultProps = {
	simpleGridProps: {
		cols: 3,
		spacing: "xs"
	},
	format: "24h",
	amPmLabels: {
		am: "AM",
		pm: "PM"
	}
};
const varsResolver = createVarsResolver((_theme, { size, radius }) => ({ root: {
	"--time-grid-fz": getFontSize(size),
	"--time-grid-radius": getRadius(radius)
} }));
const TimeGrid = factory((_props, ref) => {
	const props = useProps("TimeGrid", defaultProps, _props);
	const { classNames, className, style, styles, unstyled, vars, data, value, defaultValue, onChange, format, withSeconds = false, amPmLabels, allowDeselect, simpleGridProps, getControlProps, minTime, maxTime, disableTime, disabled,...others } = props;
	const getStyles = useStyles({
		name: "TimeGrid",
		classes,
		props,
		className,
		style,
		classNames,
		styles,
		unstyled,
		vars,
		varsResolver
	});
	const [_value, setValue] = useUncontrolled({
		value,
		defaultValue,
		finalValue: null,
		onChange
	});
	const controls = data.map((time) => {
		const isDisabled = disabled || !!minTime && isTimeBefore(time, minTime) || !!maxTime && isTimeAfter(time, maxTime) || (Array.isArray(disableTime) ? !!disableTime.find((t) => isSameTime({
			time,
			compare: t,
			withSeconds
		})) : !!disableTime?.(time));
		return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeGridControl, {
			active: isSameTime({
				time,
				compare: _value || "",
				withSeconds
			}),
			time,
			onClick: () => {
				const nextValue = allowDeselect && (_value === null ? time === _value : isSameTime({
					time,
					compare: _value,
					withSeconds
				})) ? null : time;
				nextValue !== _value && setValue(nextValue);
			},
			format,
			amPmLabels,
			disabled: isDisabled,
			"data-disabled": isDisabled || void 0,
			withSeconds,
			...getControlProps?.(time)
		}, time);
	});
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TimeGridProvider, {
		value: { getStyles },
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box, {
			ref,
			...getStyles("root"),
			...others,
			children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SimpleGrid, {
				...simpleGridProps,
				...getStyles("simpleGrid", {
					className: simpleGridProps?.className,
					style: simpleGridProps?.style
				}),
				children: controls
			})
		})
	});
});
TimeGrid.displayName = "@mantine/dates/TimeGrid";
TimeGrid.classes = classes;

//#endregion
export { Calendar, CalendarHeader, DATES_PROVIDER_DEFAULT_SETTINGS, DateInput, DatePicker, DatePickerInput, DateTimePicker, DatesProvider, Day, DecadeLevel, DecadeLevelGroup, HiddenDatesInput, LevelsGroup, Month, MonthLevel, MonthLevelGroup, MonthPicker, MonthPickerInput, MonthsList, PickerControl, PickerInputBase, TimeGrid, TimeInput, TimePicker, TimeValue, WeekdaysRow, YearLevel, YearLevelGroup, YearPicker, YearPickerInput, YearsList, assignTime, clampDate, getDefaultClampedDate, getEndOfWeek, getFormattedDate, getMonthDays, getStartOfWeek, getTimeRange, handleControlKeyDown, isSameMonth, isTimeAfter, isTimeBefore, pickCalendarProps, toDateString, toDateTimeString, useDatesContext };
//# sourceMappingURL=@mantine_dates.js.map