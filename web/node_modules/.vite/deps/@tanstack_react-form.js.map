{"version":3,"file":"@tanstack_react-form.js","names":["normalizeError","getErrorMapKey","useLayoutEffect","useEffect","Fragment"],"sources":["../../.pnpm/@tanstack+form-core@1.12.0/node_modules/@tanstack/form-core/dist/esm/utils.js","../../.pnpm/@tanstack+form-core@1.12.0/node_modules/@tanstack/form-core/dist/esm/standardSchemaValidator.js","../../.pnpm/@tanstack+form-core@1.12.0/node_modules/@tanstack/form-core/dist/esm/metaHelper.js","../../.pnpm/@tanstack+form-core@1.12.0/node_modules/@tanstack/form-core/dist/esm/FormApi.js","../../.pnpm/@tanstack+form-core@1.12.0/node_modules/@tanstack/form-core/dist/esm/FieldApi.js","../../.pnpm/@tanstack+form-core@1.12.0/node_modules/@tanstack/form-core/dist/esm/mergeForm.js","../../.pnpm/@tanstack+form-core@1.12.0/node_modules/@tanstack/form-core/dist/esm/formOptions.js","../../.pnpm/@tanstack+react-form@1.12.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@tanstack/react-form/dist/esm/useIsomorphicLayoutEffect.js","../../.pnpm/@tanstack+react-form@1.12.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@tanstack/react-form/dist/esm/useField.js","../../.pnpm/@tanstack+react-form@1.12.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@tanstack/react-form/dist/esm/useForm.js","../../.pnpm/@tanstack+react-form@1.12.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@tanstack/react-form/dist/esm/useTransform.js","../../.pnpm/@tanstack+react-form@1.12.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@tanstack/react-form/dist/esm/createFormHook.js"],"sourcesContent":["function functionalUpdate(updater, input) {\n  return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction getBy(obj, path) {\n  const pathObj = makePathArray(path);\n  return pathObj.reduce((current, pathPart) => {\n    if (current === null) return null;\n    if (typeof current !== \"undefined\") {\n      return current[pathPart];\n    }\n    return void 0;\n  }, obj);\n}\nfunction setBy(obj, _path, updater) {\n  const path = makePathArray(_path);\n  function doSet(parent) {\n    if (!path.length) {\n      return functionalUpdate(updater, parent);\n    }\n    const key = path.shift();\n    if (typeof key === \"string\" || typeof key === \"number\" && !Array.isArray(parent)) {\n      if (typeof parent === \"object\") {\n        if (parent === null) {\n          parent = {};\n        }\n        return {\n          ...parent,\n          [key]: doSet(parent[key])\n        };\n      }\n      return {\n        [key]: doSet()\n      };\n    }\n    if (Array.isArray(parent) && typeof key === \"number\") {\n      const prefix = parent.slice(0, key);\n      return [\n        ...prefix.length ? prefix : new Array(key),\n        doSet(parent[key]),\n        ...parent.slice(key + 1)\n      ];\n    }\n    return [...new Array(key), doSet()];\n  }\n  return doSet(obj);\n}\nfunction deleteBy(obj, _path) {\n  const path = makePathArray(_path);\n  function doDelete(parent) {\n    if (!parent) return;\n    if (path.length === 1) {\n      const finalPath = path[0];\n      if (Array.isArray(parent) && typeof finalPath === \"number\") {\n        return parent.filter((_, i) => i !== finalPath);\n      }\n      const { [finalPath]: remove, ...rest } = parent;\n      return rest;\n    }\n    const key = path.shift();\n    if (typeof key === \"string\") {\n      if (typeof parent === \"object\") {\n        return {\n          ...parent,\n          [key]: doDelete(parent[key])\n        };\n      }\n    }\n    if (typeof key === \"number\") {\n      if (Array.isArray(parent)) {\n        if (key >= parent.length) {\n          return parent;\n        }\n        const prefix = parent.slice(0, key);\n        return [\n          ...prefix.length ? prefix : new Array(key),\n          doDelete(parent[key]),\n          ...parent.slice(key + 1)\n        ];\n      }\n    }\n    throw new Error(\"It seems we have created an infinite loop in deleteBy. \");\n  }\n  return doDelete(obj);\n}\nconst reLineOfOnlyDigits = /^(\\d+)$/gm;\nconst reDigitsBetweenDots = /\\.(\\d+)(?=\\.)/gm;\nconst reStartWithDigitThenDot = /^(\\d+)\\./gm;\nconst reDotWithDigitsToEnd = /\\.(\\d+$)/gm;\nconst reMultipleDots = /\\.{2,}/gm;\nconst intPrefix = \"__int__\";\nconst intReplace = `${intPrefix}$1`;\nfunction makePathArray(str) {\n  if (Array.isArray(str)) {\n    return [...str];\n  }\n  if (typeof str !== \"string\") {\n    throw new Error(\"Path must be a string.\");\n  }\n  return str.replace(/(^\\[)|]/gm, \"\").replace(/\\[/g, \".\").replace(reLineOfOnlyDigits, intReplace).replace(reDigitsBetweenDots, `.${intReplace}.`).replace(reStartWithDigitThenDot, `${intReplace}.`).replace(reDotWithDigitsToEnd, `.${intReplace}`).replace(reMultipleDots, \".\").split(\".\").map((d) => {\n    if (d.indexOf(intPrefix) === 0) {\n      return parseInt(d.substring(intPrefix.length), 10);\n    }\n    return d;\n  });\n}\nfunction isNonEmptyArray(obj) {\n  return !(Array.isArray(obj) && obj.length === 0);\n}\nfunction getAsyncValidatorArray(cause, options) {\n  const { asyncDebounceMs } = options;\n  const {\n    onChangeAsync,\n    onBlurAsync,\n    onSubmitAsync,\n    onBlurAsyncDebounceMs,\n    onChangeAsyncDebounceMs\n  } = options.validators || {};\n  const defaultDebounceMs = asyncDebounceMs ?? 0;\n  const changeValidator = {\n    cause: \"change\",\n    validate: onChangeAsync,\n    debounceMs: onChangeAsyncDebounceMs ?? defaultDebounceMs\n  };\n  const blurValidator = {\n    cause: \"blur\",\n    validate: onBlurAsync,\n    debounceMs: onBlurAsyncDebounceMs ?? defaultDebounceMs\n  };\n  const submitValidator = {\n    cause: \"submit\",\n    validate: onSubmitAsync,\n    debounceMs: 0\n  };\n  const noopValidator = (validator) => ({ ...validator, debounceMs: 0 });\n  switch (cause) {\n    case \"submit\":\n      return [\n        noopValidator(changeValidator),\n        noopValidator(blurValidator),\n        submitValidator\n      ];\n    case \"blur\":\n      return [blurValidator];\n    case \"change\":\n      return [changeValidator];\n    case \"server\":\n    default:\n      return [];\n  }\n}\nfunction getSyncValidatorArray(cause, options) {\n  const { onChange, onBlur, onSubmit, onMount } = options.validators || {};\n  const changeValidator = { cause: \"change\", validate: onChange };\n  const blurValidator = { cause: \"blur\", validate: onBlur };\n  const submitValidator = { cause: \"submit\", validate: onSubmit };\n  const mountValidator = { cause: \"mount\", validate: onMount };\n  const serverValidator = {\n    cause: \"server\",\n    validate: () => void 0\n  };\n  switch (cause) {\n    case \"mount\":\n      return [mountValidator];\n    case \"submit\":\n      return [\n        changeValidator,\n        blurValidator,\n        submitValidator,\n        serverValidator\n      ];\n    case \"server\":\n      return [serverValidator];\n    case \"blur\":\n      return [blurValidator, serverValidator];\n    case \"change\":\n    default:\n      return [changeValidator, serverValidator];\n  }\n}\nconst isGlobalFormValidationError = (error) => {\n  return !!error && typeof error === \"object\" && \"fields\" in error;\n};\nfunction evaluate(objA, objB) {\n  if (Object.is(objA, objB)) {\n    return true;\n  }\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n  if (objA instanceof Map && objB instanceof Map) {\n    if (objA.size !== objB.size) return false;\n    for (const [k, v] of objA) {\n      if (!objB.has(k) || !Object.is(v, objB.get(k))) return false;\n    }\n    return true;\n  }\n  if (objA instanceof Set && objB instanceof Set) {\n    if (objA.size !== objB.size) return false;\n    for (const v of objA) {\n      if (!objB.has(v)) return false;\n    }\n    return true;\n  }\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  for (const key of keysA) {\n    if (!keysB.includes(key) || !evaluate(objA[key], objB[key])) {\n      return false;\n    }\n  }\n  return true;\n}\nconst determineFormLevelErrorSourceAndValue = ({\n  newFormValidatorError,\n  isPreviousErrorFromFormValidator,\n  previousErrorValue\n}) => {\n  if (newFormValidatorError) {\n    return { newErrorValue: newFormValidatorError, newSource: \"form\" };\n  }\n  if (isPreviousErrorFromFormValidator) {\n    return { newErrorValue: void 0, newSource: void 0 };\n  }\n  if (previousErrorValue) {\n    return { newErrorValue: previousErrorValue, newSource: \"field\" };\n  }\n  return { newErrorValue: void 0, newSource: void 0 };\n};\nconst determineFieldLevelErrorSourceAndValue = ({\n  formLevelError,\n  fieldLevelError\n}) => {\n  if (fieldLevelError) {\n    return { newErrorValue: fieldLevelError, newSource: \"field\" };\n  }\n  if (formLevelError) {\n    return { newErrorValue: formLevelError, newSource: \"form\" };\n  }\n  return { newErrorValue: void 0, newSource: void 0 };\n};\nexport {\n  deleteBy,\n  determineFieldLevelErrorSourceAndValue,\n  determineFormLevelErrorSourceAndValue,\n  evaluate,\n  functionalUpdate,\n  getAsyncValidatorArray,\n  getBy,\n  getSyncValidatorArray,\n  isGlobalFormValidationError,\n  isNonEmptyArray,\n  makePathArray,\n  setBy\n};\n//# sourceMappingURL=utils.js.map\n","function prefixSchemaToErrors(issues) {\n  const schema = /* @__PURE__ */ new Map();\n  for (const issue of issues) {\n    const path = [...issue.path ?? []].map((segment) => {\n      const normalizedSegment = typeof segment === \"object\" ? segment.key : segment;\n      return typeof normalizedSegment === \"number\" ? `[${normalizedSegment}]` : normalizedSegment;\n    }).join(\".\").replace(/\\.\\[/g, \"[\");\n    schema.set(path, (schema.get(path) ?? []).concat(issue));\n  }\n  return Object.fromEntries(schema);\n}\nconst transformFormIssues = (issues) => {\n  const schemaErrors = prefixSchemaToErrors(issues);\n  return {\n    form: schemaErrors,\n    fields: schemaErrors\n  };\n};\nconst standardSchemaValidators = {\n  validate({\n    value,\n    validationSource\n  }, schema) {\n    const result = schema[\"~standard\"].validate(value);\n    if (result instanceof Promise) {\n      throw new Error(\"async function passed to sync validator\");\n    }\n    if (!result.issues) return;\n    if (validationSource === \"field\")\n      return result.issues;\n    return transformFormIssues(result.issues);\n  },\n  async validateAsync({\n    value,\n    validationSource\n  }, schema) {\n    const result = await schema[\"~standard\"].validate(value);\n    if (!result.issues) return;\n    if (validationSource === \"field\")\n      return result.issues;\n    return transformFormIssues(result.issues);\n  }\n};\nconst isStandardSchemaValidator = (validator) => !!validator && \"~standard\" in validator;\nexport {\n  isStandardSchemaValidator,\n  standardSchemaValidators\n};\n//# sourceMappingURL=standardSchemaValidator.js.map\n","const defaultFieldMeta = {\n  isValidating: false,\n  isTouched: false,\n  isBlurred: false,\n  isDirty: false,\n  isPristine: true,\n  isValid: true,\n  isDefaultValue: true,\n  errors: [],\n  errorMap: {},\n  errorSourceMap: {}\n};\nfunction metaHelper(formApi) {\n  function handleArrayFieldMetaShift(field, index, mode, secondIndex) {\n    const affectedFields = getAffectedFields(field, index, mode, secondIndex);\n    const handlers = {\n      insert: () => handleInsertMode(affectedFields, field, index),\n      remove: () => handleRemoveMode(affectedFields),\n      swap: () => secondIndex !== void 0 && handleSwapMode(affectedFields, field, index, secondIndex),\n      move: () => secondIndex !== void 0 && handleMoveMode(affectedFields, field, index, secondIndex)\n    };\n    handlers[mode]();\n  }\n  function getFieldPath(field, index) {\n    return `${field}[${index}]`;\n  }\n  function getAffectedFields(field, index, mode, secondIndex) {\n    const affectedFieldKeys = [getFieldPath(field, index)];\n    if (mode === \"swap\") {\n      affectedFieldKeys.push(getFieldPath(field, secondIndex));\n    } else if (mode === \"move\") {\n      const [startIndex, endIndex] = [\n        Math.min(index, secondIndex),\n        Math.max(index, secondIndex)\n      ];\n      for (let i = startIndex; i <= endIndex; i++) {\n        affectedFieldKeys.push(getFieldPath(field, i));\n      }\n    } else {\n      const currentValue = formApi.getFieldValue(field);\n      const fieldItems = Array.isArray(currentValue) ? currentValue.length : 0;\n      for (let i = index + 1; i < fieldItems; i++) {\n        affectedFieldKeys.push(getFieldPath(field, i));\n      }\n    }\n    return Object.keys(formApi.fieldInfo).filter(\n      (fieldKey) => affectedFieldKeys.some((key) => fieldKey.startsWith(key))\n    );\n  }\n  function updateIndex(fieldKey, direction) {\n    return fieldKey.replace(/\\[(\\d+)\\]/, (_, num) => {\n      const currIndex = parseInt(num, 10);\n      const newIndex = direction === \"up\" ? currIndex + 1 : Math.max(0, currIndex - 1);\n      return `[${newIndex}]`;\n    });\n  }\n  function shiftMeta(fields, direction) {\n    const sortedFields = direction === \"up\" ? fields : [...fields].reverse();\n    sortedFields.forEach((fieldKey) => {\n      const nextFieldKey = updateIndex(fieldKey.toString(), direction);\n      const nextFieldMeta = formApi.getFieldMeta(nextFieldKey);\n      if (nextFieldMeta) {\n        formApi.setFieldMeta(fieldKey, nextFieldMeta);\n      } else {\n        formApi.setFieldMeta(fieldKey, getEmptyFieldMeta());\n      }\n    });\n  }\n  const getEmptyFieldMeta = () => defaultFieldMeta;\n  const handleInsertMode = (fields, field, insertIndex) => {\n    shiftMeta(fields, \"down\");\n    fields.forEach((fieldKey) => {\n      if (fieldKey.toString().startsWith(getFieldPath(field, insertIndex))) {\n        formApi.setFieldMeta(fieldKey, getEmptyFieldMeta());\n      }\n    });\n  };\n  const handleRemoveMode = (fields) => {\n    shiftMeta(fields, \"up\");\n  };\n  const handleMoveMode = (fields, field, fromIndex, toIndex) => {\n    const fromFields = new Map(\n      Object.keys(formApi.fieldInfo).filter(\n        (fieldKey) => fieldKey.startsWith(getFieldPath(field, fromIndex))\n      ).map((fieldKey) => [\n        fieldKey,\n        formApi.getFieldMeta(fieldKey)\n      ])\n    );\n    shiftMeta(fields, fromIndex < toIndex ? \"up\" : \"down\");\n    Object.keys(formApi.fieldInfo).filter((fieldKey) => fieldKey.startsWith(getFieldPath(field, toIndex))).forEach((fieldKey) => {\n      const fromKey = fieldKey.replace(\n        getFieldPath(field, toIndex),\n        getFieldPath(field, fromIndex)\n      );\n      const fromMeta = fromFields.get(fromKey);\n      if (fromMeta) {\n        formApi.setFieldMeta(fieldKey, fromMeta);\n      }\n    });\n  };\n  const handleSwapMode = (fields, field, index, secondIndex) => {\n    fields.forEach((fieldKey) => {\n      if (!fieldKey.toString().startsWith(getFieldPath(field, index))) return;\n      const swappedKey = fieldKey.toString().replace(\n        getFieldPath(field, index),\n        getFieldPath(field, secondIndex)\n      );\n      const [meta1, meta2] = [\n        formApi.getFieldMeta(fieldKey),\n        formApi.getFieldMeta(swappedKey)\n      ];\n      if (meta1) formApi.setFieldMeta(swappedKey, meta1);\n      if (meta2) formApi.setFieldMeta(fieldKey, meta2);\n    });\n  };\n  return { handleArrayFieldMetaShift };\n}\nexport {\n  defaultFieldMeta,\n  metaHelper\n};\n//# sourceMappingURL=metaHelper.js.map\n","import { batch, Store, Derived } from \"@tanstack/store\";\nimport { evaluate, getSyncValidatorArray, determineFormLevelErrorSourceAndValue, getAsyncValidatorArray, getBy, functionalUpdate, setBy, deleteBy, isNonEmptyArray, isGlobalFormValidationError } from \"./utils.js\";\nimport { standardSchemaValidators, isStandardSchemaValidator } from \"./standardSchemaValidator.js\";\nimport { defaultFieldMeta, metaHelper } from \"./metaHelper.js\";\nfunction getDefaultFormState(defaultState) {\n  return {\n    values: defaultState.values ?? {},\n    errorMap: defaultState.errorMap ?? {},\n    fieldMetaBase: defaultState.fieldMetaBase ?? {},\n    isSubmitted: defaultState.isSubmitted ?? false,\n    isSubmitting: defaultState.isSubmitting ?? false,\n    isValidating: defaultState.isValidating ?? false,\n    submissionAttempts: defaultState.submissionAttempts ?? 0,\n    isSubmitSuccessful: defaultState.isSubmitSuccessful ?? false,\n    validationMetaMap: defaultState.validationMetaMap ?? {\n      onChange: void 0,\n      onBlur: void 0,\n      onSubmit: void 0,\n      onMount: void 0,\n      onServer: void 0\n    }\n  };\n}\nclass FormApi {\n  /**\n   * Constructs a new `FormApi` instance with the given form options.\n   */\n  constructor(opts) {\n    var _a;\n    this.options = {};\n    this.fieldInfo = {};\n    this.prevTransformArray = [];\n    this.mount = () => {\n      var _a2, _b;\n      const cleanupFieldMetaDerived = this.fieldMetaDerived.mount();\n      const cleanupStoreDerived = this.store.mount();\n      const cleanup = () => {\n        cleanupFieldMetaDerived();\n        cleanupStoreDerived();\n      };\n      (_b = (_a2 = this.options.listeners) == null ? void 0 : _a2.onMount) == null ? void 0 : _b.call(_a2, { formApi: this });\n      const { onMount } = this.options.validators || {};\n      if (!onMount) return cleanup;\n      this.validateSync(\"mount\");\n      return cleanup;\n    };\n    this.update = (options) => {\n      var _a2, _b;\n      if (!options) return;\n      const oldOptions = this.options;\n      this.options = options;\n      const shouldUpdateReeval = !!((_b = (_a2 = options.transform) == null ? void 0 : _a2.deps) == null ? void 0 : _b.some(\n        (val, i) => val !== this.prevTransformArray[i]\n      ));\n      const shouldUpdateValues = options.defaultValues && !evaluate(options.defaultValues, oldOptions.defaultValues) && !this.state.isTouched;\n      const shouldUpdateState = !evaluate(options.defaultState, oldOptions.defaultState) && !this.state.isTouched;\n      if (!shouldUpdateValues && !shouldUpdateState && !shouldUpdateReeval) return;\n      batch(() => {\n        this.baseStore.setState(\n          () => getDefaultFormState(\n            Object.assign(\n              {},\n              this.state,\n              shouldUpdateState ? options.defaultState : {},\n              shouldUpdateValues ? {\n                values: options.defaultValues\n              } : {},\n              shouldUpdateReeval ? { _force_re_eval: !this.state._force_re_eval } : {}\n            )\n          )\n        );\n      });\n    };\n    this.reset = (values, opts2) => {\n      const { fieldMeta: currentFieldMeta } = this.state;\n      const fieldMetaBase = this.resetFieldMeta(currentFieldMeta);\n      if (values && !(opts2 == null ? void 0 : opts2.keepDefaultValues)) {\n        this.options = {\n          ...this.options,\n          defaultValues: values\n        };\n      }\n      this.baseStore.setState(\n        () => {\n          var _a2;\n          return getDefaultFormState({\n            ...this.options.defaultState,\n            values: values ?? this.options.defaultValues ?? ((_a2 = this.options.defaultState) == null ? void 0 : _a2.values),\n            fieldMetaBase\n          });\n        }\n      );\n    };\n    this.validateAllFields = async (cause) => {\n      const fieldValidationPromises = [];\n      batch(() => {\n        void Object.values(this.fieldInfo).forEach(\n          (field) => {\n            if (!field.instance) return;\n            const fieldInstance = field.instance;\n            fieldValidationPromises.push(\n              // Remember, `validate` is either a sync operation or a promise\n              Promise.resolve().then(\n                () => fieldInstance.validate(cause, { skipFormValidation: true })\n              )\n            );\n            if (!field.instance.state.meta.isTouched) {\n              field.instance.setMeta((prev) => ({ ...prev, isTouched: true }));\n            }\n          }\n        );\n      });\n      const fieldErrorMapMap = await Promise.all(fieldValidationPromises);\n      return fieldErrorMapMap.flat();\n    };\n    this.validateArrayFieldsStartingFrom = async (field, index, cause) => {\n      const currentValue = this.getFieldValue(field);\n      const lastIndex = Array.isArray(currentValue) ? Math.max(currentValue.length - 1, 0) : null;\n      const fieldKeysToValidate = [`${field}[${index}]`];\n      for (let i = index + 1; i <= (lastIndex ?? 0); i++) {\n        fieldKeysToValidate.push(`${field}[${i}]`);\n      }\n      const fieldsToValidate = Object.keys(this.fieldInfo).filter(\n        (fieldKey) => fieldKeysToValidate.some((key) => fieldKey.startsWith(key))\n      );\n      const fieldValidationPromises = [];\n      batch(() => {\n        fieldsToValidate.forEach((nestedField) => {\n          fieldValidationPromises.push(\n            Promise.resolve().then(() => this.validateField(nestedField, cause))\n          );\n        });\n      });\n      const fieldErrorMapMap = await Promise.all(fieldValidationPromises);\n      return fieldErrorMapMap.flat();\n    };\n    this.validateField = (field, cause) => {\n      var _a2;\n      const fieldInstance = (_a2 = this.fieldInfo[field]) == null ? void 0 : _a2.instance;\n      if (!fieldInstance) return [];\n      if (!fieldInstance.state.meta.isTouched) {\n        fieldInstance.setMeta((prev) => ({ ...prev, isTouched: true }));\n      }\n      return fieldInstance.validate(cause);\n    };\n    this.validateSync = (cause) => {\n      const validates = getSyncValidatorArray(cause, this.options);\n      let hasErrored = false;\n      const currentValidationErrorMap = {};\n      batch(() => {\n        var _a2, _b;\n        for (const validateObj of validates) {\n          if (!validateObj.validate) continue;\n          const rawError = this.runValidator({\n            validate: validateObj.validate,\n            value: {\n              value: this.state.values,\n              formApi: this,\n              validationSource: \"form\"\n            },\n            type: \"validate\"\n          });\n          const { formError, fieldErrors } = normalizeError(rawError);\n          const errorMapKey = getErrorMapKey(validateObj.cause);\n          for (const field of Object.keys(\n            this.state.fieldMeta\n          )) {\n            const fieldMeta = this.getFieldMeta(field);\n            if (!fieldMeta) continue;\n            const {\n              errorMap: currentErrorMap,\n              errorSourceMap: currentErrorMapSource\n            } = fieldMeta;\n            const newFormValidatorError = fieldErrors == null ? void 0 : fieldErrors[field];\n            const { newErrorValue, newSource } = determineFormLevelErrorSourceAndValue({\n              newFormValidatorError,\n              isPreviousErrorFromFormValidator: (\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                (currentErrorMapSource == null ? void 0 : currentErrorMapSource[errorMapKey]) === \"form\"\n              ),\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n              previousErrorValue: currentErrorMap == null ? void 0 : currentErrorMap[errorMapKey]\n            });\n            if (newSource === \"form\") {\n              currentValidationErrorMap[field] = {\n                ...currentValidationErrorMap[field],\n                [errorMapKey]: newFormValidatorError\n              };\n            }\n            if (\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n              (currentErrorMap == null ? void 0 : currentErrorMap[errorMapKey]) !== newErrorValue\n            ) {\n              this.setFieldMeta(field, (prev) => ({\n                ...prev,\n                errorMap: {\n                  ...prev.errorMap,\n                  [errorMapKey]: newErrorValue\n                },\n                errorSourceMap: {\n                  ...prev.errorSourceMap,\n                  [errorMapKey]: newSource\n                }\n              }));\n            }\n          }\n          if (((_a2 = this.state.errorMap) == null ? void 0 : _a2[errorMapKey]) !== formError) {\n            this.baseStore.setState((prev) => ({\n              ...prev,\n              errorMap: {\n                ...prev.errorMap,\n                [errorMapKey]: formError\n              }\n            }));\n          }\n          if (formError || fieldErrors) {\n            hasErrored = true;\n          }\n        }\n        const submitErrKey = getErrorMapKey(\"submit\");\n        if (\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          ((_b = this.state.errorMap) == null ? void 0 : _b[submitErrKey]) && cause !== \"submit\" && !hasErrored\n        ) {\n          this.baseStore.setState((prev) => ({\n            ...prev,\n            errorMap: {\n              ...prev.errorMap,\n              [submitErrKey]: void 0\n            }\n          }));\n        }\n      });\n      return { hasErrored, fieldsErrorMap: currentValidationErrorMap };\n    };\n    this.validateAsync = async (cause) => {\n      const validates = getAsyncValidatorArray(cause, this.options);\n      if (!this.state.isFormValidating) {\n        this.baseStore.setState((prev) => ({ ...prev, isFormValidating: true }));\n      }\n      const promises = [];\n      let fieldErrorsFromFormValidators;\n      for (const validateObj of validates) {\n        if (!validateObj.validate) continue;\n        const key = getErrorMapKey(validateObj.cause);\n        const fieldValidatorMeta = this.state.validationMetaMap[key];\n        fieldValidatorMeta == null ? void 0 : fieldValidatorMeta.lastAbortController.abort();\n        const controller = new AbortController();\n        this.state.validationMetaMap[key] = {\n          lastAbortController: controller\n        };\n        promises.push(\n          new Promise(async (resolve) => {\n            let rawError;\n            try {\n              rawError = await new Promise((rawResolve, rawReject) => {\n                setTimeout(async () => {\n                  if (controller.signal.aborted) return rawResolve(void 0);\n                  try {\n                    rawResolve(\n                      await this.runValidator({\n                        validate: validateObj.validate,\n                        value: {\n                          value: this.state.values,\n                          formApi: this,\n                          validationSource: \"form\",\n                          signal: controller.signal\n                        },\n                        type: \"validateAsync\"\n                      })\n                    );\n                  } catch (e) {\n                    rawReject(e);\n                  }\n                }, validateObj.debounceMs);\n              });\n            } catch (e) {\n              rawError = e;\n            }\n            const { formError, fieldErrors: fieldErrorsFromNormalizeError } = normalizeError(rawError);\n            if (fieldErrorsFromNormalizeError) {\n              fieldErrorsFromFormValidators = fieldErrorsFromFormValidators ? {\n                ...fieldErrorsFromFormValidators,\n                ...fieldErrorsFromNormalizeError\n              } : fieldErrorsFromNormalizeError;\n            }\n            const errorMapKey = getErrorMapKey(validateObj.cause);\n            for (const field of Object.keys(\n              this.state.fieldMeta\n            )) {\n              const fieldMeta = this.getFieldMeta(field);\n              if (!fieldMeta) continue;\n              const {\n                errorMap: currentErrorMap,\n                errorSourceMap: currentErrorMapSource\n              } = fieldMeta;\n              const newFormValidatorError = fieldErrorsFromFormValidators == null ? void 0 : fieldErrorsFromFormValidators[field];\n              const { newErrorValue, newSource } = determineFormLevelErrorSourceAndValue({\n                newFormValidatorError,\n                isPreviousErrorFromFormValidator: (\n                  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                  (currentErrorMapSource == null ? void 0 : currentErrorMapSource[errorMapKey]) === \"form\"\n                ),\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                previousErrorValue: currentErrorMap == null ? void 0 : currentErrorMap[errorMapKey]\n              });\n              if (\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                (currentErrorMap == null ? void 0 : currentErrorMap[errorMapKey]) !== newErrorValue\n              ) {\n                this.setFieldMeta(field, (prev) => ({\n                  ...prev,\n                  errorMap: {\n                    ...prev.errorMap,\n                    [errorMapKey]: newErrorValue\n                  },\n                  errorSourceMap: {\n                    ...prev.errorSourceMap,\n                    [errorMapKey]: newSource\n                  }\n                }));\n              }\n            }\n            this.baseStore.setState((prev) => ({\n              ...prev,\n              errorMap: {\n                ...prev.errorMap,\n                [errorMapKey]: formError\n              }\n            }));\n            resolve(\n              fieldErrorsFromFormValidators ? { fieldErrors: fieldErrorsFromFormValidators, errorMapKey } : void 0\n            );\n          })\n        );\n      }\n      let results = [];\n      const fieldsErrorMap = {};\n      if (promises.length) {\n        results = await Promise.all(promises);\n        for (const fieldValidationResult of results) {\n          if (fieldValidationResult == null ? void 0 : fieldValidationResult.fieldErrors) {\n            const { errorMapKey } = fieldValidationResult;\n            for (const [field, fieldError] of Object.entries(\n              fieldValidationResult.fieldErrors\n            )) {\n              const oldErrorMap = fieldsErrorMap[field] || {};\n              const newErrorMap = {\n                ...oldErrorMap,\n                [errorMapKey]: fieldError\n              };\n              fieldsErrorMap[field] = newErrorMap;\n            }\n          }\n        }\n      }\n      this.baseStore.setState((prev) => ({\n        ...prev,\n        isFormValidating: false\n      }));\n      return fieldsErrorMap;\n    };\n    this.validate = (cause) => {\n      const { hasErrored, fieldsErrorMap } = this.validateSync(cause);\n      if (hasErrored && !this.options.asyncAlways) {\n        return fieldsErrorMap;\n      }\n      return this.validateAsync(cause);\n    };\n    this.getFieldValue = (field) => getBy(this.state.values, field);\n    this.getFieldMeta = (field) => {\n      return this.state.fieldMeta[field];\n    };\n    this.getFieldInfo = (field) => {\n      var _a2;\n      return (_a2 = this.fieldInfo)[field] || (_a2[field] = {\n        instance: null,\n        validationMetaMap: {\n          onChange: void 0,\n          onBlur: void 0,\n          onSubmit: void 0,\n          onMount: void 0,\n          onServer: void 0\n        }\n      });\n    };\n    this.setFieldMeta = (field, updater) => {\n      this.baseStore.setState((prev) => {\n        return {\n          ...prev,\n          fieldMetaBase: {\n            ...prev.fieldMetaBase,\n            [field]: functionalUpdate(\n              updater,\n              prev.fieldMetaBase[field]\n            )\n          }\n        };\n      });\n    };\n    this.resetFieldMeta = (fieldMeta) => {\n      return Object.keys(fieldMeta).reduce(\n        (acc, key) => {\n          const fieldKey = key;\n          acc[fieldKey] = defaultFieldMeta;\n          return acc;\n        },\n        {}\n      );\n    };\n    this.setFieldValue = (field, updater, opts2) => {\n      const dontUpdateMeta = (opts2 == null ? void 0 : opts2.dontUpdateMeta) ?? false;\n      batch(() => {\n        if (!dontUpdateMeta) {\n          this.setFieldMeta(field, (prev) => ({\n            ...prev,\n            isTouched: true,\n            isDirty: true,\n            errorMap: {\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n              ...prev == null ? void 0 : prev.errorMap,\n              onMount: void 0\n            }\n          }));\n        }\n        this.baseStore.setState((prev) => {\n          return {\n            ...prev,\n            values: setBy(prev.values, field, updater)\n          };\n        });\n      });\n    };\n    this.deleteField = (field) => {\n      const subFieldsToDelete = Object.keys(this.fieldInfo).filter((f) => {\n        const fieldStr = field.toString();\n        return f !== fieldStr && f.startsWith(fieldStr);\n      });\n      const fieldsToDelete = [...subFieldsToDelete, field];\n      this.baseStore.setState((prev) => {\n        const newState = { ...prev };\n        fieldsToDelete.forEach((f) => {\n          newState.values = deleteBy(newState.values, f);\n          delete this.fieldInfo[f];\n          delete newState.fieldMetaBase[f];\n        });\n        return newState;\n      });\n    };\n    this.pushFieldValue = (field, value, opts2) => {\n      this.setFieldValue(\n        field,\n        (prev) => [...Array.isArray(prev) ? prev : [], value],\n        opts2\n      );\n      this.validateField(field, \"change\");\n    };\n    this.insertFieldValue = async (field, index, value, opts2) => {\n      this.setFieldValue(\n        field,\n        (prev) => {\n          return [\n            ...prev.slice(0, index),\n            value,\n            ...prev.slice(index)\n          ];\n        },\n        opts2\n      );\n      await this.validateField(field, \"change\");\n      metaHelper(this).handleArrayFieldMetaShift(field, index, \"insert\");\n      await this.validateArrayFieldsStartingFrom(field, index, \"change\");\n    };\n    this.replaceFieldValue = async (field, index, value, opts2) => {\n      this.setFieldValue(\n        field,\n        (prev) => {\n          return prev.map(\n            (d, i) => i === index ? value : d\n          );\n        },\n        opts2\n      );\n      await this.validateField(field, \"change\");\n      await this.validateArrayFieldsStartingFrom(field, index, \"change\");\n    };\n    this.removeFieldValue = async (field, index, opts2) => {\n      const fieldValue = this.getFieldValue(field);\n      const lastIndex = Array.isArray(fieldValue) ? Math.max(fieldValue.length - 1, 0) : null;\n      this.setFieldValue(\n        field,\n        (prev) => {\n          return prev.filter(\n            (_d, i) => i !== index\n          );\n        },\n        opts2\n      );\n      metaHelper(this).handleArrayFieldMetaShift(field, index, \"remove\");\n      if (lastIndex !== null) {\n        const start = `${field}[${lastIndex}]`;\n        this.deleteField(start);\n      }\n      await this.validateField(field, \"change\");\n      await this.validateArrayFieldsStartingFrom(field, index, \"change\");\n    };\n    this.swapFieldValues = (field, index1, index2, opts2) => {\n      this.setFieldValue(\n        field,\n        (prev) => {\n          const prev1 = prev[index1];\n          const prev2 = prev[index2];\n          return setBy(setBy(prev, `${index1}`, prev2), `${index2}`, prev1);\n        },\n        opts2\n      );\n      metaHelper(this).handleArrayFieldMetaShift(field, index1, \"swap\", index2);\n      this.validateField(field, \"change\");\n      this.validateField(`${field}[${index1}]`, \"change\");\n      this.validateField(`${field}[${index2}]`, \"change\");\n    };\n    this.moveFieldValues = (field, index1, index2, opts2) => {\n      this.setFieldValue(\n        field,\n        (prev) => {\n          prev.splice(index2, 0, prev.splice(index1, 1)[0]);\n          return prev;\n        },\n        opts2\n      );\n      metaHelper(this).handleArrayFieldMetaShift(field, index1, \"move\", index2);\n      this.validateField(field, \"change\");\n      this.validateField(`${field}[${index1}]`, \"change\");\n      this.validateField(`${field}[${index2}]`, \"change\");\n    };\n    this.clearFieldValues = (field, opts2) => {\n      const fieldValue = this.getFieldValue(field);\n      const lastIndex = Array.isArray(fieldValue) ? Math.max(fieldValue.length - 1, 0) : null;\n      this.setFieldValue(field, [], opts2);\n      if (lastIndex !== null) {\n        for (let i = 0; i <= lastIndex; i++) {\n          const fieldKey = `${field}[${i}]`;\n          this.deleteField(fieldKey);\n        }\n      }\n      this.validateField(field, \"change\");\n    };\n    this.resetField = (field) => {\n      this.baseStore.setState((prev) => {\n        return {\n          ...prev,\n          fieldMetaBase: {\n            ...prev.fieldMetaBase,\n            [field]: defaultFieldMeta\n          },\n          values: this.options.defaultValues ? setBy(prev.values, field, getBy(this.options.defaultValues, field)) : prev.values\n        };\n      });\n    };\n    this.getAllErrors = () => {\n      return {\n        form: {\n          errors: this.state.errors,\n          errorMap: this.state.errorMap\n        },\n        fields: Object.entries(this.state.fieldMeta).reduce(\n          (acc, [fieldName, fieldMeta]) => {\n            if (Object.keys(fieldMeta).length && fieldMeta.errors.length) {\n              acc[fieldName] = {\n                errors: fieldMeta.errors,\n                errorMap: fieldMeta.errorMap\n              };\n            }\n            return acc;\n          },\n          {}\n        )\n      };\n    };\n    this.parseValuesWithSchema = (schema) => {\n      return standardSchemaValidators.validate(\n        { value: this.state.values, validationSource: \"form\" },\n        schema\n      );\n    };\n    this.parseValuesWithSchemaAsync = (schema) => {\n      return standardSchemaValidators.validateAsync(\n        { value: this.state.values, validationSource: \"form\" },\n        schema\n      );\n    };\n    this.baseStore = new Store(\n      getDefaultFormState({\n        ...opts == null ? void 0 : opts.defaultState,\n        values: (opts == null ? void 0 : opts.defaultValues) ?? ((_a = opts == null ? void 0 : opts.defaultState) == null ? void 0 : _a.values)\n      })\n    );\n    this.fieldMetaDerived = new Derived({\n      deps: [this.baseStore],\n      fn: ({ prevDepVals, currDepVals, prevVal: _prevVal }) => {\n        var _a2, _b, _c;\n        const prevVal = _prevVal;\n        const prevBaseStore = prevDepVals == null ? void 0 : prevDepVals[0];\n        const currBaseStore = currDepVals[0];\n        let originalMetaCount = 0;\n        const fieldMeta = {};\n        for (const fieldName of Object.keys(\n          currBaseStore.fieldMetaBase\n        )) {\n          const currBaseMeta = currBaseStore.fieldMetaBase[fieldName];\n          const prevBaseMeta = prevBaseStore == null ? void 0 : prevBaseStore.fieldMetaBase[fieldName];\n          const prevFieldInfo = prevVal == null ? void 0 : prevVal[fieldName];\n          const curFieldVal = getBy(currBaseStore.values, fieldName);\n          let fieldErrors = prevFieldInfo == null ? void 0 : prevFieldInfo.errors;\n          if (!prevBaseMeta || currBaseMeta.errorMap !== prevBaseMeta.errorMap) {\n            fieldErrors = Object.values(currBaseMeta.errorMap ?? {}).filter(\n              (val) => val !== void 0\n            );\n            const fieldInstance = (_a2 = this.getFieldInfo(fieldName)) == null ? void 0 : _a2.instance;\n            if (fieldInstance && !fieldInstance.options.disableErrorFlat) {\n              fieldErrors = fieldErrors == null ? void 0 : fieldErrors.flat(\n                1\n              );\n            }\n          }\n          const isFieldValid = !isNonEmptyArray(fieldErrors ?? []);\n          const isFieldPristine = !currBaseMeta.isDirty;\n          const isDefaultValue = evaluate(\n            curFieldVal,\n            getBy(this.options.defaultValues, fieldName)\n          ) || evaluate(\n            curFieldVal,\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            (_c = (_b = this.getFieldInfo(fieldName)) == null ? void 0 : _b.instance) == null ? void 0 : _c.options.defaultValue\n          );\n          if (prevFieldInfo && prevFieldInfo.isPristine === isFieldPristine && prevFieldInfo.isValid === isFieldValid && prevFieldInfo.isDefaultValue === isDefaultValue && prevFieldInfo.errors === fieldErrors && currBaseMeta === prevBaseMeta) {\n            fieldMeta[fieldName] = prevFieldInfo;\n            originalMetaCount++;\n            continue;\n          }\n          fieldMeta[fieldName] = {\n            ...currBaseMeta,\n            errors: fieldErrors,\n            isPristine: isFieldPristine,\n            isValid: isFieldValid,\n            isDefaultValue\n          };\n        }\n        if (!Object.keys(currBaseStore.fieldMetaBase).length) return fieldMeta;\n        if (prevVal && originalMetaCount === Object.keys(currBaseStore.fieldMetaBase).length) {\n          return prevVal;\n        }\n        return fieldMeta;\n      }\n    });\n    this.store = new Derived({\n      deps: [this.baseStore, this.fieldMetaDerived],\n      fn: ({ prevDepVals, currDepVals, prevVal: _prevVal }) => {\n        var _a2, _b, _c, _d;\n        const prevVal = _prevVal;\n        const prevBaseStore = prevDepVals == null ? void 0 : prevDepVals[0];\n        const currBaseStore = currDepVals[0];\n        const currFieldMeta = currDepVals[1];\n        const fieldMetaValues = Object.values(currFieldMeta).filter(\n          Boolean\n        );\n        const isFieldsValidating = fieldMetaValues.some(\n          (field) => field.isValidating\n        );\n        const isFieldsValid = fieldMetaValues.every((field) => field.isValid);\n        const isTouched = fieldMetaValues.some((field) => field.isTouched);\n        const isBlurred = fieldMetaValues.some((field) => field.isBlurred);\n        const isDefaultValue = fieldMetaValues.every(\n          (field) => field.isDefaultValue\n        );\n        const shouldInvalidateOnMount = (\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          isTouched && ((_a2 = currBaseStore.errorMap) == null ? void 0 : _a2.onMount)\n        );\n        const isDirty = fieldMetaValues.some((field) => field.isDirty);\n        const isPristine = !isDirty;\n        const hasOnMountError = Boolean(\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          ((_b = currBaseStore.errorMap) == null ? void 0 : _b.onMount) || // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          fieldMetaValues.some((f) => {\n            var _a3;\n            return (_a3 = f == null ? void 0 : f.errorMap) == null ? void 0 : _a3.onMount;\n          })\n        );\n        const isValidating = !!isFieldsValidating;\n        let errors = (prevVal == null ? void 0 : prevVal.errors) ?? [];\n        if (!prevBaseStore || currBaseStore.errorMap !== prevBaseStore.errorMap) {\n          errors = Object.values(currBaseStore.errorMap).reduce((prev, curr) => {\n            if (curr === void 0) return prev;\n            if (curr && isGlobalFormValidationError(curr)) {\n              prev.push(curr.form);\n              return prev;\n            }\n            prev.push(curr);\n            return prev;\n          }, []);\n        }\n        const isFormValid = errors.length === 0;\n        const isValid = isFieldsValid && isFormValid;\n        const submitInvalid = this.options.canSubmitWhenInvalid ?? false;\n        const canSubmit = currBaseStore.submissionAttempts === 0 && !isTouched && !hasOnMountError || !isValidating && !currBaseStore.isSubmitting && isValid || submitInvalid;\n        let errorMap = currBaseStore.errorMap;\n        if (shouldInvalidateOnMount) {\n          errors = errors.filter(\n            (err) => err !== currBaseStore.errorMap.onMount\n          );\n          errorMap = Object.assign(errorMap, { onMount: void 0 });\n        }\n        if (prevVal && prevBaseStore && prevVal.errorMap === errorMap && prevVal.fieldMeta === this.fieldMetaDerived.state && prevVal.errors === errors && prevVal.isFieldsValidating === isFieldsValidating && prevVal.isFieldsValid === isFieldsValid && prevVal.isFormValid === isFormValid && prevVal.isValid === isValid && prevVal.canSubmit === canSubmit && prevVal.isTouched === isTouched && prevVal.isBlurred === isBlurred && prevVal.isPristine === isPristine && prevVal.isDefaultValue === isDefaultValue && prevVal.isDirty === isDirty && evaluate(prevBaseStore, currBaseStore)) {\n          return prevVal;\n        }\n        let state = {\n          ...currBaseStore,\n          errorMap,\n          fieldMeta: this.fieldMetaDerived.state,\n          errors,\n          isFieldsValidating,\n          isFieldsValid,\n          isFormValid,\n          isValid,\n          canSubmit,\n          isTouched,\n          isBlurred,\n          isPristine,\n          isDefaultValue,\n          isDirty\n        };\n        const transformArray = ((_c = this.options.transform) == null ? void 0 : _c.deps) ?? [];\n        const shouldTransform = transformArray.length !== this.prevTransformArray.length || transformArray.some((val, i) => val !== this.prevTransformArray[i]);\n        if (shouldTransform) {\n          const newObj = Object.assign({}, this, { state });\n          (_d = this.options.transform) == null ? void 0 : _d.fn(newObj);\n          state = newObj.state;\n          this.prevTransformArray = transformArray;\n        }\n        return state;\n      }\n    });\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.update(opts || {});\n  }\n  get state() {\n    return this.store.state;\n  }\n  /**\n   * @private\n   */\n  runValidator(props) {\n    if (isStandardSchemaValidator(props.validate)) {\n      return standardSchemaValidators[props.type](\n        props.value,\n        props.validate\n      );\n    }\n    return props.validate(props.value);\n  }\n  async handleSubmit(submitMeta) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.baseStore.setState((old) => ({\n      ...old,\n      // Submission attempts mark the form as not submitted\n      isSubmitted: false,\n      // Count submission attempts\n      submissionAttempts: old.submissionAttempts + 1,\n      isSubmitSuccessful: false\n      // Reset isSubmitSuccessful at the start of submission\n    }));\n    batch(() => {\n      void Object.values(this.fieldInfo).forEach(\n        (field) => {\n          if (!field.instance) return;\n          if (!field.instance.state.meta.isTouched) {\n            field.instance.setMeta((prev) => ({ ...prev, isTouched: true }));\n          }\n        }\n      );\n    });\n    if (!this.state.canSubmit) return;\n    this.baseStore.setState((d) => ({ ...d, isSubmitting: true }));\n    const done = () => {\n      this.baseStore.setState((prev) => ({ ...prev, isSubmitting: false }));\n    };\n    await this.validateAllFields(\"submit\");\n    if (!this.state.isFieldsValid) {\n      done();\n      (_b = (_a = this.options).onSubmitInvalid) == null ? void 0 : _b.call(_a, {\n        value: this.state.values,\n        formApi: this\n      });\n      return;\n    }\n    await this.validate(\"submit\");\n    if (!this.state.isValid) {\n      done();\n      (_d = (_c = this.options).onSubmitInvalid) == null ? void 0 : _d.call(_c, {\n        value: this.state.values,\n        formApi: this\n      });\n      return;\n    }\n    batch(() => {\n      void Object.values(this.fieldInfo).forEach(\n        (field) => {\n          var _a2, _b2, _c2;\n          (_c2 = (_b2 = (_a2 = field.instance) == null ? void 0 : _a2.options.listeners) == null ? void 0 : _b2.onSubmit) == null ? void 0 : _c2.call(_b2, {\n            value: field.instance.state.value,\n            fieldApi: field.instance\n          });\n        }\n      );\n    });\n    (_f = (_e = this.options.listeners) == null ? void 0 : _e.onSubmit) == null ? void 0 : _f.call(_e, { formApi: this });\n    try {\n      await ((_h = (_g = this.options).onSubmit) == null ? void 0 : _h.call(_g, {\n        value: this.state.values,\n        formApi: this,\n        meta: submitMeta ?? this.options.onSubmitMeta\n      }));\n      batch(() => {\n        this.baseStore.setState((prev) => ({\n          ...prev,\n          isSubmitted: true,\n          isSubmitSuccessful: true\n          // Set isSubmitSuccessful to true on successful submission\n        }));\n        done();\n      });\n    } catch (err) {\n      this.baseStore.setState((prev) => ({\n        ...prev,\n        isSubmitSuccessful: false\n        // Ensure isSubmitSuccessful is false if an error occurs\n      }));\n      done();\n      throw err;\n    }\n  }\n  /**\n   * Updates the form's errorMap\n   */\n  setErrorMap(errorMap) {\n    batch(() => {\n      Object.entries(errorMap).forEach(([key, value]) => {\n        const errorMapKey = key;\n        if (isGlobalFormValidationError(value)) {\n          const { formError, fieldErrors } = normalizeError(value);\n          for (const fieldName of Object.keys(\n            this.fieldInfo\n          )) {\n            const fieldMeta = this.getFieldMeta(fieldName);\n            if (!fieldMeta) continue;\n            this.setFieldMeta(fieldName, (prev) => ({\n              ...prev,\n              errorMap: {\n                ...prev.errorMap,\n                [errorMapKey]: fieldErrors == null ? void 0 : fieldErrors[fieldName]\n              },\n              errorSourceMap: {\n                ...prev.errorSourceMap,\n                [errorMapKey]: \"form\"\n              }\n            }));\n          }\n          this.baseStore.setState((prev) => ({\n            ...prev,\n            errorMap: {\n              ...prev.errorMap,\n              [errorMapKey]: formError\n            }\n          }));\n        } else {\n          this.baseStore.setState((prev) => ({\n            ...prev,\n            errorMap: {\n              ...prev.errorMap,\n              [errorMapKey]: value\n            }\n          }));\n        }\n      });\n    });\n  }\n}\nfunction normalizeError(rawError) {\n  if (rawError) {\n    if (isGlobalFormValidationError(rawError)) {\n      const formError = normalizeError(rawError.form).formError;\n      const fieldErrors = rawError.fields;\n      return { formError, fieldErrors };\n    }\n    return { formError: rawError };\n  }\n  return { formError: void 0 };\n}\nfunction getErrorMapKey(cause) {\n  switch (cause) {\n    case \"submit\":\n      return \"onSubmit\";\n    case \"blur\":\n      return \"onBlur\";\n    case \"mount\":\n      return \"onMount\";\n    case \"server\":\n      return \"onServer\";\n    case \"change\":\n    default:\n      return \"onChange\";\n  }\n}\nexport {\n  FormApi\n};\n//# sourceMappingURL=FormApi.js.map\n","import { batch, Derived } from \"@tanstack/store\";\nimport { standardSchemaValidators, isStandardSchemaValidator } from \"./standardSchemaValidator.js\";\nimport { defaultFieldMeta } from \"./metaHelper.js\";\nimport { getBy, getSyncValidatorArray, getAsyncValidatorArray, determineFieldLevelErrorSourceAndValue } from \"./utils.js\";\nclass FieldApi {\n  /**\n   * Initializes a new `FieldApi` instance.\n   */\n  constructor(opts) {\n    this.options = {};\n    this.mount = () => {\n      var _a, _b;\n      const cleanup = this.store.mount();\n      if (this.options.defaultValue !== void 0) {\n        this.form.setFieldValue(this.name, this.options.defaultValue, {\n          dontUpdateMeta: true\n        });\n      }\n      const info = this.getInfo();\n      info.instance = this;\n      this.update(this.options);\n      const { onMount } = this.options.validators || {};\n      if (onMount) {\n        const error = this.runValidator({\n          validate: onMount,\n          value: {\n            value: this.state.value,\n            fieldApi: this,\n            validationSource: \"field\"\n          },\n          type: \"validate\"\n        });\n        if (error) {\n          this.setMeta(\n            (prev) => ({\n              ...prev,\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n              errorMap: { ...prev == null ? void 0 : prev.errorMap, onMount: error },\n              errorSourceMap: {\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                ...prev == null ? void 0 : prev.errorSourceMap,\n                onMount: \"field\"\n              }\n            })\n          );\n        }\n      }\n      (_b = (_a = this.options.listeners) == null ? void 0 : _a.onMount) == null ? void 0 : _b.call(_a, {\n        value: this.state.value,\n        fieldApi: this\n      });\n      return cleanup;\n    };\n    this.update = (opts2) => {\n      this.options = opts2;\n      const nameHasChanged = this.name !== opts2.name;\n      this.name = opts2.name;\n      if (this.state.value === void 0) {\n        const formDefault = getBy(opts2.form.options.defaultValues, opts2.name);\n        const defaultValue = opts2.defaultValue ?? formDefault;\n        if (nameHasChanged) {\n          this.setValue((val) => val || defaultValue, {\n            dontUpdateMeta: true\n          });\n        } else if (defaultValue !== void 0) {\n          this.setValue(defaultValue, {\n            dontUpdateMeta: true\n          });\n        }\n      }\n      if (this.form.getFieldMeta(this.name) === void 0) {\n        this.setMeta(this.state.meta);\n      }\n    };\n    this.getValue = () => {\n      return this.form.getFieldValue(this.name);\n    };\n    this.setValue = (updater, options) => {\n      this.form.setFieldValue(this.name, updater, options);\n      this.triggerOnChangeListener();\n      this.validate(\"change\");\n    };\n    this.getMeta = () => this.store.state.meta;\n    this.setMeta = (updater) => this.form.setFieldMeta(this.name, updater);\n    this.getInfo = () => this.form.getFieldInfo(this.name);\n    this.pushValue = (value, opts2) => {\n      this.form.pushFieldValue(this.name, value, opts2);\n      this.triggerOnChangeListener();\n    };\n    this.insertValue = (index, value, opts2) => {\n      this.form.insertFieldValue(this.name, index, value, opts2);\n      this.triggerOnChangeListener();\n    };\n    this.replaceValue = (index, value, opts2) => {\n      this.form.replaceFieldValue(this.name, index, value, opts2);\n      this.triggerOnChangeListener();\n    };\n    this.removeValue = (index, opts2) => {\n      this.form.removeFieldValue(this.name, index, opts2);\n      this.triggerOnChangeListener();\n    };\n    this.swapValues = (aIndex, bIndex, opts2) => {\n      this.form.swapFieldValues(this.name, aIndex, bIndex, opts2);\n      this.triggerOnChangeListener();\n    };\n    this.moveValue = (aIndex, bIndex, opts2) => {\n      this.form.moveFieldValues(this.name, aIndex, bIndex, opts2);\n      this.triggerOnChangeListener();\n    };\n    this.clearValues = (opts2) => {\n      this.form.clearFieldValues(this.name, opts2);\n      this.triggerOnChangeListener();\n    };\n    this.getLinkedFields = (cause) => {\n      const fields = Object.values(this.form.fieldInfo);\n      const linkedFields = [];\n      for (const field of fields) {\n        if (!field.instance) continue;\n        const { onChangeListenTo, onBlurListenTo } = field.instance.options.validators || {};\n        if (cause === \"change\" && (onChangeListenTo == null ? void 0 : onChangeListenTo.includes(this.name))) {\n          linkedFields.push(field.instance);\n        }\n        if (cause === \"blur\" && (onBlurListenTo == null ? void 0 : onBlurListenTo.includes(this.name))) {\n          linkedFields.push(field.instance);\n        }\n      }\n      return linkedFields;\n    };\n    this.validateSync = (cause, errorFromForm) => {\n      var _a;\n      const validates = getSyncValidatorArray(cause, this.options);\n      const linkedFields = this.getLinkedFields(cause);\n      const linkedFieldValidates = linkedFields.reduce(\n        (acc, field) => {\n          const fieldValidates = getSyncValidatorArray(cause, field.options);\n          fieldValidates.forEach((validate) => {\n            validate.field = field;\n          });\n          return acc.concat(fieldValidates);\n        },\n        []\n      );\n      let hasErrored = false;\n      batch(() => {\n        const validateFieldFn = (field, validateObj) => {\n          var _a2;\n          const errorMapKey = getErrorMapKey(validateObj.cause);\n          const fieldLevelError = validateObj.validate ? normalizeError(\n            field.runValidator({\n              validate: validateObj.validate,\n              value: {\n                value: field.store.state.value,\n                validationSource: \"field\",\n                fieldApi: field\n              },\n              type: \"validate\"\n            })\n          ) : void 0;\n          const formLevelError = errorFromForm[errorMapKey];\n          const { newErrorValue, newSource } = determineFieldLevelErrorSourceAndValue({\n            formLevelError,\n            fieldLevelError\n          });\n          if (((_a2 = field.state.meta.errorMap) == null ? void 0 : _a2[errorMapKey]) !== newErrorValue) {\n            field.setMeta((prev) => ({\n              ...prev,\n              errorMap: {\n                ...prev.errorMap,\n                [errorMapKey]: newErrorValue\n              },\n              errorSourceMap: {\n                ...prev.errorSourceMap,\n                [errorMapKey]: newSource\n              }\n            }));\n          }\n          if (newErrorValue) {\n            hasErrored = true;\n          }\n        };\n        for (const validateObj of validates) {\n          validateFieldFn(this, validateObj);\n        }\n        for (const fieldValitateObj of linkedFieldValidates) {\n          if (!fieldValitateObj.validate) continue;\n          validateFieldFn(fieldValitateObj.field, fieldValitateObj);\n        }\n      });\n      const submitErrKey = getErrorMapKey(\"submit\");\n      if (\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        ((_a = this.state.meta.errorMap) == null ? void 0 : _a[submitErrKey]) && cause !== \"submit\" && !hasErrored\n      ) {\n        this.setMeta((prev) => ({\n          ...prev,\n          errorMap: {\n            ...prev.errorMap,\n            [submitErrKey]: void 0\n          },\n          errorSourceMap: {\n            ...prev.errorSourceMap,\n            [submitErrKey]: void 0\n          }\n        }));\n      }\n      return { hasErrored };\n    };\n    this.validateAsync = async (cause, formValidationResultPromise) => {\n      const validates = getAsyncValidatorArray(cause, this.options);\n      const asyncFormValidationResults = await formValidationResultPromise;\n      const linkedFields = this.getLinkedFields(cause);\n      const linkedFieldValidates = linkedFields.reduce(\n        (acc, field) => {\n          const fieldValidates = getAsyncValidatorArray(cause, field.options);\n          fieldValidates.forEach((validate) => {\n            validate.field = field;\n          });\n          return acc.concat(fieldValidates);\n        },\n        []\n      );\n      if (!this.state.meta.isValidating) {\n        this.setMeta((prev) => ({ ...prev, isValidating: true }));\n      }\n      for (const linkedField of linkedFields) {\n        linkedField.setMeta((prev) => ({ ...prev, isValidating: true }));\n      }\n      const validatesPromises = [];\n      const linkedPromises = [];\n      const validateFieldAsyncFn = (field, validateObj, promises) => {\n        const errorMapKey = getErrorMapKey(validateObj.cause);\n        const fieldValidatorMeta = field.getInfo().validationMetaMap[errorMapKey];\n        fieldValidatorMeta == null ? void 0 : fieldValidatorMeta.lastAbortController.abort();\n        const controller = new AbortController();\n        this.getInfo().validationMetaMap[errorMapKey] = {\n          lastAbortController: controller\n        };\n        promises.push(\n          new Promise(async (resolve) => {\n            var _a;\n            let rawError;\n            try {\n              rawError = await new Promise((rawResolve, rawReject) => {\n                if (this.timeoutIds.validations[validateObj.cause]) {\n                  clearTimeout(this.timeoutIds.validations[validateObj.cause]);\n                }\n                this.timeoutIds.validations[validateObj.cause] = setTimeout(\n                  async () => {\n                    if (controller.signal.aborted) return rawResolve(void 0);\n                    try {\n                      rawResolve(\n                        await this.runValidator({\n                          validate: validateObj.validate,\n                          value: {\n                            value: field.store.state.value,\n                            fieldApi: field,\n                            signal: controller.signal,\n                            validationSource: \"field\"\n                          },\n                          type: \"validateAsync\"\n                        })\n                      );\n                    } catch (e) {\n                      rawReject(e);\n                    }\n                  },\n                  validateObj.debounceMs\n                );\n              });\n            } catch (e) {\n              rawError = e;\n            }\n            if (controller.signal.aborted) return resolve(void 0);\n            const fieldLevelError = normalizeError(rawError);\n            const formLevelError = (_a = asyncFormValidationResults[this.name]) == null ? void 0 : _a[errorMapKey];\n            const { newErrorValue, newSource } = determineFieldLevelErrorSourceAndValue({\n              formLevelError,\n              fieldLevelError\n            });\n            field.setMeta((prev) => {\n              return {\n                ...prev,\n                errorMap: {\n                  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                  ...prev == null ? void 0 : prev.errorMap,\n                  [errorMapKey]: newErrorValue\n                },\n                errorSourceMap: {\n                  ...prev.errorSourceMap,\n                  [errorMapKey]: newSource\n                }\n              };\n            });\n            resolve(newErrorValue);\n          })\n        );\n      };\n      for (const validateObj of validates) {\n        if (!validateObj.validate) continue;\n        validateFieldAsyncFn(this, validateObj, validatesPromises);\n      }\n      for (const fieldValitateObj of linkedFieldValidates) {\n        if (!fieldValitateObj.validate) continue;\n        validateFieldAsyncFn(\n          fieldValitateObj.field,\n          fieldValitateObj,\n          linkedPromises\n        );\n      }\n      let results = [];\n      if (validatesPromises.length || linkedPromises.length) {\n        results = await Promise.all(validatesPromises);\n        await Promise.all(linkedPromises);\n      }\n      this.setMeta((prev) => ({ ...prev, isValidating: false }));\n      for (const linkedField of linkedFields) {\n        linkedField.setMeta((prev) => ({ ...prev, isValidating: false }));\n      }\n      return results.filter(Boolean);\n    };\n    this.validate = (cause, opts2) => {\n      var _a;\n      if (!this.state.meta.isTouched) return [];\n      const { fieldsErrorMap } = (opts2 == null ? void 0 : opts2.skipFormValidation) ? { fieldsErrorMap: {} } : this.form.validateSync(cause);\n      const { hasErrored } = this.validateSync(\n        cause,\n        fieldsErrorMap[this.name] ?? {}\n      );\n      if (hasErrored && !this.options.asyncAlways) {\n        (_a = this.getInfo().validationMetaMap[getErrorMapKey(cause)]) == null ? void 0 : _a.lastAbortController.abort();\n        return this.state.meta.errors;\n      }\n      const formValidationResultPromise = (opts2 == null ? void 0 : opts2.skipFormValidation) ? Promise.resolve({}) : this.form.validateAsync(cause);\n      return this.validateAsync(cause, formValidationResultPromise);\n    };\n    this.handleChange = (updater) => {\n      this.setValue(updater);\n    };\n    this.handleBlur = () => {\n      const prevTouched = this.state.meta.isTouched;\n      if (!prevTouched) {\n        this.setMeta((prev) => ({ ...prev, isTouched: true }));\n        this.validate(\"change\");\n      }\n      if (!this.state.meta.isBlurred) {\n        this.setMeta((prev) => ({ ...prev, isBlurred: true }));\n      }\n      this.validate(\"blur\");\n      this.triggerOnBlurListener();\n    };\n    this.parseValueWithSchema = (schema) => {\n      return standardSchemaValidators.validate(\n        { value: this.state.value, validationSource: \"field\" },\n        schema\n      );\n    };\n    this.parseValueWithSchemaAsync = (schema) => {\n      return standardSchemaValidators.validateAsync(\n        { value: this.state.value, validationSource: \"field\" },\n        schema\n      );\n    };\n    this.form = opts.form;\n    this.name = opts.name;\n    this.timeoutIds = {\n      validations: {},\n      listeners: {},\n      formListeners: {}\n    };\n    this.store = new Derived({\n      deps: [this.form.store],\n      fn: () => {\n        const value = this.form.getFieldValue(this.name);\n        const meta = this.form.getFieldMeta(this.name) ?? {\n          ...defaultFieldMeta,\n          ...opts.defaultMeta\n        };\n        return {\n          value,\n          meta\n        };\n      }\n    });\n    this.options = opts;\n  }\n  /**\n   * The current field state.\n   */\n  get state() {\n    return this.store.state;\n  }\n  /**\n   * @private\n   */\n  runValidator(props) {\n    if (isStandardSchemaValidator(props.validate)) {\n      return standardSchemaValidators[props.type](\n        props.value,\n        props.validate\n      );\n    }\n    return props.validate(props.value);\n  }\n  /**\n   * Updates the field's errorMap\n   */\n  setErrorMap(errorMap) {\n    this.setMeta((prev) => ({\n      ...prev,\n      errorMap: {\n        ...prev.errorMap,\n        ...errorMap\n      }\n    }));\n  }\n  triggerOnBlurListener() {\n    var _a, _b, _c, _d, _e, _f;\n    const formDebounceMs = (_a = this.form.options.listeners) == null ? void 0 : _a.onBlurDebounceMs;\n    if (formDebounceMs && formDebounceMs > 0) {\n      if (this.timeoutIds.formListeners.blur) {\n        clearTimeout(this.timeoutIds.formListeners.blur);\n      }\n      this.timeoutIds.formListeners.blur = setTimeout(() => {\n        var _a2, _b2;\n        (_b2 = (_a2 = this.form.options.listeners) == null ? void 0 : _a2.onBlur) == null ? void 0 : _b2.call(_a2, {\n          formApi: this.form,\n          fieldApi: this\n        });\n      }, formDebounceMs);\n    } else {\n      (_c = (_b = this.form.options.listeners) == null ? void 0 : _b.onBlur) == null ? void 0 : _c.call(_b, {\n        formApi: this.form,\n        fieldApi: this\n      });\n    }\n    const fieldDebounceMs = (_d = this.options.listeners) == null ? void 0 : _d.onBlurDebounceMs;\n    if (fieldDebounceMs && fieldDebounceMs > 0) {\n      if (this.timeoutIds.listeners.blur) {\n        clearTimeout(this.timeoutIds.listeners.blur);\n      }\n      this.timeoutIds.listeners.blur = setTimeout(() => {\n        var _a2, _b2;\n        (_b2 = (_a2 = this.options.listeners) == null ? void 0 : _a2.onBlur) == null ? void 0 : _b2.call(_a2, {\n          value: this.state.value,\n          fieldApi: this\n        });\n      }, fieldDebounceMs);\n    } else {\n      (_f = (_e = this.options.listeners) == null ? void 0 : _e.onBlur) == null ? void 0 : _f.call(_e, {\n        value: this.state.value,\n        fieldApi: this\n      });\n    }\n  }\n  triggerOnChangeListener() {\n    var _a, _b, _c, _d, _e, _f;\n    const formDebounceMs = (_a = this.form.options.listeners) == null ? void 0 : _a.onChangeDebounceMs;\n    if (formDebounceMs && formDebounceMs > 0) {\n      if (this.timeoutIds.formListeners.blur) {\n        clearTimeout(this.timeoutIds.formListeners.blur);\n      }\n      this.timeoutIds.formListeners.blur = setTimeout(() => {\n        var _a2, _b2;\n        (_b2 = (_a2 = this.form.options.listeners) == null ? void 0 : _a2.onChange) == null ? void 0 : _b2.call(_a2, {\n          formApi: this.form,\n          fieldApi: this\n        });\n      }, formDebounceMs);\n    } else {\n      (_c = (_b = this.form.options.listeners) == null ? void 0 : _b.onChange) == null ? void 0 : _c.call(_b, {\n        formApi: this.form,\n        fieldApi: this\n      });\n    }\n    const fieldDebounceMs = (_d = this.options.listeners) == null ? void 0 : _d.onChangeDebounceMs;\n    if (fieldDebounceMs && fieldDebounceMs > 0) {\n      if (this.timeoutIds.listeners.change) {\n        clearTimeout(this.timeoutIds.listeners.change);\n      }\n      this.timeoutIds.listeners.change = setTimeout(() => {\n        var _a2, _b2;\n        (_b2 = (_a2 = this.options.listeners) == null ? void 0 : _a2.onChange) == null ? void 0 : _b2.call(_a2, {\n          value: this.state.value,\n          fieldApi: this\n        });\n      }, fieldDebounceMs);\n    } else {\n      (_f = (_e = this.options.listeners) == null ? void 0 : _e.onChange) == null ? void 0 : _f.call(_e, {\n        value: this.state.value,\n        fieldApi: this\n      });\n    }\n  }\n}\nfunction normalizeError(rawError) {\n  if (rawError) {\n    return rawError;\n  }\n  return void 0;\n}\nfunction getErrorMapKey(cause) {\n  switch (cause) {\n    case \"submit\":\n      return \"onSubmit\";\n    case \"blur\":\n      return \"onBlur\";\n    case \"mount\":\n      return \"onMount\";\n    case \"server\":\n      return \"onServer\";\n    case \"change\":\n    default:\n      return \"onChange\";\n  }\n}\nexport {\n  FieldApi\n};\n//# sourceMappingURL=FieldApi.js.map\n","function isValidKey(key) {\n  const dangerousProps = [\"__proto__\", \"constructor\", \"prototype\"];\n  return !dangerousProps.includes(String(key));\n}\nfunction mutateMergeDeep(target, source) {\n  if (target === null || target === void 0 || typeof target !== \"object\")\n    return {};\n  if (source === null || source === void 0 || typeof source !== \"object\")\n    return target;\n  const targetKeys = Object.keys(target);\n  const sourceKeys = Object.keys(source);\n  const keySet = /* @__PURE__ */ new Set([...targetKeys, ...sourceKeys]);\n  for (const key of keySet) {\n    if (!isValidKey(key)) continue;\n    const targetKey = key;\n    const sourceKey = key;\n    if (!Object.hasOwn(source, sourceKey)) continue;\n    const sourceValue = source[sourceKey];\n    const targetValue = target[targetKey];\n    if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {\n      Object.defineProperty(target, key, {\n        value: [...sourceValue],\n        enumerable: true,\n        writable: true,\n        configurable: true\n      });\n      continue;\n    }\n    const isTargetObj = typeof targetValue === \"object\" && targetValue !== null;\n    const isSourceObj = typeof sourceValue === \"object\" && sourceValue !== null;\n    const areObjects = isTargetObj && isSourceObj && !Array.isArray(targetValue) && !Array.isArray(sourceValue);\n    if (areObjects) {\n      mutateMergeDeep(targetValue, sourceValue);\n      continue;\n    }\n    Object.defineProperty(target, key, {\n      value: sourceValue,\n      enumerable: true,\n      writable: true,\n      configurable: true\n    });\n  }\n  return target;\n}\nfunction mergeForm(baseForm, state) {\n  mutateMergeDeep(baseForm.state, state);\n  return baseForm;\n}\nexport {\n  mergeForm,\n  mutateMergeDeep\n};\n//# sourceMappingURL=mergeForm.js.map\n","function formOptions(defaultOpts) {\n  return defaultOpts;\n}\nexport {\n  formOptions\n};\n//# sourceMappingURL=formOptions.js.map\n","import { useLayoutEffect, useEffect } from \"react\";\nconst useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\nexport {\n  useIsomorphicLayoutEffect\n};\n//# sourceMappingURL=useIsomorphicLayoutEffect.js.map\n","import { jsx, Fragment } from \"react/jsx-runtime\";\nimport { useState, useMemo } from \"react\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { FieldApi, functionalUpdate } from \"@tanstack/form-core\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect.js\";\nfunction useField(opts) {\n  const [fieldApi] = useState(() => {\n    const api = new FieldApi({\n      ...opts,\n      form: opts.form,\n      name: opts.name\n    });\n    const extendedApi = api;\n    extendedApi.Field = Field;\n    return extendedApi;\n  });\n  useIsomorphicLayoutEffect(fieldApi.mount, [fieldApi]);\n  useIsomorphicLayoutEffect(() => {\n    fieldApi.update(opts);\n  });\n  useStore(\n    fieldApi.store,\n    opts.mode === \"array\" ? (state) => {\n      return [\n        state.meta,\n        Object.keys(state.value ?? []).length\n      ];\n    } : void 0\n  );\n  return fieldApi;\n}\nconst Field = ({\n  children,\n  ...fieldOptions\n}) => {\n  const fieldApi = useField(fieldOptions);\n  const jsxToDisplay = useMemo(\n    () => functionalUpdate(children, fieldApi),\n    /**\n     * The reason this exists is to fix an issue with the React Compiler.\n     * Namely, functionalUpdate is memoized where it checks for `fieldApi`, which is a static type.\n     * This means that when `state.value` changes, it does not trigger a re-render. The useMemo explicitly fixes this problem\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [children, fieldApi, fieldApi.state.value, fieldApi.state.meta]\n  );\n  return /* @__PURE__ */ jsx(Fragment, { children: jsxToDisplay });\n};\nexport {\n  Field,\n  useField\n};\n//# sourceMappingURL=useField.js.map\n","import { jsx } from \"react/jsx-runtime\";\nimport { FormApi, functionalUpdate } from \"@tanstack/form-core\";\nimport { useStore } from \"@tanstack/react-store\";\nimport { useState } from \"react\";\nimport { Field } from \"./useField.js\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect.js\";\nfunction LocalSubscribe({\n  form,\n  selector,\n  children\n}) {\n  const data = useStore(form.store, selector);\n  return functionalUpdate(children, data);\n}\nfunction useForm(opts) {\n  const [formApi] = useState(() => {\n    const api = new FormApi(opts);\n    const extendedApi = api;\n    extendedApi.Field = function APIField(props) {\n      return /* @__PURE__ */ jsx(Field, { ...props, form: api });\n    };\n    extendedApi.Subscribe = (props) => {\n      return /* @__PURE__ */ jsx(\n        LocalSubscribe,\n        {\n          form: api,\n          selector: props.selector,\n          children: props.children\n        }\n      );\n    };\n    return extendedApi;\n  });\n  useIsomorphicLayoutEffect(formApi.mount, []);\n  useStore(formApi.store, (state) => state.isSubmitting);\n  useIsomorphicLayoutEffect(() => {\n    formApi.update(opts);\n  });\n  return formApi;\n}\nexport {\n  useForm\n};\n//# sourceMappingURL=useForm.js.map\n","function useTransform(fn, deps) {\n  return {\n    fn,\n    deps\n  };\n}\nexport {\n  useTransform\n};\n//# sourceMappingURL=useTransform.js.map\n","import { jsx } from \"react/jsx-runtime\";\nimport { createContext, useMemo, useContext } from \"react\";\nimport { useForm } from \"./useForm.js\";\nfunction createFormHookContexts() {\n  const fieldContext = createContext(null);\n  function useFieldContext() {\n    const field = useContext(fieldContext);\n    if (!field) {\n      throw new Error(\n        \"`fieldContext` only works when within a `fieldComponent` passed to `createFormHook`\"\n      );\n    }\n    return field;\n  }\n  const formContext = createContext(null);\n  function useFormContext() {\n    const form = useContext(formContext);\n    if (!form) {\n      throw new Error(\n        \"`formContext` only works when within a `formComponent` passed to `createFormHook`\"\n      );\n    }\n    return form;\n  }\n  return { fieldContext, useFieldContext, useFormContext, formContext };\n}\nfunction createFormHook({\n  fieldComponents,\n  fieldContext,\n  formContext,\n  formComponents\n}) {\n  function useAppForm(props) {\n    const form = useForm(props);\n    const AppForm = useMemo(() => {\n      return ({ children }) => {\n        return /* @__PURE__ */ jsx(formContext.Provider, { value: form, children });\n      };\n    }, [form]);\n    const AppField = useMemo(() => {\n      return ({ children, ...props2 }) => {\n        return /* @__PURE__ */ jsx(form.Field, { ...props2, children: (field) => (\n          // eslint-disable-next-line @eslint-react/no-context-provider\n          /* @__PURE__ */ jsx(fieldContext.Provider, { value: field, children: children(Object.assign(field, fieldComponents)) })\n        ) });\n      };\n    }, [form]);\n    const extendedForm = useMemo(() => {\n      return Object.assign(form, {\n        AppField,\n        AppForm,\n        ...formComponents\n      });\n    }, [form, AppField, AppForm]);\n    return extendedForm;\n  }\n  function withForm({\n    render,\n    props\n  }) {\n    return (innerProps) => render({ ...props, ...innerProps });\n  }\n  return {\n    useAppForm,\n    withForm\n  };\n}\nexport {\n  createFormHook,\n  createFormHookContexts\n};\n//# sourceMappingURL=createFormHook.js.map\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11],"mappings":"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"}