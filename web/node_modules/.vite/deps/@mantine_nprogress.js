import { __toESM } from "./chunk-51aI8Tpl.js";
import { require_react } from "./react-DN4s_Om_.js";
import { require_jsx_runtime } from "./jsx-runtime-IyzZn-RK.js";
import { OptionalPortal, Progress, getDefaultZIndex } from "./esm-CVXcWmma.js";
import { clamp } from "./esm-B4SPqT69.js";
import "./react-dom-BighsA4B.js";
import { createStore, useStore$1 as useStore } from "./store-DfMddHK9.js";

//#region node_modules/.pnpm/@mantine+nprogress@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+_bd03206fec13e2432da9a167ffa4b92b/node_modules/@mantine/nprogress/esm/nprogress.store.mjs
function getIntervalProgressValue(currentProgress) {
	let next = .5;
	if (currentProgress >= 0 && currentProgress <= 20) next = 10;
	else if (currentProgress >= 20 && currentProgress <= 50) next = 4;
	else if (currentProgress >= 50 && currentProgress <= 80) next = 2;
	else if (currentProgress >= 80 && currentProgress <= 99) next = 1;
	else if (currentProgress >= 99 && currentProgress <= 100) next = 0;
	return currentProgress + next;
}
const createNprogressStore = () => createStore({
	mounted: false,
	progress: 0,
	interval: 0,
	step: 1,
	stepInterval: 100,
	timeouts: []
});
const useNprogress = (store) => useStore(store);
function updateNavigationProgressStateAction(update, store) {
	const state = store.getState();
	store.setState({
		...state,
		...update(store.getState())
	});
}
function decrementNavigationProgressAction(store) {
	updateNavigationProgressStateAction((state) => ({ progress: Math.max(state.progress - state.step, 0) }), store);
}
function setNavigationProgressAction(value, store) {
	updateNavigationProgressStateAction(() => ({
		progress: clamp(value, 0, 100),
		mounted: true
	}), store);
}
function cleanupNavigationProgressAction(store) {
	updateNavigationProgressStateAction((state) => {
		window.clearInterval(state.interval);
		state.timeouts.forEach((timeout) => window.clearTimeout(timeout));
		return { timeouts: [] };
	}, store);
}
function completeNavigationProgressAction(store) {
	cleanupNavigationProgressAction(store);
	updateNavigationProgressStateAction((state) => {
		const mountedTimeout = window.setTimeout(() => {
			updateNavigationProgressStateAction(() => ({ mounted: false }), store);
		}, 50);
		const resetTimeout = window.setTimeout(() => {
			updateNavigationProgressStateAction(() => ({ progress: 0 }), store);
		}, state.stepInterval + 50);
		return {
			progress: 100,
			timeouts: [mountedTimeout, resetTimeout]
		};
	}, store);
}
function startNavigationProgressAction(store) {
	updateNavigationProgressStateAction((s) => ({
		progress: getIntervalProgressValue(s.progress),
		mounted: true
	}), store);
	updateNavigationProgressStateAction((state) => {
		window.clearInterval(state.interval);
		const interval = window.setInterval(() => {
			updateNavigationProgressStateAction((s) => ({
				progress: getIntervalProgressValue(s.progress),
				mounted: true
			}), store);
		}, state.stepInterval);
		return {
			interval,
			mounted: true
		};
	}, store);
}
function stopNavigationProgressAction(store) {
	updateNavigationProgressStateAction((state) => {
		window.clearInterval(state.interval);
		return { interval: -1 };
	}, store);
}
function resetNavigationProgressAction(store) {
	cleanupNavigationProgressAction(store);
	stopNavigationProgressAction(store);
	updateNavigationProgressStateAction(() => ({
		progress: 0,
		mounted: false
	}), store);
}
function incrementNavigationProgressAction(store) {
	updateNavigationProgressStateAction((state) => {
		const nextValue = Math.min(state.progress + state.step, 100);
		const nextMounted = nextValue !== 100 && nextValue !== 0;
		if (!nextMounted) {
			const timeout = window.setTimeout(() => resetNavigationProgressAction(store), state.stepInterval + 50);
			return {
				progress: nextValue,
				mounted: nextMounted,
				timeouts: [...state.timeouts, timeout]
			};
		}
		return {
			progress: nextValue,
			mounted: nextMounted
		};
	}, store);
}
function createNprogress() {
	const store = createNprogressStore();
	const actions = {
		start: () => startNavigationProgressAction(store),
		stop: () => stopNavigationProgressAction(store),
		reset: () => resetNavigationProgressAction(store),
		set: (value) => setNavigationProgressAction(value, store),
		increment: () => incrementNavigationProgressAction(store),
		decrement: () => decrementNavigationProgressAction(store),
		complete: () => completeNavigationProgressAction(store),
		cleanup: () => cleanupNavigationProgressAction(store)
	};
	return [store, actions];
}
const [nprogressStore, nprogress] = createNprogress();
const { start: startNavigationProgress, stop: stopNavigationProgress, reset: resetNavigationProgress, set: setNavigationProgress, increment: incrementNavigationProgress, decrement: decrementNavigationProgress, complete: completeNavigationProgress, cleanup: cleanupNavigationProgress } = nprogress;

//#endregion
//#region node_modules/.pnpm/@mantine+nprogress@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+_bd03206fec13e2432da9a167ffa4b92b/node_modules/@mantine/nprogress/esm/NavigationProgress.module.css.mjs
var classes = {
	"root": "m_8f2832ae",
	"section": "m_7a0fe999"
};

//#endregion
//#region node_modules/.pnpm/@mantine+nprogress@8.0.2_@mantine+core@8.0.2_@mantine+hooks@8.0.2_react@19.1.0__@types+_bd03206fec13e2432da9a167ffa4b92b/node_modules/@mantine/nprogress/esm/NavigationProgress.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
function NavigationProgress({ initialProgress = 0, color, size = 3, stepInterval = 500, withinPortal = true, portalProps, zIndex = getDefaultZIndex("max"), store = nprogressStore,...others }) {
	store.initialize({
		mounted: false,
		progress: initialProgress,
		interval: -1,
		step: 1,
		stepInterval,
		timeouts: []
	});
	const state = useNprogress(store);
	(0, import_react.useEffect)(() => () => resetNavigationProgressAction(store), [store]);
	return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(OptionalPortal, {
		...portalProps,
		withinPortal,
		children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Progress, {
			radius: 0,
			value: state.progress,
			size,
			color,
			classNames: classes,
			"data-mounted": state.mounted || void 0,
			__vars: { "--nprogress-z-index": zIndex?.toString() },
			...others
		})
	});
}
NavigationProgress.displayName = "@mantine/nprogress/NavigationProgress";

//#endregion
export { NavigationProgress, cleanupNavigationProgress, cleanupNavigationProgressAction, completeNavigationProgress, completeNavigationProgressAction, createNprogress, createNprogressStore, decrementNavigationProgress, decrementNavigationProgressAction, incrementNavigationProgress, incrementNavigationProgressAction, nprogress, nprogressStore, resetNavigationProgress, resetNavigationProgressAction, setNavigationProgress, setNavigationProgressAction, startNavigationProgress, startNavigationProgressAction, stopNavigationProgress, stopNavigationProgressAction, updateNavigationProgressStateAction, useNprogress };
//# sourceMappingURL=@mantine_nprogress.js.map