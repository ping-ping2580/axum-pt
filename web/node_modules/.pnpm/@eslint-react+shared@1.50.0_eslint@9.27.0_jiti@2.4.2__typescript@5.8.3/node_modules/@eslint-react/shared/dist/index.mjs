import module from 'module';
import { identity, getOrElseUpdate } from '@eslint-react/eff';
import { match, P } from 'ts-pattern';
import { RegExp } from '@eslint-react/kit';
import { z } from 'zod/v4';

// src/constants.ts
var NPM_SCOPE = "@eslint-react";
var GITHUB_URL = "https://github.com/Rel1cx/eslint-react";
var WEBSITE_URL = "https://eslint-react.xyz";

// src/get-doc-url.ts
var getDocsUrl = (pluginName) => (ruleName) => {
  if (pluginName === "x") {
    return `${WEBSITE_URL}/docs/rules/${ruleName}`;
  }
  return `${WEBSITE_URL}/docs/rules/${pluginName}-${ruleName}`;
};

// src/get-id.ts
var id = 0n;
var getId = () => (id++).toString();
var _require = module.createRequire(import.meta.url);
function getReactVersion(fallback) {
  try {
    return match(_require("react")).with({ version: P.select(P.string) }, identity).otherwise(() => fallback);
  } catch {
    return fallback;
  }
}
var CustomComponentPropSchema = z.object({
  /**
   * The name of the prop in the user-defined component.
   * @example
   * "to"
   */
  name: z.string(),
  /**
   * The name of the prop in the host component.
   * @example
   * "href"
   */
  as: z.optional(z.string()),
  /**
   * Whether the prop is controlled or not in the user-defined component.
   * @internal
   * @example
   * `true`
   */
  controlled: z.optional(z.boolean()),
  /**
   * The default value of the prop in the user-defined component.
   * @example
   * `"/"`
   */
  defaultValue: z.optional(z.string())
});
var CustomComponentSchema = z.object({
  /**
   * The name of the user-defined component.
   * @example
   * "Link"
   */
  name: z.string(),
  /**
   * The name of the host component that the user-defined component represents.
   * @example
   * "a"
   */
  as: z.optional(z.string()),
  /**
   * Attributes mapping between the user-defined component and the host component.
   * @example
   * `Link` component has a `to` attribute that represents the `href` attribute in the built-in `a` element with a default value of `"/"`.
   */
  attributes: z.optional(z.array(CustomComponentPropSchema)),
  /**
   * The ESQuery selector to select the component precisely.
   * @internal
   * @example
   * `JSXElement:has(JSXAttribute[name.name='component'][value.value='a'])`
   */
  selector: z.optional(z.string())
});
var CustomHooksSchema = z.object({
  use: z.optional(z.array(z.string())),
  useActionState: z.optional(z.array(z.string())),
  useCallback: z.optional(z.array(z.string())),
  useContext: z.optional(z.array(z.string())),
  useDebugValue: z.optional(z.array(z.string())),
  useDeferredValue: z.optional(z.array(z.string())),
  useEffect: z.optional(z.array(z.string())),
  useFormStatus: z.optional(z.array(z.string())),
  useId: z.optional(z.array(z.string())),
  useImperativeHandle: z.optional(z.array(z.string())),
  useInsertionEffect: z.optional(z.array(z.string())),
  useLayoutEffect: z.optional(z.array(z.string())),
  useMemo: z.optional(z.array(z.string())),
  useOptimistic: z.optional(z.array(z.string())),
  useReducer: z.optional(z.array(z.string())),
  useRef: z.optional(z.array(z.string())),
  useState: z.optional(z.array(z.string())),
  useSyncExternalStore: z.optional(z.array(z.string())),
  useTransition: z.optional(z.array(z.string()))
});
var ESLintReactSettingsSchema = z.object({
  /**
   * The source where React is imported from.
   * @description This allows to specify a custom import location for React when not using the official distribution.
   * @default `"react"`
   * @example `"@pika/react"`
   */
  importSource: z.optional(z.string()),
  /**
   * The identifier that's used for JSX Element creation.
   * @default `"createElement"`
   * @deprecated
   */
  jsxPragma: z.optional(z.string()),
  /**
   * The identifier that's used for JSX fragment elements.
   * @description This should not be a member expression (i.e. use "Fragment" instead of "React.Fragment").
   * @default `"Fragment"`
   * @deprecated
   */
  jsxPragmaFrag: z.optional(z.string()),
  /**
   * The name of the prop that is used for polymorphic components.
   * @description This is used to determine the type of the component.
   * @example `"as"`
   */
  polymorphicPropName: z.optional(z.string()),
  /**
   * @default `true`
   * @internal
   */
  strict: z.optional(z.boolean()),
  /**
   * Check both the shape and the import to determine if an API is from React.
   * @default `true`
   * @internal
   */
  skipImportCheck: z.optional(z.boolean()),
  /**
   * React version to use, "detect" means auto detect React version from the project's dependencies.
   * If `importSource` is specified, an equivalent version of React should be provided here.
   * @example `"18.3.1"`
   * @default `"detect"`
   */
  version: z.optional(z.string()),
  /**
   * A object to define additional hooks that are equivalent to the built-in React Hooks.
   * @description ESLint React will recognize these aliases as equivalent to the built-in hooks in all its rules.
   * @example `{ useEffect: ["useIsomorphicLayoutEffect"] }`
   */
  additionalHooks: z.optional(CustomHooksSchema),
  /**
   * An array of user-defined components
   * @description This is used to inform the ESLint React plugins how to treat these components during checks.
   * @example `[{ name: "Link", as: "a", attributes: [{ name: "to", as: "href" }, { name: "rel", defaultValue: "noopener noreferrer" }] }]`
   */
  additionalComponents: z.optional(z.array(CustomComponentSchema))
});
var ESLintSettingsSchema = z.optional(
  z.object({
    "react-x": z.optional(z.unknown())
  })
);
function isESLintSettings(settings) {
  return ESLintSettingsSchema.safeParse(settings).success;
}
function isESLintReactSettings(settings) {
  return ESLintReactSettingsSchema.safeParse(settings).success;
}
var DEFAULT_ESLINT_REACT_SETTINGS = {
  version: "detect",
  importSource: "react",
  strict: true,
  skipImportCheck: true,
  polymorphicPropName: "as",
  additionalComponents: [],
  additionalHooks: {
    useEffect: ["useIsomorphicLayoutEffect"],
    useLayoutEffect: ["useIsomorphicLayoutEffect"]
  }
};
var DEFAULT_ESLINT_SETTINGS = {
  "react-x": DEFAULT_ESLINT_REACT_SETTINGS
};
var coerceESLintSettings = (settings) => {
  return settings;
};
var decodeESLintSettings = (settings) => {
  if (isESLintSettings(settings)) {
    return settings;
  }
  return DEFAULT_ESLINT_SETTINGS;
};
var coerceSettings = (settings) => {
  return settings;
};
var decodeSettings = (settings) => {
  if (isESLintReactSettings(settings)) {
    return settings;
  }
  return DEFAULT_ESLINT_REACT_SETTINGS;
};
var normalizeSettings = ({
  additionalComponents = [],
  additionalHooks = {},
  importSource = "react",
  polymorphicPropName = "as",
  skipImportCheck = true,
  strict = true,
  version,
  ...rest
}) => {
  return {
    ...rest,
    components: additionalComponents.map((component) => {
      const { name, as = name, attributes = [], ...rest2 } = component;
      const re = RegExp.toRegExp(name);
      return {
        ...rest2,
        name,
        re,
        as,
        attributes: attributes.map(({ name: name2, as: as2 = name2, ...rest3 }) => ({
          ...rest3,
          name: name2,
          as: as2
        }))
      };
    }),
    additionalHooks,
    importSource,
    polymorphicPropName,
    skipImportCheck,
    strict,
    version: match(version).with(P.union(P.nullish, "", "detect"), () => getReactVersion("19.1.0")).otherwise(identity)
  };
};
var cache = /* @__PURE__ */ new Map();
function getSettingsFromContext(context) {
  const settings = context.settings;
  return getOrElseUpdate(
    cache,
    settings["react-x"],
    () => normalizeSettings(decodeSettings(settings["react-x"]))
  );
}
var defineSettings = identity;

export { CustomComponentPropSchema, CustomComponentSchema, CustomHooksSchema, DEFAULT_ESLINT_REACT_SETTINGS, DEFAULT_ESLINT_SETTINGS, ESLintReactSettingsSchema, ESLintSettingsSchema, GITHUB_URL, NPM_SCOPE, WEBSITE_URL, coerceESLintSettings, coerceSettings, decodeESLintSettings, decodeSettings, defineSettings, getDocsUrl, getId, getReactVersion, getSettingsFromContext, isESLintReactSettings, isESLintSettings, normalizeSettings };
