export { parseAst, parseAstAsync } from 'rolldown/parseAst';
import { D as DevEnvironment } from './chunks/dep-C0xpd56d.js';
export { B as BuildEnvironment, e as build, k as buildErrorMessage, f as createBuilder, E as createFilter, g as createIdResolver, H as createLogger, m as createRunnableDevEnvironment, c as createServer, x as createServerHotChannel, v as createServerModuleRunner, w as createServerModuleRunnerTransport, d as defineConfig, u as fetchModule, h as formatPostcssSourceMap, K as isFileLoadingAllowed, J as isFileServingAllowed, n as isRunnableDevEnvironment, l as loadConfigFromFile, L as loadEnv, C as mergeAlias, A as mergeConfig, y as moduleRunnerTransform, z as normalizePath, o as optimizeDeps, p as perEnvironmentPlugin, a as perEnvironmentState, i as preprocessCSS, b as preview, r as resolveConfig, M as resolveEnvPrefix, F as rollupVersion, q as runnerImport, I as searchForWorkspaceRoot, G as send, s as sortUserPlugins, t as transformWithEsbuild, j as transformWithOxc } from './chunks/dep-C0xpd56d.js';
export { defaultAllowedOrigins, DEFAULT_CLIENT_CONDITIONS as defaultClientConditions, DEFAULT_CLIENT_MAIN_FIELDS as defaultClientMainFields, DEFAULT_SERVER_CONDITIONS as defaultServerConditions, DEFAULT_SERVER_MAIN_FIELDS as defaultServerMainFields, VERSION as version } from './constants.js';
export { withFilter } from 'rolldown/filter';
export { VERSION as rolldownVersion } from 'rolldown';
import 'node:fs';
import 'node:path';
import 'node:fs/promises';
import 'node:url';
import 'node:util';
import 'node:perf_hooks';
import 'node:module';
import 'node:crypto';
import 'picomatch';
import 'rolldown/experimental';
import 'node:child_process';
import 'node:http';
import 'node:https';
import 'tty';
import 'util';
import 'fs';
import 'net';
import 'events';
import 'url';
import 'http';
import 'path';
import 'stream';
import 'os';
import 'child_process';
import 'node:os';
import 'node:net';
import 'node:dns';
import 'rolldown-vite/module-runner';
import 'node:buffer';
import 'module';
import 'node:readline';
import 'node:process';
import 'node:events';
import 'tinyglobby';
import 'crypto';
import 'node:assert';
import 'node:v8';
import 'node:worker_threads';
import 'https';
import 'tls';
import 'zlib';
import 'buffer';
import 'assert';
import 'node:querystring';
import 'node:zlib';

const CSS_LANGS_RE = (
  // eslint-disable-next-line regexp/no-unused-capturing-group
  /\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/
);
const isCSSRequest = (request) => CSS_LANGS_RE.test(request);
function splitVendorChunk(_options = {}) {
  return () => null;
}
function splitVendorChunkPlugin() {
  return {
    name: "vite:split-vendor-chunk"
    // config(config) {
    //   let outputs = config.build?.rollupOptions?.output
    //   if (outputs) {
    //     outputs = arraify(outputs)
    //     for (const output of outputs) {
    //       const viteManualChunks = createSplitVendorChunk(output, config)
    //       if (viteManualChunks) {
    //         if (output.manualChunks) {
    //           if (typeof output.manualChunks === 'function') {
    //             const userManualChunks = output.manualChunks
    //             output.manualChunks = (id: string, api: ManualChunkMeta) => {
    //               return userManualChunks(id, api) ?? viteManualChunks(id, api)
    //             }
    //           } else {
    //             // else, leave the object form of manualChunks untouched, as
    //             // we can't safely replicate rollup handling.
    //             // eslint-disable-next-line no-console
    //             console.warn(
    //               "(!) the `splitVendorChunk` plugin doesn't have any effect when using the object form of `build.rollupOptions.output.manualChunks`. Consider using the function form instead.",
    //             )
    //           }
    //         } else {
    //           output.manualChunks = viteManualChunks
    //         }
    //       }
    //     }
    //   } else {
    //     return {
    //       build: {
    //         rollupOptions: {
    //           output: {
    //             manualChunks: createSplitVendorChunk({}, config),
    //           },
    //         },
    //       },
    //     }
    //   }
    // },
    // buildStart() {
    //   caches.forEach((cache) => cache.reset())
    // },
  };
}

const esbuildVersion = "0.25.0";

function createFetchableDevEnvironment(name, config, context) {
  if (typeof Request === "undefined" || typeof Response === "undefined") {
    throw new TypeError(
      "FetchableDevEnvironment requires a global `Request` and `Response` object."
    );
  }
  if (!context.handleRequest) {
    throw new TypeError(
      "FetchableDevEnvironment requires a `handleRequest` method during initialisation."
    );
  }
  return new FetchableDevEnvironment(name, config, context);
}
function isFetchableDevEnvironment(environment) {
  return environment instanceof FetchableDevEnvironment;
}
class FetchableDevEnvironment extends DevEnvironment {
  _handleRequest;
  constructor(name, config, context) {
    super(name, config, context);
    this._handleRequest = context.handleRequest;
  }
  async dispatchFetch(request) {
    if (!(request instanceof Request)) {
      throw new TypeError(
        "FetchableDevEnvironment `dispatchFetch` must receive a `Request` object."
      );
    }
    const response = await this._handleRequest(request);
    if (!(response instanceof Response)) {
      throw new TypeError(
        "FetchableDevEnvironment `context.handleRequest` must return a `Response` object."
      );
    }
    return response;
  }
}

export { DevEnvironment, createFetchableDevEnvironment, esbuildVersion, isCSSRequest, isFetchableDevEnvironment, splitVendorChunk, splitVendorChunkPlugin };
