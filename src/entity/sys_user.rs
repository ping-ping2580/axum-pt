//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16
use crate::app::enumeration::Gender;
use crate::app::id::next_id;
use sea_orm::entity::prelude::*;
use sea_orm::prelude::async_trait::async_trait;
use sea_orm::ActiveValue;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "demo", table_name = "sys_user")]
#[serde(rename_all = "camelCase")]
pub struct Model 
{
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub gender: Gender,
    pub account: String,
    pub password: String,
    pub mobile_phone: String,
    pub birthday: Date,
    pub enabled: bool,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel
{
    async fn before_save<C>(mut self, _ : &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait
    {
        if insert
        {
            self.id = ActiveValue::Set(next_id());
        }
        Ok(self)
    }
}


